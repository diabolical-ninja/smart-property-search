# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelSupplementaryMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'measurement_unit': 'str',
        'name': 'str',
        'description': 'str',
        'measurement': 'float'
    }

    attribute_map = {
        'measurement_unit': 'measurementUnit',
        'name': 'name',
        'description': 'description',
        'measurement': 'measurement'
    }

    def __init__(self, measurement_unit=None, name=None, description=None, measurement=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelSupplementaryMetadata - a model defined in Swagger"""  # noqa: E501

        self._measurement_unit = None
        self._name = None
        self._description = None
        self._measurement = None
        self.discriminator = None

        if measurement_unit is not None:
            self.measurement_unit = measurement_unit
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if measurement is not None:
            self.measurement = measurement

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501

        Measurement unit  # noqa: E501

        :return: The measurement_unit of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this DomainListingAdminServiceV1ModelSupplementaryMetadata.

        Measurement unit  # noqa: E501

        :param measurement_unit: The measurement_unit of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["squareMetres", "hectares", "millimetres", "dSE"]  # noqa: E501
        if measurement_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `measurement_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(measurement_unit, allowed_values)
            )

        self._measurement_unit = measurement_unit

    @property
    def name(self):
        """Gets the name of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DomainListingAdminServiceV1ModelSupplementaryMetadata.

        Name  # noqa: E501

        :param name: The name of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DomainListingAdminServiceV1ModelSupplementaryMetadata.

        Description  # noqa: E501

        :param description: The description of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def measurement(self):
        """Gets the measurement of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501

        Measurement  # noqa: E501

        :return: The measurement of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501
        :rtype: float
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement):
        """Sets the measurement of this DomainListingAdminServiceV1ModelSupplementaryMetadata.

        Measurement  # noqa: E501

        :param measurement: The measurement of this DomainListingAdminServiceV1ModelSupplementaryMetadata.  # noqa: E501
        :type: float
        """

        self._measurement = measurement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelSupplementaryMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelSupplementaryMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
