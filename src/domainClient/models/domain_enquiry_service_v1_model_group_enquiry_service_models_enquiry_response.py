# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        's3_key': 'str',
        'message': 'str',
        'enquiry_receipt_timestamp': 'datetime',
        'warnings': 'list[str]'
    }

    attribute_map = {
        's3_key': 's3Key',
        'message': 'message',
        'enquiry_receipt_timestamp': 'enquiryReceiptTimestamp',
        'warnings': 'warnings'
    }

    def __init__(self, s3_key=None, message=None, enquiry_receipt_timestamp=None, warnings=None):  # noqa: E501
        """DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse - a model defined in Swagger"""  # noqa: E501

        self._s3_key = None
        self._message = None
        self._enquiry_receipt_timestamp = None
        self._warnings = None
        self.discriminator = None

        if s3_key is not None:
            self.s3_key = s3_key
        if message is not None:
            self.message = message
        if enquiry_receipt_timestamp is not None:
            self.enquiry_receipt_timestamp = enquiry_receipt_timestamp
        if warnings is not None:
            self.warnings = warnings

    @property
    def s3_key(self):
        """Gets the s3_key of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501


        :return: The s3_key of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501
        :rtype: str
        """
        return self._s3_key

    @s3_key.setter
    def s3_key(self, s3_key):
        """Sets the s3_key of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.


        :param s3_key: The s3_key of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501
        :type: str
        """

        self._s3_key = s3_key

    @property
    def message(self):
        """Gets the message of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501


        :return: The message of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.


        :param message: The message of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def enquiry_receipt_timestamp(self):
        """Gets the enquiry_receipt_timestamp of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501


        :return: The enquiry_receipt_timestamp of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._enquiry_receipt_timestamp

    @enquiry_receipt_timestamp.setter
    def enquiry_receipt_timestamp(self, enquiry_receipt_timestamp):
        """Sets the enquiry_receipt_timestamp of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.


        :param enquiry_receipt_timestamp: The enquiry_receipt_timestamp of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501
        :type: datetime
        """

        self._enquiry_receipt_timestamp = enquiry_receipt_timestamp

    @property
    def warnings(self):
        """Gets the warnings of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501


        :return: The warnings of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.


        :param warnings: The warnings of this DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse.  # noqa: E501
        :type: list[str]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
