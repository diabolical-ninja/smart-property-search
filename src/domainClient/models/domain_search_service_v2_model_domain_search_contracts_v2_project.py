# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainSearchServiceV2ModelDomainSearchContractsV2Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'promo_level': 'str',
        'state': 'str',
        'id': 'int',
        'name': 'str',
        'banner_url': 'str',
        'preferred_color_hex': 'str',
        'logo_url': 'str',
        'labels': 'list[str]',
        'displayable_address': 'str',
        'suburb': 'str',
        'suburb_id': 'int',
        'features': 'list[str]',
        'media': 'list[DomainSearchServiceV2ModelDomainSearchContractsV2Media]',
        'project_slug': 'str'
    }

    attribute_map = {
        'promo_level': 'promoLevel',
        'state': 'state',
        'id': 'id',
        'name': 'name',
        'banner_url': 'bannerUrl',
        'preferred_color_hex': 'preferredColorHex',
        'logo_url': 'logoUrl',
        'labels': 'labels',
        'displayable_address': 'displayableAddress',
        'suburb': 'suburb',
        'suburb_id': 'suburbId',
        'features': 'features',
        'media': 'media',
        'project_slug': 'projectSlug'
    }

    def __init__(self, promo_level=None, state=None, id=None, name=None, banner_url=None, preferred_color_hex=None, logo_url=None, labels=None, displayable_address=None, suburb=None, suburb_id=None, features=None, media=None, project_slug=None):  # noqa: E501
        """DomainSearchServiceV2ModelDomainSearchContractsV2Project - a model defined in Swagger"""  # noqa: E501

        self._promo_level = None
        self._state = None
        self._id = None
        self._name = None
        self._banner_url = None
        self._preferred_color_hex = None
        self._logo_url = None
        self._labels = None
        self._displayable_address = None
        self._suburb = None
        self._suburb_id = None
        self._features = None
        self._media = None
        self._project_slug = None
        self.discriminator = None

        if promo_level is not None:
            self.promo_level = promo_level
        if state is not None:
            self.state = state
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if banner_url is not None:
            self.banner_url = banner_url
        if preferred_color_hex is not None:
            self.preferred_color_hex = preferred_color_hex
        if logo_url is not None:
            self.logo_url = logo_url
        if labels is not None:
            self.labels = labels
        if displayable_address is not None:
            self.displayable_address = displayable_address
        if suburb is not None:
            self.suburb = suburb
        if suburb_id is not None:
            self.suburb_id = suburb_id
        if features is not None:
            self.features = features
        if media is not None:
            self.media = media
        if project_slug is not None:
            self.project_slug = project_slug

    @property
    def promo_level(self):
        """Gets the promo_level of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The promo_level of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: str
        """
        return self._promo_level

    @promo_level.setter
    def promo_level(self, promo_level):
        """Sets the promo_level of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param promo_level: The promo_level of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: str
        """
        allowed_values = ["Standard", "Premium"]  # noqa: E501
        if promo_level not in allowed_values:
            raise ValueError(
                "Invalid value for `promo_level` ({0}), must be one of {1}"  # noqa: E501
                .format(promo_level, allowed_values)
            )

        self._promo_level = promo_level

    @property
    def state(self):
        """Gets the state of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The state of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param state: The state of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACT", "NSW", "QLD", "VIC", "SA", "WA", "NT", "TAS"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def id(self):
        """Gets the id of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The id of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param id: The id of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The name of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param name: The name of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def banner_url(self):
        """Gets the banner_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The banner_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: str
        """
        return self._banner_url

    @banner_url.setter
    def banner_url(self, banner_url):
        """Sets the banner_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param banner_url: The banner_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: str
        """

        self._banner_url = banner_url

    @property
    def preferred_color_hex(self):
        """Gets the preferred_color_hex of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The preferred_color_hex of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: str
        """
        return self._preferred_color_hex

    @preferred_color_hex.setter
    def preferred_color_hex(self, preferred_color_hex):
        """Sets the preferred_color_hex of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param preferred_color_hex: The preferred_color_hex of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: str
        """

        self._preferred_color_hex = preferred_color_hex

    @property
    def logo_url(self):
        """Gets the logo_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The logo_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param logo_url: The logo_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def labels(self):
        """Gets the labels of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The labels of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param labels: The labels of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def displayable_address(self):
        """Gets the displayable_address of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The displayable_address of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: str
        """
        return self._displayable_address

    @displayable_address.setter
    def displayable_address(self, displayable_address):
        """Sets the displayable_address of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param displayable_address: The displayable_address of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: str
        """

        self._displayable_address = displayable_address

    @property
    def suburb(self):
        """Gets the suburb of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The suburb of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param suburb: The suburb of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def suburb_id(self):
        """Gets the suburb_id of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The suburb_id of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: int
        """
        return self._suburb_id

    @suburb_id.setter
    def suburb_id(self, suburb_id):
        """Sets the suburb_id of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param suburb_id: The suburb_id of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: int
        """

        self._suburb_id = suburb_id

    @property
    def features(self):
        """Gets the features of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The features of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param features: The features of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def media(self):
        """Gets the media of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The media of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: list[DomainSearchServiceV2ModelDomainSearchContractsV2Media]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param media: The media of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: list[DomainSearchServiceV2ModelDomainSearchContractsV2Media]
        """

        self._media = media

    @property
    def project_slug(self):
        """Gets the project_slug of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501


        :return: The project_slug of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :rtype: str
        """
        return self._project_slug

    @project_slug.setter
    def project_slug(self, project_slug):
        """Sets the project_slug of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.


        :param project_slug: The project_slug of this DomainSearchServiceV2ModelDomainSearchContractsV2Project.  # noqa: E501
        :type: str
        """

        self._project_slug = project_slug

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainSearchServiceV2ModelDomainSearchContractsV2Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainSearchServiceV2ModelDomainSearchContractsV2Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
