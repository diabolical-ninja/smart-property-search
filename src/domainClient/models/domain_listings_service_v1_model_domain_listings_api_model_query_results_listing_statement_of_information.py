# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'estimated_price': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice',
        'comparable_data': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData',
        'suburb_median_price': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData',
        'documentation_url': 'str'
    }

    attribute_map = {
        'estimated_price': 'estimatedPrice',
        'comparable_data': 'comparableData',
        'suburb_median_price': 'suburbMedianPrice',
        'documentation_url': 'documentationUrl'
    }

    def __init__(self, estimated_price=None, comparable_data=None, suburb_median_price=None, documentation_url=None):  # noqa: E501
        """DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation - a model defined in Swagger"""  # noqa: E501

        self._estimated_price = None
        self._comparable_data = None
        self._suburb_median_price = None
        self._documentation_url = None
        self.discriminator = None

        if estimated_price is not None:
            self.estimated_price = estimated_price
        if comparable_data is not None:
            self.comparable_data = comparable_data
        if suburb_median_price is not None:
            self.suburb_median_price = suburb_median_price
        if documentation_url is not None:
            self.documentation_url = documentation_url

    @property
    def estimated_price(self):
        """Gets the estimated_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501


        :return: The estimated_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice
        """
        return self._estimated_price

    @estimated_price.setter
    def estimated_price(self, estimated_price):
        """Sets the estimated_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.


        :param estimated_price: The estimated_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingBasicPrice
        """

        self._estimated_price = estimated_price

    @property
    def comparable_data(self):
        """Gets the comparable_data of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501


        :return: The comparable_data of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData
        """
        return self._comparable_data

    @comparable_data.setter
    def comparable_data(self, comparable_data):
        """Sets the comparable_data of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.


        :param comparable_data: The comparable_data of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData
        """

        self._comparable_data = comparable_data

    @property
    def suburb_median_price(self):
        """Gets the suburb_median_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501


        :return: The suburb_median_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
        """
        return self._suburb_median_price

    @suburb_median_price.setter
    def suburb_median_price(self, suburb_median_price):
        """Sets the suburb_median_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.


        :param suburb_median_price: The suburb_median_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingMedianPriceData
        """

        self._suburb_median_price = suburb_median_price

    @property
    def documentation_url(self):
        """Gets the documentation_url of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501


        :return: The documentation_url of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.


        :param documentation_url: The documentation_url of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation.  # noqa: E501
        :type: str
        """

        self._documentation_url = documentation_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
