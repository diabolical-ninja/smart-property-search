# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelSaleInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annual_sales': 'float',
        'annual_profit': 'float',
        'stock_value': 'float'
    }

    attribute_map = {
        'annual_sales': 'annualSales',
        'annual_profit': 'annualProfit',
        'stock_value': 'stockValue'
    }

    def __init__(self, annual_sales=None, annual_profit=None, stock_value=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelSaleInfo - a model defined in Swagger"""  # noqa: E501

        self._annual_sales = None
        self._annual_profit = None
        self._stock_value = None
        self.discriminator = None

        if annual_sales is not None:
            self.annual_sales = annual_sales
        if annual_profit is not None:
            self.annual_profit = annual_profit
        if stock_value is not None:
            self.stock_value = stock_value

    @property
    def annual_sales(self):
        """Gets the annual_sales of this DomainListingAdminServiceV1ModelSaleInfo.  # noqa: E501

        Annual sales amount for the business  # noqa: E501

        :return: The annual_sales of this DomainListingAdminServiceV1ModelSaleInfo.  # noqa: E501
        :rtype: float
        """
        return self._annual_sales

    @annual_sales.setter
    def annual_sales(self, annual_sales):
        """Sets the annual_sales of this DomainListingAdminServiceV1ModelSaleInfo.

        Annual sales amount for the business  # noqa: E501

        :param annual_sales: The annual_sales of this DomainListingAdminServiceV1ModelSaleInfo.  # noqa: E501
        :type: float
        """

        self._annual_sales = annual_sales

    @property
    def annual_profit(self):
        """Gets the annual_profit of this DomainListingAdminServiceV1ModelSaleInfo.  # noqa: E501

        Annual profit amount for the business  # noqa: E501

        :return: The annual_profit of this DomainListingAdminServiceV1ModelSaleInfo.  # noqa: E501
        :rtype: float
        """
        return self._annual_profit

    @annual_profit.setter
    def annual_profit(self, annual_profit):
        """Sets the annual_profit of this DomainListingAdminServiceV1ModelSaleInfo.

        Annual profit amount for the business  # noqa: E501

        :param annual_profit: The annual_profit of this DomainListingAdminServiceV1ModelSaleInfo.  # noqa: E501
        :type: float
        """

        self._annual_profit = annual_profit

    @property
    def stock_value(self):
        """Gets the stock_value of this DomainListingAdminServiceV1ModelSaleInfo.  # noqa: E501

        Stock value of the business  # noqa: E501

        :return: The stock_value of this DomainListingAdminServiceV1ModelSaleInfo.  # noqa: E501
        :rtype: float
        """
        return self._stock_value

    @stock_value.setter
    def stock_value(self, stock_value):
        """Sets the stock_value of this DomainListingAdminServiceV1ModelSaleInfo.

        Stock value of the business  # noqa: E501

        :param stock_value: The stock_value of this DomainListingAdminServiceV1ModelSaleInfo.  # noqa: E501
        :type: float
        """

        self._stock_value = stock_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelSaleInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelSaleInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
