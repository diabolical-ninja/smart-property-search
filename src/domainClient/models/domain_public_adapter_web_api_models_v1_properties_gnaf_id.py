# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1PropertiesGnafId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'month_no': 'int',
        'year_no': 'int',
        'gnaf_pid': 'str'
    }

    attribute_map = {
        'month_no': 'monthNo',
        'year_no': 'yearNo',
        'gnaf_pid': 'gnafPID'
    }

    def __init__(self, month_no=None, year_no=None, gnaf_pid=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1PropertiesGnafId - a model defined in Swagger"""  # noqa: E501

        self._month_no = None
        self._year_no = None
        self._gnaf_pid = None
        self.discriminator = None

        if month_no is not None:
            self.month_no = month_no
        if year_no is not None:
            self.year_no = year_no
        if gnaf_pid is not None:
            self.gnaf_pid = gnaf_pid

    @property
    def month_no(self):
        """Gets the month_no of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.  # noqa: E501

        PSMA GNAF Edition Month.  # noqa: E501

        :return: The month_no of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.  # noqa: E501
        :rtype: int
        """
        return self._month_no

    @month_no.setter
    def month_no(self, month_no):
        """Sets the month_no of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.

        PSMA GNAF Edition Month.  # noqa: E501

        :param month_no: The month_no of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.  # noqa: E501
        :type: int
        """

        self._month_no = month_no

    @property
    def year_no(self):
        """Gets the year_no of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.  # noqa: E501

        PSMA GNAF Edition Year.  # noqa: E501

        :return: The year_no of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.  # noqa: E501
        :rtype: int
        """
        return self._year_no

    @year_no.setter
    def year_no(self, year_no):
        """Sets the year_no of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.

        PSMA GNAF Edition Year.  # noqa: E501

        :param year_no: The year_no of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.  # noqa: E501
        :type: int
        """

        self._year_no = year_no

    @property
    def gnaf_pid(self):
        """Gets the gnaf_pid of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.  # noqa: E501

        PSMA GNAF Pid.  # noqa: E501

        :return: The gnaf_pid of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.  # noqa: E501
        :rtype: str
        """
        return self._gnaf_pid

    @gnaf_pid.setter
    def gnaf_pid(self, gnaf_pid):
        """Sets the gnaf_pid of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.

        PSMA GNAF Pid.  # noqa: E501

        :param gnaf_pid: The gnaf_pid of this DomainPublicAdapterWebApiModelsV1PropertiesGnafId.  # noqa: E501
        :type: str
        """

        self._gnaf_pid = gnaf_pid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1PropertiesGnafId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1PropertiesGnafId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
