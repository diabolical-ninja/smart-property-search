# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelMedianPriceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price_type': 'str',
        'suburb': 'str',
        'postcode': 'str',
        'median_price': 'int',
        'source': 'str',
        'source_date_from': 'datetime',
        'source_date_to': 'datetime',
        'declaration_text': 'str'
    }

    attribute_map = {
        'price_type': 'priceType',
        'suburb': 'suburb',
        'postcode': 'postcode',
        'median_price': 'medianPrice',
        'source': 'source',
        'source_date_from': 'sourceDateFrom',
        'source_date_to': 'sourceDateTo',
        'declaration_text': 'declarationText'
    }

    def __init__(self, price_type=None, suburb=None, postcode=None, median_price=None, source=None, source_date_from=None, source_date_to=None, declaration_text=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelMedianPriceData - a model defined in Swagger"""  # noqa: E501

        self._price_type = None
        self._suburb = None
        self._postcode = None
        self._median_price = None
        self._source = None
        self._source_date_from = None
        self._source_date_to = None
        self._declaration_text = None
        self.discriminator = None

        if price_type is not None:
            self.price_type = price_type
        if suburb is not None:
            self.suburb = suburb
        if postcode is not None:
            self.postcode = postcode
        if median_price is not None:
            self.median_price = median_price
        if source is not None:
            self.source = source
        if source_date_from is not None:
            self.source_date_from = source_date_from
        if source_date_to is not None:
            self.source_date_to = source_date_to
        if declaration_text is not None:
            self.declaration_text = declaration_text

    @property
    def price_type(self):
        """Gets the price_type of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501

        Type of property this median price is based on .  # noqa: E501

        :return: The price_type of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this DomainListingAdminServiceV1ModelMedianPriceData.

        Type of property this median price is based on .  # noqa: E501

        :param price_type: The price_type of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :type: str
        """
        allowed_values = ["house", "apartmentUnitFlat", "vacantLand"]  # noqa: E501
        if price_type not in allowed_values:
            raise ValueError(
                "Invalid value for `price_type` ({0}), must be one of {1}"  # noqa: E501
                .format(price_type, allowed_values)
            )

        self._price_type = price_type

    @property
    def suburb(self):
        """Gets the suburb of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501

        Name of the suburb median price is based on.  # noqa: E501

        :return: The suburb of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this DomainListingAdminServiceV1ModelMedianPriceData.

        Name of the suburb median price is based on.  # noqa: E501

        :param suburb: The suburb of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def postcode(self):
        """Gets the postcode of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501

        Postcode of the suburb  # noqa: E501

        :return: The postcode of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this DomainListingAdminServiceV1ModelMedianPriceData.

        Postcode of the suburb  # noqa: E501

        :param postcode: The postcode of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def median_price(self):
        """Gets the median_price of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501

        Median price for the suburb .  # noqa: E501

        :return: The median_price of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :rtype: int
        """
        return self._median_price

    @median_price.setter
    def median_price(self, median_price):
        """Sets the median_price of this DomainListingAdminServiceV1ModelMedianPriceData.

        Median price for the suburb .  # noqa: E501

        :param median_price: The median_price of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :type: int
        """

        self._median_price = median_price

    @property
    def source(self):
        """Gets the source of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501

        Where the Median Price come from  # noqa: E501

        :return: The source of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DomainListingAdminServiceV1ModelMedianPriceData.

        Where the Median Price come from  # noqa: E501

        :param source: The source of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_date_from(self):
        """Gets the source_date_from of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501

        Median Price Source Data From Date  # noqa: E501

        :return: The source_date_from of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :rtype: datetime
        """
        return self._source_date_from

    @source_date_from.setter
    def source_date_from(self, source_date_from):
        """Sets the source_date_from of this DomainListingAdminServiceV1ModelMedianPriceData.

        Median Price Source Data From Date  # noqa: E501

        :param source_date_from: The source_date_from of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :type: datetime
        """

        self._source_date_from = source_date_from

    @property
    def source_date_to(self):
        """Gets the source_date_to of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501

        Median Price Source Data To Date  # noqa: E501

        :return: The source_date_to of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :rtype: datetime
        """
        return self._source_date_to

    @source_date_to.setter
    def source_date_to(self, source_date_to):
        """Sets the source_date_to of this DomainListingAdminServiceV1ModelMedianPriceData.

        Median Price Source Data To Date  # noqa: E501

        :param source_date_to: The source_date_to of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :type: datetime
        """

        self._source_date_to = source_date_to

    @property
    def declaration_text(self):
        """Gets the declaration_text of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501

        Declaration text should be provided when no median price data available  # noqa: E501

        :return: The declaration_text of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :rtype: str
        """
        return self._declaration_text

    @declaration_text.setter
    def declaration_text(self, declaration_text):
        """Sets the declaration_text of this DomainListingAdminServiceV1ModelMedianPriceData.

        Declaration text should be provided when no median price data available  # noqa: E501

        :param declaration_text: The declaration_text of this DomainListingAdminServiceV1ModelMedianPriceData.  # noqa: E501
        :type: str
        """

        self._declaration_text = declaration_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelMedianPriceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelMedianPriceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
