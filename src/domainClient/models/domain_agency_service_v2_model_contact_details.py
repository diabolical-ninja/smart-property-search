# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainAgencyServiceV2ModelContactDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_sale': 'DomainAgencyServiceV2ModelEmailPhone',
        'business_rent': 'DomainAgencyServiceV2ModelEmailPhone',
        'commercial_lease': 'DomainAgencyServiceV2ModelEmailPhone',
        'commercial_sale': 'DomainAgencyServiceV2ModelEmailPhone',
        'email_domains': 'list[DomainAgencyServiceV2ModelEmailDomain]',
        'general': 'DomainAgencyServiceV2ModelGeneralContactDetails',
        'residential_rent': 'DomainAgencyServiceV2ModelEmailPhone',
        'residential_sale': 'DomainAgencyServiceV2ModelEmailPhone'
    }

    attribute_map = {
        'business_sale': 'businessSale',
        'business_rent': 'businessRent',
        'commercial_lease': 'commercialLease',
        'commercial_sale': 'commercialSale',
        'email_domains': 'emailDomains',
        'general': 'general',
        'residential_rent': 'residentialRent',
        'residential_sale': 'residentialSale'
    }

    def __init__(self, business_sale=None, business_rent=None, commercial_lease=None, commercial_sale=None, email_domains=None, general=None, residential_rent=None, residential_sale=None):  # noqa: E501
        """DomainAgencyServiceV2ModelContactDetails - a model defined in Swagger"""  # noqa: E501

        self._business_sale = None
        self._business_rent = None
        self._commercial_lease = None
        self._commercial_sale = None
        self._email_domains = None
        self._general = None
        self._residential_rent = None
        self._residential_sale = None
        self.discriminator = None

        if business_sale is not None:
            self.business_sale = business_sale
        if business_rent is not None:
            self.business_rent = business_rent
        if commercial_lease is not None:
            self.commercial_lease = commercial_lease
        if commercial_sale is not None:
            self.commercial_sale = commercial_sale
        if email_domains is not None:
            self.email_domains = email_domains
        if general is not None:
            self.general = general
        if residential_rent is not None:
            self.residential_rent = residential_rent
        if residential_sale is not None:
            self.residential_sale = residential_sale

    @property
    def business_sale(self):
        """Gets the business_sale of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501


        :return: The business_sale of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :rtype: DomainAgencyServiceV2ModelEmailPhone
        """
        return self._business_sale

    @business_sale.setter
    def business_sale(self, business_sale):
        """Sets the business_sale of this DomainAgencyServiceV2ModelContactDetails.


        :param business_sale: The business_sale of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :type: DomainAgencyServiceV2ModelEmailPhone
        """

        self._business_sale = business_sale

    @property
    def business_rent(self):
        """Gets the business_rent of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501


        :return: The business_rent of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :rtype: DomainAgencyServiceV2ModelEmailPhone
        """
        return self._business_rent

    @business_rent.setter
    def business_rent(self, business_rent):
        """Sets the business_rent of this DomainAgencyServiceV2ModelContactDetails.


        :param business_rent: The business_rent of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :type: DomainAgencyServiceV2ModelEmailPhone
        """

        self._business_rent = business_rent

    @property
    def commercial_lease(self):
        """Gets the commercial_lease of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501


        :return: The commercial_lease of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :rtype: DomainAgencyServiceV2ModelEmailPhone
        """
        return self._commercial_lease

    @commercial_lease.setter
    def commercial_lease(self, commercial_lease):
        """Sets the commercial_lease of this DomainAgencyServiceV2ModelContactDetails.


        :param commercial_lease: The commercial_lease of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :type: DomainAgencyServiceV2ModelEmailPhone
        """

        self._commercial_lease = commercial_lease

    @property
    def commercial_sale(self):
        """Gets the commercial_sale of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501


        :return: The commercial_sale of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :rtype: DomainAgencyServiceV2ModelEmailPhone
        """
        return self._commercial_sale

    @commercial_sale.setter
    def commercial_sale(self, commercial_sale):
        """Sets the commercial_sale of this DomainAgencyServiceV2ModelContactDetails.


        :param commercial_sale: The commercial_sale of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :type: DomainAgencyServiceV2ModelEmailPhone
        """

        self._commercial_sale = commercial_sale

    @property
    def email_domains(self):
        """Gets the email_domains of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501


        :return: The email_domains of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :rtype: list[DomainAgencyServiceV2ModelEmailDomain]
        """
        return self._email_domains

    @email_domains.setter
    def email_domains(self, email_domains):
        """Sets the email_domains of this DomainAgencyServiceV2ModelContactDetails.


        :param email_domains: The email_domains of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :type: list[DomainAgencyServiceV2ModelEmailDomain]
        """

        self._email_domains = email_domains

    @property
    def general(self):
        """Gets the general of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501


        :return: The general of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :rtype: DomainAgencyServiceV2ModelGeneralContactDetails
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this DomainAgencyServiceV2ModelContactDetails.


        :param general: The general of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :type: DomainAgencyServiceV2ModelGeneralContactDetails
        """

        self._general = general

    @property
    def residential_rent(self):
        """Gets the residential_rent of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501


        :return: The residential_rent of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :rtype: DomainAgencyServiceV2ModelEmailPhone
        """
        return self._residential_rent

    @residential_rent.setter
    def residential_rent(self, residential_rent):
        """Sets the residential_rent of this DomainAgencyServiceV2ModelContactDetails.


        :param residential_rent: The residential_rent of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :type: DomainAgencyServiceV2ModelEmailPhone
        """

        self._residential_rent = residential_rent

    @property
    def residential_sale(self):
        """Gets the residential_sale of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501


        :return: The residential_sale of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :rtype: DomainAgencyServiceV2ModelEmailPhone
        """
        return self._residential_sale

    @residential_sale.setter
    def residential_sale(self, residential_sale):
        """Sets the residential_sale of this DomainAgencyServiceV2ModelContactDetails.


        :param residential_sale: The residential_sale of this DomainAgencyServiceV2ModelContactDetails.  # noqa: E501
        :type: DomainAgencyServiceV2ModelEmailPhone
        """

        self._residential_sale = residential_sale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainAgencyServiceV2ModelContactDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainAgencyServiceV2ModelContactDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
