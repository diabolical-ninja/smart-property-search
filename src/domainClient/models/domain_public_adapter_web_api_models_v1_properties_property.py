# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1PropertiesProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cadastre_type': 'str',
        'on_market_types': 'list[str]',
        'status': 'str',
        'address': 'str',
        'address_coordinate': 'DomainPublicAdapterWebApiModelsV1PropertiesGeoCoordinate',
        'address_id': 'int',
        'adverts': 'list[DomainPublicAdapterWebApiModelsV1PropertiesAdvert]',
        'area_size': 'int',
        'bathrooms': 'int',
        'bedrooms': 'int',
        'car_spaces': 'int',
        'claim': 'DomainPublicAdapterWebApiModelsV1PropertiesClaimData',
        'condition': 'str',
        'created': 'datetime',
        'ensuites': 'int',
        'features': 'list[str]',
        'flat_number': 'str',
        'gnaf_ids': 'list[DomainPublicAdapterWebApiModelsV1PropertiesGnafId]',
        'history': 'DomainPublicAdapterWebApiModelsV1PropertiesHistory',
        'id': 'str',
        'improvements': 'str',
        'internal_area': 'int',
        'is_residential': 'bool',
        'land_use': 'str',
        'lot_number': 'str',
        'photos': 'list[DomainPublicAdapterWebApiModelsV1PropertiesPhoto]',
        'plan_number': 'str',
        'postcode': 'str',
        'property_category': 'str',
        'property_category_id': 'int',
        'property_type': 'str',
        'property_type_id': 'int',
        'rooms': 'int',
        'section_number': 'str',
        'state': 'str',
        'storeys': 'int',
        'street_address': 'str',
        'street_name': 'str',
        'street_number': 'str',
        'street_type': 'str',
        'street_type_long': 'str',
        'suburb': 'str',
        'suburb_id': 'int',
        'title': 'str',
        'updated': 'datetime',
        'url_slug': 'str',
        'url_slug_short': 'str',
        'zone': 'str',
        'canonical_url': 'str'
    }

    attribute_map = {
        'cadastre_type': 'cadastreType',
        'on_market_types': 'onMarketTypes',
        'status': 'status',
        'address': 'address',
        'address_coordinate': 'addressCoordinate',
        'address_id': 'addressId',
        'adverts': 'adverts',
        'area_size': 'areaSize',
        'bathrooms': 'bathrooms',
        'bedrooms': 'bedrooms',
        'car_spaces': 'carSpaces',
        'claim': 'claim',
        'condition': 'condition',
        'created': 'created',
        'ensuites': 'ensuites',
        'features': 'features',
        'flat_number': 'flatNumber',
        'gnaf_ids': 'gnafIds',
        'history': 'history',
        'id': 'id',
        'improvements': 'improvements',
        'internal_area': 'internalArea',
        'is_residential': 'isResidential',
        'land_use': 'landUse',
        'lot_number': 'lotNumber',
        'photos': 'photos',
        'plan_number': 'planNumber',
        'postcode': 'postcode',
        'property_category': 'propertyCategory',
        'property_category_id': 'propertyCategoryId',
        'property_type': 'propertyType',
        'property_type_id': 'propertyTypeId',
        'rooms': 'rooms',
        'section_number': 'sectionNumber',
        'state': 'state',
        'storeys': 'storeys',
        'street_address': 'streetAddress',
        'street_name': 'streetName',
        'street_number': 'streetNumber',
        'street_type': 'streetType',
        'street_type_long': 'streetTypeLong',
        'suburb': 'suburb',
        'suburb_id': 'suburbId',
        'title': 'title',
        'updated': 'updated',
        'url_slug': 'urlSlug',
        'url_slug_short': 'urlSlugShort',
        'zone': 'zone',
        'canonical_url': 'canonicalUrl'
    }

    def __init__(self, cadastre_type=None, on_market_types=None, status=None, address=None, address_coordinate=None, address_id=None, adverts=None, area_size=None, bathrooms=None, bedrooms=None, car_spaces=None, claim=None, condition=None, created=None, ensuites=None, features=None, flat_number=None, gnaf_ids=None, history=None, id=None, improvements=None, internal_area=None, is_residential=None, land_use=None, lot_number=None, photos=None, plan_number=None, postcode=None, property_category=None, property_category_id=None, property_type=None, property_type_id=None, rooms=None, section_number=None, state=None, storeys=None, street_address=None, street_name=None, street_number=None, street_type=None, street_type_long=None, suburb=None, suburb_id=None, title=None, updated=None, url_slug=None, url_slug_short=None, zone=None, canonical_url=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1PropertiesProperty - a model defined in Swagger"""  # noqa: E501

        self._cadastre_type = None
        self._on_market_types = None
        self._status = None
        self._address = None
        self._address_coordinate = None
        self._address_id = None
        self._adverts = None
        self._area_size = None
        self._bathrooms = None
        self._bedrooms = None
        self._car_spaces = None
        self._claim = None
        self._condition = None
        self._created = None
        self._ensuites = None
        self._features = None
        self._flat_number = None
        self._gnaf_ids = None
        self._history = None
        self._id = None
        self._improvements = None
        self._internal_area = None
        self._is_residential = None
        self._land_use = None
        self._lot_number = None
        self._photos = None
        self._plan_number = None
        self._postcode = None
        self._property_category = None
        self._property_category_id = None
        self._property_type = None
        self._property_type_id = None
        self._rooms = None
        self._section_number = None
        self._state = None
        self._storeys = None
        self._street_address = None
        self._street_name = None
        self._street_number = None
        self._street_type = None
        self._street_type_long = None
        self._suburb = None
        self._suburb_id = None
        self._title = None
        self._updated = None
        self._url_slug = None
        self._url_slug_short = None
        self._zone = None
        self._canonical_url = None
        self.discriminator = None

        if cadastre_type is not None:
            self.cadastre_type = cadastre_type
        if on_market_types is not None:
            self.on_market_types = on_market_types
        if status is not None:
            self.status = status
        if address is not None:
            self.address = address
        if address_coordinate is not None:
            self.address_coordinate = address_coordinate
        if address_id is not None:
            self.address_id = address_id
        if adverts is not None:
            self.adverts = adverts
        if area_size is not None:
            self.area_size = area_size
        if bathrooms is not None:
            self.bathrooms = bathrooms
        if bedrooms is not None:
            self.bedrooms = bedrooms
        if car_spaces is not None:
            self.car_spaces = car_spaces
        if claim is not None:
            self.claim = claim
        if condition is not None:
            self.condition = condition
        if created is not None:
            self.created = created
        if ensuites is not None:
            self.ensuites = ensuites
        if features is not None:
            self.features = features
        if flat_number is not None:
            self.flat_number = flat_number
        if gnaf_ids is not None:
            self.gnaf_ids = gnaf_ids
        if history is not None:
            self.history = history
        if id is not None:
            self.id = id
        if improvements is not None:
            self.improvements = improvements
        if internal_area is not None:
            self.internal_area = internal_area
        if is_residential is not None:
            self.is_residential = is_residential
        if land_use is not None:
            self.land_use = land_use
        if lot_number is not None:
            self.lot_number = lot_number
        if photos is not None:
            self.photos = photos
        if plan_number is not None:
            self.plan_number = plan_number
        if postcode is not None:
            self.postcode = postcode
        if property_category is not None:
            self.property_category = property_category
        if property_category_id is not None:
            self.property_category_id = property_category_id
        if property_type is not None:
            self.property_type = property_type
        if property_type_id is not None:
            self.property_type_id = property_type_id
        if rooms is not None:
            self.rooms = rooms
        if section_number is not None:
            self.section_number = section_number
        if state is not None:
            self.state = state
        if storeys is not None:
            self.storeys = storeys
        if street_address is not None:
            self.street_address = street_address
        if street_name is not None:
            self.street_name = street_name
        if street_number is not None:
            self.street_number = street_number
        if street_type is not None:
            self.street_type = street_type
        if street_type_long is not None:
            self.street_type_long = street_type_long
        if suburb is not None:
            self.suburb = suburb
        if suburb_id is not None:
            self.suburb_id = suburb_id
        if title is not None:
            self.title = title
        if updated is not None:
            self.updated = updated
        if url_slug is not None:
            self.url_slug = url_slug
        if url_slug_short is not None:
            self.url_slug_short = url_slug_short
        if zone is not None:
            self.zone = zone
        if canonical_url is not None:
            self.canonical_url = canonical_url

    @property
    def cadastre_type(self):
        """Gets the cadastre_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The type of geometry of the Cadastre property.  # noqa: E501

        :return: The cadastre_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._cadastre_type

    @cadastre_type.setter
    def cadastre_type(self, cadastre_type):
        """Sets the cadastre_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The type of geometry of the Cadastre property.  # noqa: E501

        :param cadastre_type: The cadastre_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """
        allowed_values = ["Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", "FeatureCollection"]  # noqa: E501
        if cadastre_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cadastre_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cadastre_type, allowed_values)
            )

        self._cadastre_type = cadastre_type

    @property
    def on_market_types(self):
        """Gets the on_market_types of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The on market types, if the property is on the market  # noqa: E501

        :return: The on_market_types of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._on_market_types

    @on_market_types.setter
    def on_market_types(self, on_market_types):
        """Sets the on_market_types of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The on market types, if the property is on the market  # noqa: E501

        :param on_market_types: The on_market_types of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Unknown", "Rent", "Sale", "Share"]  # noqa: E501
        if not set(on_market_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `on_market_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(on_market_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._on_market_types = on_market_types

    @property
    def status(self):
        """Gets the status of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The current status of the property.  # noqa: E501

        :return: The status of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The current status of the property.  # noqa: E501

        :param status: The status of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """
        allowed_values = ["OffMarket", "OnMarket"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def address(self):
        """Gets the address of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The full street address of the property  # noqa: E501

        :return: The address of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The full street address of the property  # noqa: E501

        :param address: The address of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address_coordinate(self):
        """Gets the address_coordinate of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The latitude and longitude of the property  # noqa: E501

        :return: The address_coordinate of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: DomainPublicAdapterWebApiModelsV1PropertiesGeoCoordinate
        """
        return self._address_coordinate

    @address_coordinate.setter
    def address_coordinate(self, address_coordinate):
        """Sets the address_coordinate of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The latitude and longitude of the property  # noqa: E501

        :param address_coordinate: The address_coordinate of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: DomainPublicAdapterWebApiModelsV1PropertiesGeoCoordinate
        """

        self._address_coordinate = address_coordinate

    @property
    def address_id(self):
        """Gets the address_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The address identifier  # noqa: E501

        :return: The address_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The address identifier  # noqa: E501

        :param address_id: The address_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._address_id = address_id

    @property
    def adverts(self):
        """Gets the adverts of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The current adverts for the property, if on the market  # noqa: E501

        :return: The adverts of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: list[DomainPublicAdapterWebApiModelsV1PropertiesAdvert]
        """
        return self._adverts

    @adverts.setter
    def adverts(self, adverts):
        """Sets the adverts of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The current adverts for the property, if on the market  # noqa: E501

        :param adverts: The adverts of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: list[DomainPublicAdapterWebApiModelsV1PropertiesAdvert]
        """

        self._adverts = adverts

    @property
    def area_size(self):
        """Gets the area_size of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        Gets or sets the size of the area of land on which the property resides.  # noqa: E501

        :return: The area_size of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._area_size

    @area_size.setter
    def area_size(self, area_size):
        """Sets the area_size of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        Gets or sets the size of the area of land on which the property resides.  # noqa: E501

        :param area_size: The area_size of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._area_size = area_size

    @property
    def bathrooms(self):
        """Gets the bathrooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The number of bathrooms.  # noqa: E501

        :return: The bathrooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._bathrooms

    @bathrooms.setter
    def bathrooms(self, bathrooms):
        """Sets the bathrooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The number of bathrooms.  # noqa: E501

        :param bathrooms: The bathrooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._bathrooms = bathrooms

    @property
    def bedrooms(self):
        """Gets the bedrooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The number of bedrooms.  # noqa: E501

        :return: The bedrooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._bedrooms

    @bedrooms.setter
    def bedrooms(self, bedrooms):
        """Sets the bedrooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The number of bedrooms.  # noqa: E501

        :param bedrooms: The bedrooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._bedrooms = bedrooms

    @property
    def car_spaces(self):
        """Gets the car_spaces of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The number of car spaces.  # noqa: E501

        :return: The car_spaces of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._car_spaces

    @car_spaces.setter
    def car_spaces(self, car_spaces):
        """Sets the car_spaces of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The number of car spaces.  # noqa: E501

        :param car_spaces: The car_spaces of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._car_spaces = car_spaces

    @property
    def claim(self):
        """Gets the claim of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The claim data  # noqa: E501

        :return: The claim of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: DomainPublicAdapterWebApiModelsV1PropertiesClaimData
        """
        return self._claim

    @claim.setter
    def claim(self, claim):
        """Sets the claim of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The claim data  # noqa: E501

        :param claim: The claim of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: DomainPublicAdapterWebApiModelsV1PropertiesClaimData
        """

        self._claim = claim

    @property
    def condition(self):
        """Gets the condition of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The condition of the property.  # noqa: E501

        :return: The condition of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The condition of the property.  # noqa: E501

        :param condition: The condition of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def created(self):
        """Gets the created of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The created date of the property document.  # noqa: E501

        :return: The created of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The created date of the property document.  # noqa: E501

        :param created: The created of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def ensuites(self):
        """Gets the ensuites of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The number of ensuites.  # noqa: E501

        :return: The ensuites of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._ensuites

    @ensuites.setter
    def ensuites(self, ensuites):
        """Sets the ensuites of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The number of ensuites.  # noqa: E501

        :param ensuites: The ensuites of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._ensuites = ensuites

    @property
    def features(self):
        """Gets the features of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The list of features for the given property  # noqa: E501

        :return: The features of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The list of features for the given property  # noqa: E501

        :param features: The features of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def flat_number(self):
        """Gets the flat_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The flat number of the property (if applicable for the property type).  # noqa: E501

        :return: The flat_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._flat_number

    @flat_number.setter
    def flat_number(self, flat_number):
        """Sets the flat_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The flat number of the property (if applicable for the property type).  # noqa: E501

        :param flat_number: The flat_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._flat_number = flat_number

    @property
    def gnaf_ids(self):
        """Gets the gnaf_ids of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        Associated PSMA GNAF identifiers  # noqa: E501

        :return: The gnaf_ids of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: list[DomainPublicAdapterWebApiModelsV1PropertiesGnafId]
        """
        return self._gnaf_ids

    @gnaf_ids.setter
    def gnaf_ids(self, gnaf_ids):
        """Sets the gnaf_ids of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        Associated PSMA GNAF identifiers  # noqa: E501

        :param gnaf_ids: The gnaf_ids of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: list[DomainPublicAdapterWebApiModelsV1PropertiesGnafId]
        """

        self._gnaf_ids = gnaf_ids

    @property
    def history(self):
        """Gets the history of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The history of the property  # noqa: E501

        :return: The history of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: DomainPublicAdapterWebApiModelsV1PropertiesHistory
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The history of the property  # noqa: E501

        :param history: The history of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: DomainPublicAdapterWebApiModelsV1PropertiesHistory
        """

        self._history = history

    @property
    def id(self):
        """Gets the id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The property id of the property  # noqa: E501

        :return: The id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The property id of the property  # noqa: E501

        :param id: The id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def improvements(self):
        """Gets the improvements of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The improvements to the property  # noqa: E501

        :return: The improvements of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._improvements

    @improvements.setter
    def improvements(self, improvements):
        """Sets the improvements of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The improvements to the property  # noqa: E501

        :param improvements: The improvements of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._improvements = improvements

    @property
    def internal_area(self):
        """Gets the internal_area of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The floorplan area of the property.  # noqa: E501

        :return: The internal_area of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._internal_area

    @internal_area.setter
    def internal_area(self, internal_area):
        """Sets the internal_area of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The floorplan area of the property.  # noqa: E501

        :param internal_area: The internal_area of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._internal_area = internal_area

    @property
    def is_residential(self):
        """Gets the is_residential of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        Indicates whether this property is residential.  # noqa: E501

        :return: The is_residential of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: bool
        """
        return self._is_residential

    @is_residential.setter
    def is_residential(self, is_residential):
        """Sets the is_residential of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        Indicates whether this property is residential.  # noqa: E501

        :param is_residential: The is_residential of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: bool
        """

        self._is_residential = is_residential

    @property
    def land_use(self):
        """Gets the land_use of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The land use.  # noqa: E501

        :return: The land_use of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._land_use

    @land_use.setter
    def land_use(self, land_use):
        """Sets the land_use of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The land use.  # noqa: E501

        :param land_use: The land_use of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._land_use = land_use

    @property
    def lot_number(self):
        """Gets the lot_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The lot number for the property.  # noqa: E501

        :return: The lot_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._lot_number

    @lot_number.setter
    def lot_number(self, lot_number):
        """Sets the lot_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The lot number for the property.  # noqa: E501

        :param lot_number: The lot_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._lot_number = lot_number

    @property
    def photos(self):
        """Gets the photos of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        A collection of photos of the property.  # noqa: E501

        :return: The photos of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: list[DomainPublicAdapterWebApiModelsV1PropertiesPhoto]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        A collection of photos of the property.  # noqa: E501

        :param photos: The photos of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: list[DomainPublicAdapterWebApiModelsV1PropertiesPhoto]
        """

        self._photos = photos

    @property
    def plan_number(self):
        """Gets the plan_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The plan number.  # noqa: E501

        :return: The plan_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._plan_number

    @plan_number.setter
    def plan_number(self, plan_number):
        """Sets the plan_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The plan number.  # noqa: E501

        :param plan_number: The plan_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._plan_number = plan_number

    @property
    def postcode(self):
        """Gets the postcode of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The postcode of the property  # noqa: E501

        :return: The postcode of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The postcode of the property  # noqa: E501

        :param postcode: The postcode of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def property_category(self):
        """Gets the property_category of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The property category.  # noqa: E501

        :return: The property_category of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._property_category

    @property_category.setter
    def property_category(self, property_category):
        """Sets the property_category of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The property category.  # noqa: E501

        :param property_category: The property_category of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._property_category = property_category

    @property
    def property_category_id(self):
        """Gets the property_category_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The property category identifier  # noqa: E501

        :return: The property_category_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._property_category_id

    @property_category_id.setter
    def property_category_id(self, property_category_id):
        """Sets the property_category_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The property category identifier  # noqa: E501

        :param property_category_id: The property_category_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._property_category_id = property_category_id

    @property
    def property_type(self):
        """Gets the property_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The type of the property.  # noqa: E501

        :return: The property_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._property_type

    @property_type.setter
    def property_type(self, property_type):
        """Sets the property_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The type of the property.  # noqa: E501

        :param property_type: The property_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._property_type = property_type

    @property
    def property_type_id(self):
        """Gets the property_type_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The property type identifier.  # noqa: E501

        :return: The property_type_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._property_type_id

    @property_type_id.setter
    def property_type_id(self, property_type_id):
        """Sets the property_type_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The property type identifier.  # noqa: E501

        :param property_type_id: The property_type_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._property_type_id = property_type_id

    @property
    def rooms(self):
        """Gets the rooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The number of rooms.  # noqa: E501

        :return: The rooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """Sets the rooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The number of rooms.  # noqa: E501

        :param rooms: The rooms of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._rooms = rooms

    @property
    def section_number(self):
        """Gets the section_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The section number.  # noqa: E501

        :return: The section_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._section_number

    @section_number.setter
    def section_number(self, section_number):
        """Sets the section_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The section number.  # noqa: E501

        :param section_number: The section_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._section_number = section_number

    @property
    def state(self):
        """Gets the state of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The state in which the property resides  # noqa: E501

        :return: The state of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The state in which the property resides  # noqa: E501

        :param state: The state of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def storeys(self):
        """Gets the storeys of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The number of storeys.  # noqa: E501

        :return: The storeys of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._storeys

    @storeys.setter
    def storeys(self, storeys):
        """Sets the storeys of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The number of storeys.  # noqa: E501

        :param storeys: The storeys of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._storeys = storeys

    @property
    def street_address(self):
        """Gets the street_address of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        Gets the address for search.  # noqa: E501

        :return: The street_address of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        Gets the address for search.  # noqa: E501

        :param street_address: The street_address of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def street_name(self):
        """Gets the street_name of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The name of the street in which the property resides.  # noqa: E501

        :return: The street_name of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The name of the street in which the property resides.  # noqa: E501

        :param street_name: The street_name of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def street_number(self):
        """Gets the street_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The street number of the property.  # noqa: E501

        :return: The street_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The street number of the property.  # noqa: E501

        :param street_number: The street_number of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    @property
    def street_type(self):
        """Gets the street_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The street type name e.g. St.  # noqa: E501

        :return: The street_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._street_type

    @street_type.setter
    def street_type(self, street_type):
        """Sets the street_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The street type name e.g. St.  # noqa: E501

        :param street_type: The street_type of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._street_type = street_type

    @property
    def street_type_long(self):
        """Gets the street_type_long of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The long street type name e.g. Street.  # noqa: E501

        :return: The street_type_long of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._street_type_long

    @street_type_long.setter
    def street_type_long(self, street_type_long):
        """Sets the street_type_long of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The long street type name e.g. Street.  # noqa: E501

        :param street_type_long: The street_type_long of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._street_type_long = street_type_long

    @property
    def suburb(self):
        """Gets the suburb of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The suburb in which the property resides.  # noqa: E501

        :return: The suburb of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The suburb in which the property resides.  # noqa: E501

        :param suburb: The suburb of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def suburb_id(self):
        """Gets the suburb_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The identifier for the suburb in which the property resides.  # noqa: E501

        :return: The suburb_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: int
        """
        return self._suburb_id

    @suburb_id.setter
    def suburb_id(self, suburb_id):
        """Sets the suburb_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The identifier for the suburb in which the property resides.  # noqa: E501

        :param suburb_id: The suburb_id of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: int
        """

        self._suburb_id = suburb_id

    @property
    def title(self):
        """Gets the title of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The title for the property.  # noqa: E501

        :return: The title of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The title for the property.  # noqa: E501

        :param title: The title of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated(self):
        """Gets the updated of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The last time the property document was updated  # noqa: E501

        :return: The updated of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The last time the property document was updated  # noqa: E501

        :param updated: The updated of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def url_slug(self):
        """Gets the url_slug of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        Gets the URL slug.  # noqa: E501

        :return: The url_slug of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._url_slug

    @url_slug.setter
    def url_slug(self, url_slug):
        """Sets the url_slug of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        Gets the URL slug.  # noqa: E501

        :param url_slug: The url_slug of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._url_slug = url_slug

    @property
    def url_slug_short(self):
        """Gets the url_slug_short of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        Gets or sets the URL slug in short form  # noqa: E501

        :return: The url_slug_short of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._url_slug_short

    @url_slug_short.setter
    def url_slug_short(self, url_slug_short):
        """Sets the url_slug_short of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        Gets or sets the URL slug in short form  # noqa: E501

        :param url_slug_short: The url_slug_short of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._url_slug_short = url_slug_short

    @property
    def zone(self):
        """Gets the zone of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        The property zone.  # noqa: E501

        :return: The zone of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        The property zone.  # noqa: E501

        :param zone: The zone of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._zone = zone

    @property
    def canonical_url(self):
        """Gets the canonical_url of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501

        Canonical url for this property  # noqa: E501

        :return: The canonical_url of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :rtype: str
        """
        return self._canonical_url

    @canonical_url.setter
    def canonical_url(self, canonical_url):
        """Sets the canonical_url of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.

        Canonical url for this property  # noqa: E501

        :param canonical_url: The canonical_url of this DomainPublicAdapterWebApiModelsV1PropertiesProperty.  # noqa: E501
        :type: str
        """

        self._canonical_url = canonical_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1PropertiesProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1PropertiesProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
