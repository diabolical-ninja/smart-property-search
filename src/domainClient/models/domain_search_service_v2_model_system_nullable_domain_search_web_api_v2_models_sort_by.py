# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sort_key': 'str',
        'direction': 'str',
        'proximity_to': 'DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint'
    }

    attribute_map = {
        'sort_key': 'sortKey',
        'direction': 'direction',
        'proximity_to': 'proximityTo'
    }

    def __init__(self, sort_key=None, direction=None, proximity_to=None):  # noqa: E501
        """DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy - a model defined in Swagger"""  # noqa: E501

        self._sort_key = None
        self._direction = None
        self._proximity_to = None
        self.discriminator = None

        if sort_key is not None:
            self.sort_key = sort_key
        if direction is not None:
            self.direction = direction
        if proximity_to is not None:
            self.proximity_to = proximity_to

    @property
    def sort_key(self):
        """Gets the sort_key of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.  # noqa: E501


        :return: The sort_key of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.  # noqa: E501
        :rtype: str
        """
        return self._sort_key

    @sort_key.setter
    def sort_key(self, sort_key):
        """Sets the sort_key of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.


        :param sort_key: The sort_key of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Suburb", "Price", "DateUpdated", "InspectionTime", "AuctionTime", "Proximity", "SoldDate", "DefaultThenDateUpdated", "DateAvailable", "DateListed"]  # noqa: E501
        if sort_key not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_key` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_key, allowed_values)
            )

        self._sort_key = sort_key

    @property
    def direction(self):
        """Gets the direction of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.  # noqa: E501


        :return: The direction of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.


        :param direction: The direction of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.  # noqa: E501
        :type: str
        """
        allowed_values = ["Ascending", "Descending"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def proximity_to(self):
        """Gets the proximity_to of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.  # noqa: E501


        :return: The proximity_to of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.  # noqa: E501
        :rtype: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint
        """
        return self._proximity_to

    @proximity_to.setter
    def proximity_to(self, proximity_to):
        """Sets the proximity_to of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.


        :param proximity_to: The proximity_to of this DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy.  # noqa: E501
        :type: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoPoint
        """

        self._proximity_to = proximity_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
