# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'suburb': 'str',
        'state': 'str',
        'property_category': 'str'
    }

    attribute_map = {
        'suburb': 'suburb',
        'state': 'state',
        'property_category': 'propertyCategory'
    }

    def __init__(self, suburb=None, state=None, property_category=None):  # noqa: E501
        """DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel - a model defined in Swagger"""  # noqa: E501

        self._suburb = None
        self._state = None
        self._property_category = None
        self.discriminator = None

        if suburb is not None:
            self.suburb = suburb
        if state is not None:
            self.state = state
        if property_category is not None:
            self.property_category = property_category

    @property
    def suburb(self):
        """Gets the suburb of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.  # noqa: E501


        :return: The suburb of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.


        :param suburb: The suburb of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def state(self):
        """Gets the state of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.  # noqa: E501


        :return: The state of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.


        :param state: The state of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def property_category(self):
        """Gets the property_category of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.  # noqa: E501


        :return: The property_category of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.  # noqa: E501
        :rtype: str
        """
        return self._property_category

    @property_category.setter
    def property_category(self, property_category):
        """Sets the property_category of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.


        :param property_category: The property_category of this DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel.  # noqa: E501
        :type: str
        """

        self._property_category = property_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SeriesHeaderModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
