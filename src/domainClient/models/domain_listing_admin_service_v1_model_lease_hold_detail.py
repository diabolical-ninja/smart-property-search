# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelLeaseHoldDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'leasehold_rent_period': 'str',
        'leasehold_price_unit': 'str',
        'leasehold_term': 'int',
        'leasehold_start': 'datetime',
        'leasehold_rent': 'float'
    }

    attribute_map = {
        'leasehold_rent_period': 'leaseholdRentPeriod',
        'leasehold_price_unit': 'leaseholdPriceUnit',
        'leasehold_term': 'leaseholdTerm',
        'leasehold_start': 'leaseholdStart',
        'leasehold_rent': 'leaseholdRent'
    }

    def __init__(self, leasehold_rent_period=None, leasehold_price_unit=None, leasehold_term=None, leasehold_start=None, leasehold_rent=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelLeaseHoldDetail - a model defined in Swagger"""  # noqa: E501

        self._leasehold_rent_period = None
        self._leasehold_price_unit = None
        self._leasehold_term = None
        self._leasehold_start = None
        self._leasehold_rent = None
        self.discriminator = None

        if leasehold_rent_period is not None:
            self.leasehold_rent_period = leasehold_rent_period
        if leasehold_price_unit is not None:
            self.leasehold_price_unit = leasehold_price_unit
        if leasehold_term is not None:
            self.leasehold_term = leasehold_term
        if leasehold_start is not None:
            self.leasehold_start = leasehold_start
        if leasehold_rent is not None:
            self.leasehold_rent = leasehold_rent

    @property
    def leasehold_rent_period(self):
        """Gets the leasehold_rent_period of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501

        Rent period for the existing lease, can be: ['perMonth', 'perAnnum']  # noqa: E501

        :return: The leasehold_rent_period of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501
        :rtype: str
        """
        return self._leasehold_rent_period

    @leasehold_rent_period.setter
    def leasehold_rent_period(self, leasehold_rent_period):
        """Sets the leasehold_rent_period of this DomainListingAdminServiceV1ModelLeaseHoldDetail.

        Rent period for the existing lease, can be: ['perMonth', 'perAnnum']  # noqa: E501

        :param leasehold_rent_period: The leasehold_rent_period of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["perMonth", "perAnnum"]  # noqa: E501
        if leasehold_rent_period not in allowed_values:
            raise ValueError(
                "Invalid value for `leasehold_rent_period` ({0}), must be one of {1}"  # noqa: E501
                .format(leasehold_rent_period, allowed_values)
            )

        self._leasehold_rent_period = leasehold_rent_period

    @property
    def leasehold_price_unit(self):
        """Gets the leasehold_price_unit of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501

        Price unit for the existing lease, can be:  ['totalAmount', 'perSqm']  # noqa: E501

        :return: The leasehold_price_unit of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501
        :rtype: str
        """
        return self._leasehold_price_unit

    @leasehold_price_unit.setter
    def leasehold_price_unit(self, leasehold_price_unit):
        """Sets the leasehold_price_unit of this DomainListingAdminServiceV1ModelLeaseHoldDetail.

        Price unit for the existing lease, can be:  ['totalAmount', 'perSqm']  # noqa: E501

        :param leasehold_price_unit: The leasehold_price_unit of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["totalAmount", "perSqm"]  # noqa: E501
        if leasehold_price_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `leasehold_price_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(leasehold_price_unit, allowed_values)
            )

        self._leasehold_price_unit = leasehold_price_unit

    @property
    def leasehold_term(self):
        """Gets the leasehold_term of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501

        Term of existing lease  # noqa: E501

        :return: The leasehold_term of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501
        :rtype: int
        """
        return self._leasehold_term

    @leasehold_term.setter
    def leasehold_term(self, leasehold_term):
        """Sets the leasehold_term of this DomainListingAdminServiceV1ModelLeaseHoldDetail.

        Term of existing lease  # noqa: E501

        :param leasehold_term: The leasehold_term of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501
        :type: int
        """

        self._leasehold_term = leasehold_term

    @property
    def leasehold_start(self):
        """Gets the leasehold_start of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501

        Start of existing lease  # noqa: E501

        :return: The leasehold_start of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._leasehold_start

    @leasehold_start.setter
    def leasehold_start(self, leasehold_start):
        """Sets the leasehold_start of this DomainListingAdminServiceV1ModelLeaseHoldDetail.

        Start of existing lease  # noqa: E501

        :param leasehold_start: The leasehold_start of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501
        :type: datetime
        """

        self._leasehold_start = leasehold_start

    @property
    def leasehold_rent(self):
        """Gets the leasehold_rent of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501

        Rent amount for the existing lease  # noqa: E501

        :return: The leasehold_rent of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501
        :rtype: float
        """
        return self._leasehold_rent

    @leasehold_rent.setter
    def leasehold_rent(self, leasehold_rent):
        """Sets the leasehold_rent of this DomainListingAdminServiceV1ModelLeaseHoldDetail.

        Rent amount for the existing lease  # noqa: E501

        :param leasehold_rent: The leasehold_rent of this DomainListingAdminServiceV1ModelLeaseHoldDetail.  # noqa: E501
        :type: float
        """

        self._leasehold_rent = leasehold_rent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelLeaseHoldDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelLeaseHoldDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
