# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'confidence': 'str',
        '_date': 'datetime',
        'lower_price': 'int',
        'upper_price': 'int'
    }

    attribute_map = {
        'confidence': 'confidence',
        '_date': 'date',
        'lower_price': 'lowerPrice',
        'upper_price': 'upperPrice'
    }

    def __init__(self, confidence=None, _date=None, lower_price=None, upper_price=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate - a model defined in Swagger"""  # noqa: E501

        self._confidence = None
        self.__date = None
        self._lower_price = None
        self._upper_price = None
        self.discriminator = None

        if confidence is not None:
            self.confidence = confidence
        if _date is not None:
            self._date = _date
        if lower_price is not None:
            self.lower_price = lower_price
        if upper_price is not None:
            self.upper_price = upper_price

    @property
    def confidence(self):
        """Gets the confidence of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501

        The confidence of the valuation.  # noqa: E501

        :return: The confidence of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.

        The confidence of the valuation.  # noqa: E501

        :param confidence: The confidence of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501
        :type: str
        """
        allowed_values = ["high", "medium"]  # noqa: E501
        if confidence not in allowed_values:
            raise ValueError(
                "Invalid value for `confidence` ({0}), must be one of {1}"  # noqa: E501
                .format(confidence, allowed_values)
            )

        self._confidence = confidence

    @property
    def _date(self):
        """Gets the _date of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501

        The date of the valuation.  # noqa: E501

        :return: The _date of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.

        The date of the valuation.  # noqa: E501

        :param _date: The _date of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def lower_price(self):
        """Gets the lower_price of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501

        The lower price valuation.  # noqa: E501

        :return: The lower_price of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501
        :rtype: int
        """
        return self._lower_price

    @lower_price.setter
    def lower_price(self, lower_price):
        """Sets the lower_price of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.

        The lower price valuation.  # noqa: E501

        :param lower_price: The lower_price of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501
        :type: int
        """

        self._lower_price = lower_price

    @property
    def upper_price(self):
        """Gets the upper_price of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501

        The upper price valuation.  # noqa: E501

        :return: The upper_price of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501
        :rtype: int
        """
        return self._upper_price

    @upper_price.setter
    def upper_price(self, upper_price):
        """Sets the upper_price of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.

        The upper price valuation.  # noqa: E501

        :param upper_price: The upper_price of this DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate.  # noqa: E501
        :type: int
        """

        self._upper_price = upper_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1PropertiesHistoricalPriceEstimate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
