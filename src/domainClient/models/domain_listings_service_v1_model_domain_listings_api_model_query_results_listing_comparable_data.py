# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comparable_property': 'list[DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData]',
        'declaration_text': 'str'
    }

    attribute_map = {
        'comparable_property': 'comparableProperty',
        'declaration_text': 'declarationText'
    }

    def __init__(self, comparable_property=None, declaration_text=None):  # noqa: E501
        """DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData - a model defined in Swagger"""  # noqa: E501

        self._comparable_property = None
        self._declaration_text = None
        self.discriminator = None

        if comparable_property is not None:
            self.comparable_property = comparable_property
        if declaration_text is not None:
            self.declaration_text = declaration_text

    @property
    def comparable_property(self):
        """Gets the comparable_property of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData.  # noqa: E501


        :return: The comparable_property of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData.  # noqa: E501
        :rtype: list[DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData]
        """
        return self._comparable_property

    @comparable_property.setter
    def comparable_property(self, comparable_property):
        """Sets the comparable_property of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData.


        :param comparable_property: The comparable_property of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData.  # noqa: E501
        :type: list[DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPastSaleData]
        """

        self._comparable_property = comparable_property

    @property
    def declaration_text(self):
        """Gets the declaration_text of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData.  # noqa: E501


        :return: The declaration_text of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData.  # noqa: E501
        :rtype: str
        """
        return self._declaration_text

    @declaration_text.setter
    def declaration_text(self, declaration_text):
        """Sets the declaration_text of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData.


        :param declaration_text: The declaration_text of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData.  # noqa: E501
        :type: str
        """

        self._declaration_text = declaration_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingComparableData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
