# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit_number': 'str',
        'street_number': 'str',
        'street_name': 'str',
        'street_type': 'str',
        'street_type_long': 'str',
        'suburb': 'str',
        'postcode': 'str',
        'state': 'str'
    }

    attribute_map = {
        'unit_number': 'unitNumber',
        'street_number': 'streetNumber',
        'street_name': 'streetName',
        'street_type': 'streetType',
        'street_type_long': 'streetTypeLong',
        'suburb': 'suburb',
        'postcode': 'postcode',
        'state': 'state'
    }

    def __init__(self, unit_number=None, street_number=None, street_name=None, street_type=None, street_type_long=None, suburb=None, postcode=None, state=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents - a model defined in Swagger"""  # noqa: E501

        self._unit_number = None
        self._street_number = None
        self._street_name = None
        self._street_type = None
        self._street_type_long = None
        self._suburb = None
        self._postcode = None
        self._state = None
        self.discriminator = None

        if unit_number is not None:
            self.unit_number = unit_number
        if street_number is not None:
            self.street_number = street_number
        if street_name is not None:
            self.street_name = street_name
        if street_type is not None:
            self.street_type = street_type
        if street_type_long is not None:
            self.street_type_long = street_type_long
        if suburb is not None:
            self.suburb = suburb
        if postcode is not None:
            self.postcode = postcode
        if state is not None:
            self.state = state

    @property
    def unit_number(self):
        """Gets the unit_number of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501

        The unit number of the property  # noqa: E501

        :return: The unit_number of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :rtype: str
        """
        return self._unit_number

    @unit_number.setter
    def unit_number(self, unit_number):
        """Sets the unit_number of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.

        The unit number of the property  # noqa: E501

        :param unit_number: The unit_number of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :type: str
        """

        self._unit_number = unit_number

    @property
    def street_number(self):
        """Gets the street_number of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501

        The street number of the property  # noqa: E501

        :return: The street_number of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.

        The street number of the property  # noqa: E501

        :param street_number: The street_number of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    @property
    def street_name(self):
        """Gets the street_name of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501

        The street name of the property  # noqa: E501

        :return: The street_name of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.

        The street name of the property  # noqa: E501

        :param street_name: The street_name of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def street_type(self):
        """Gets the street_type of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501

        The street type of the property  # noqa: E501

        :return: The street_type of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :rtype: str
        """
        return self._street_type

    @street_type.setter
    def street_type(self, street_type):
        """Sets the street_type of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.

        The street type of the property  # noqa: E501

        :param street_type: The street_type of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :type: str
        """

        self._street_type = street_type

    @property
    def street_type_long(self):
        """Gets the street_type_long of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501

        The street type of the property  # noqa: E501

        :return: The street_type_long of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :rtype: str
        """
        return self._street_type_long

    @street_type_long.setter
    def street_type_long(self, street_type_long):
        """Sets the street_type_long of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.

        The street type of the property  # noqa: E501

        :param street_type_long: The street_type_long of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :type: str
        """

        self._street_type_long = street_type_long

    @property
    def suburb(self):
        """Gets the suburb of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501

        The suburb of the property  # noqa: E501

        :return: The suburb of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.

        The suburb of the property  # noqa: E501

        :param suburb: The suburb of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def postcode(self):
        """Gets the postcode of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501

        The postcode of the property  # noqa: E501

        :return: The postcode of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.

        The postcode of the property  # noqa: E501

        :param postcode: The postcode of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def state(self):
        """Gets the state of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501

        The state of the property  # noqa: E501

        :return: The state of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.

        The state of the property  # noqa: E501

        :param state: The state of this DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
