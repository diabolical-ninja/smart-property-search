# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelModelEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity': 'str',
        'issue_type': 'str',
        'message': 'str'
    }

    attribute_map = {
        'severity': 'severity',
        'issue_type': 'issueType',
        'message': 'message'
    }

    def __init__(self, severity=None, issue_type=None, message=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelModelEvent - a model defined in Swagger"""  # noqa: E501

        self._severity = None
        self._issue_type = None
        self._message = None
        self.discriminator = None

        if severity is not None:
            self.severity = severity
        if issue_type is not None:
            self.issue_type = issue_type
        if message is not None:
            self.message = message

    @property
    def severity(self):
        """Gets the severity of this DomainListingAdminServiceV1ModelModelEvent.  # noqa: E501

        Severity of the Event  # noqa: E501

        :return: The severity of this DomainListingAdminServiceV1ModelModelEvent.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DomainListingAdminServiceV1ModelModelEvent.

        Severity of the Event  # noqa: E501

        :param severity: The severity of this DomainListingAdminServiceV1ModelModelEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["Info", "Warning", "Error"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def issue_type(self):
        """Gets the issue_type of this DomainListingAdminServiceV1ModelModelEvent.  # noqa: E501

        Type of the issue  # noqa: E501

        :return: The issue_type of this DomainListingAdminServiceV1ModelModelEvent.  # noqa: E501
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this DomainListingAdminServiceV1ModelModelEvent.

        Type of the issue  # noqa: E501

        :param issue_type: The issue_type of this DomainListingAdminServiceV1ModelModelEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["Internal", "External"]  # noqa: E501
        if issue_type not in allowed_values:
            raise ValueError(
                "Invalid value for `issue_type` ({0}), must be one of {1}"  # noqa: E501
                .format(issue_type, allowed_values)
            )

        self._issue_type = issue_type

    @property
    def message(self):
        """Gets the message of this DomainListingAdminServiceV1ModelModelEvent.  # noqa: E501

        Message associated with the event  # noqa: E501

        :return: The message of this DomainListingAdminServiceV1ModelModelEvent.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DomainListingAdminServiceV1ModelModelEvent.

        Message associated with the event  # noqa: E501

        :param message: The message of this DomainListingAdminServiceV1ModelModelEvent.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelModelEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelModelEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
