# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'address_components': 'DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents',
        'id': 'str',
        'relative_score': 'int'
    }

    attribute_map = {
        'address': 'address',
        'address_components': 'addressComponents',
        'id': 'id',
        'relative_score': 'relativeScore'
    }

    def __init__(self, address=None, address_components=None, id=None, relative_score=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._address_components = None
        self._id = None
        self._relative_score = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if address_components is not None:
            self.address_components = address_components
        if id is not None:
            self.id = id
        if relative_score is not None:
            self.relative_score = relative_score

    @property
    def address(self):
        """Gets the address of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501

        Full address of the property  # noqa: E501

        :return: The address of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.

        Full address of the property  # noqa: E501

        :param address: The address of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address_components(self):
        """Gets the address_components of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501

        The property address broken into its components  # noqa: E501

        :return: The address_components of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501
        :rtype: DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents
        """
        return self._address_components

    @address_components.setter
    def address_components(self, address_components):
        """Sets the address_components of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.

        The property address broken into its components  # noqa: E501

        :param address_components: The address_components of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501
        :type: DomainPublicAdapterWebApiModelsV1PropertiesAddressComponents
        """

        self._address_components = address_components

    @property
    def id(self):
        """Gets the id of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501

        Id of the property  # noqa: E501

        :return: The id of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.

        Id of the property  # noqa: E501

        :param id: The id of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def relative_score(self):
        """Gets the relative_score of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501

        Relative Score of the result  # noqa: E501

        :return: The relative_score of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501
        :rtype: int
        """
        return self._relative_score

    @relative_score.setter
    def relative_score(self, relative_score):
        """Sets the relative_score of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.

        Relative Score of the result  # noqa: E501

        :param relative_score: The relative_score of this DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion.  # noqa: E501
        :type: int
        """

        self._relative_score = relative_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1PropertiesPropertySuggestion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
