# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'id': 'int',
        'name': 'str',
        'preferred_color_hex': 'str',
        'images': 'DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages',
        'contacts': 'list[DomainPublicAdapterWebApiModelsV1ListingsCommercialContact]',
        'is_conjunctional': 'bool'
    }

    attribute_map = {
        'address': 'address',
        'id': 'id',
        'name': 'name',
        'preferred_color_hex': 'preferredColorHex',
        'images': 'images',
        'contacts': 'contacts',
        'is_conjunctional': 'isConjunctional'
    }

    def __init__(self, address=None, id=None, name=None, preferred_color_hex=None, images=None, contacts=None, is_conjunctional=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._id = None
        self._name = None
        self._preferred_color_hex = None
        self._images = None
        self._contacts = None
        self._is_conjunctional = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if preferred_color_hex is not None:
            self.preferred_color_hex = preferred_color_hex
        if images is not None:
            self.images = images
        if contacts is not None:
            self.contacts = contacts
        if is_conjunctional is not None:
            self.is_conjunctional = is_conjunctional

    @property
    def address(self):
        """Gets the address of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501

        agency address  # noqa: E501

        :return: The address of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.

        agency address  # noqa: E501

        :param address: The address of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def id(self):
        """Gets the id of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501

        Agency ID  # noqa: E501

        :return: The id of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.

        Agency ID  # noqa: E501

        :param id: The id of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501

        Agency Name  # noqa: E501

        :return: The name of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.

        Agency Name  # noqa: E501

        :param name: The name of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def preferred_color_hex(self):
        """Gets the preferred_color_hex of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501

        Agency color  # noqa: E501

        :return: The preferred_color_hex of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :rtype: str
        """
        return self._preferred_color_hex

    @preferred_color_hex.setter
    def preferred_color_hex(self, preferred_color_hex):
        """Sets the preferred_color_hex of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.

        Agency color  # noqa: E501

        :param preferred_color_hex: The preferred_color_hex of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :type: str
        """

        self._preferred_color_hex = preferred_color_hex

    @property
    def images(self):
        """Gets the images of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501

        Images (e.g. logos, banners)  # noqa: E501

        :return: The images of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :rtype: DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.

        Images (e.g. logos, banners)  # noqa: E501

        :param images: The images of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :type: DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiserImages
        """

        self._images = images

    @property
    def contacts(self):
        """Gets the contacts of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501

        Agency contacts  # noqa: E501

        :return: The contacts of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :rtype: list[DomainPublicAdapterWebApiModelsV1ListingsCommercialContact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.

        Agency contacts  # noqa: E501

        :param contacts: The contacts of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :type: list[DomainPublicAdapterWebApiModelsV1ListingsCommercialContact]
        """

        self._contacts = contacts

    @property
    def is_conjunctional(self):
        """Gets the is_conjunctional of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501

        Checks whether advertiser is conjunctional or not  # noqa: E501

        :return: The is_conjunctional of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :rtype: bool
        """
        return self._is_conjunctional

    @is_conjunctional.setter
    def is_conjunctional(self, is_conjunctional):
        """Sets the is_conjunctional of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.

        Checks whether advertiser is conjunctional or not  # noqa: E501

        :param is_conjunctional: The is_conjunctional of this DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser.  # noqa: E501
        :type: bool
        """

        self._is_conjunctional = is_conjunctional

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1ListingsCommercialAdvertiser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
