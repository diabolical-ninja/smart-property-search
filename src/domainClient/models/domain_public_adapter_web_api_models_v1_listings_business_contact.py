# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1ListingsBusinessContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'image_url': 'str',
        'display_full_name': 'str',
        'phone_numbers': 'list[DomainPublicAdapterWebApiModelsV1ListingsBusinessPhoneNumber]',
        'email_address': 'str',
        'address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'image_url': 'imageUrl',
        'display_full_name': 'displayFullName',
        'phone_numbers': 'phoneNumbers',
        'email_address': 'emailAddress',
        'address': 'address'
    }

    def __init__(self, id=None, first_name=None, last_name=None, image_url=None, display_full_name=None, phone_numbers=None, email_address=None, address=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1ListingsBusinessContact - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._first_name = None
        self._last_name = None
        self._image_url = None
        self._display_full_name = None
        self._phone_numbers = None
        self._email_address = None
        self._address = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if image_url is not None:
            self.image_url = image_url
        if display_full_name is not None:
            self.display_full_name = display_full_name
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if email_address is not None:
            self.email_address = email_address
        if address is not None:
            self.address = address

    @property
    def id(self):
        """Gets the id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501

        Agent identifier  # noqa: E501

        :return: The id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.

        Agent identifier  # noqa: E501

        :param id: The id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501

        First name. Not available in CRE  # noqa: E501

        :return: The first_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.

        First name. Not available in CRE  # noqa: E501

        :param first_name: The first_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501

        Last name. Not available in CRE  # noqa: E501

        :return: The last_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.

        Last name. Not available in CRE  # noqa: E501

        :param last_name: The last_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def image_url(self):
        """Gets the image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501

        Image URL  # noqa: E501

        :return: The image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.

        Image URL  # noqa: E501

        :param image_url: The image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def display_full_name(self):
        """Gets the display_full_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501

        Full name  # noqa: E501

        :return: The display_full_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :rtype: str
        """
        return self._display_full_name

    @display_full_name.setter
    def display_full_name(self, display_full_name):
        """Sets the display_full_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.

        Full name  # noqa: E501

        :param display_full_name: The display_full_name of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :type: str
        """

        self._display_full_name = display_full_name

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501

        Phone numbers  # noqa: E501

        :return: The phone_numbers of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :rtype: list[DomainPublicAdapterWebApiModelsV1ListingsBusinessPhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.

        Phone numbers  # noqa: E501

        :param phone_numbers: The phone_numbers of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :type: list[DomainPublicAdapterWebApiModelsV1ListingsBusinessPhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def email_address(self):
        """Gets the email_address of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501

        E-mail address  # noqa: E501

        :return: The email_address of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.

        E-mail address  # noqa: E501

        :param email_address: The email_address of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def address(self):
        """Gets the address of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501

        Full address  # noqa: E501

        :return: The address of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.

        Full address  # noqa: E501

        :param address: The address of this DomainPublicAdapterWebApiModelsV1ListingsBusinessContact.  # noqa: E501
        :type: str
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1ListingsBusinessContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1ListingsBusinessContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
