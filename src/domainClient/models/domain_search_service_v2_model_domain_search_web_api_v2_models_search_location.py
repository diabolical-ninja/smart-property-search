# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'region': 'str',
        'area': 'str',
        'suburb': 'str',
        'post_code': 'str',
        'include_surrounding_suburbs': 'bool',
        'surrounding_radius_in_meters': 'int',
        'defines_postcode_only': 'bool'
    }

    attribute_map = {
        'state': 'state',
        'region': 'region',
        'area': 'area',
        'suburb': 'suburb',
        'post_code': 'postCode',
        'include_surrounding_suburbs': 'includeSurroundingSuburbs',
        'surrounding_radius_in_meters': 'surroundingRadiusInMeters',
        'defines_postcode_only': 'definesPostcodeOnly'
    }

    def __init__(self, state=None, region=None, area=None, suburb=None, post_code=None, include_surrounding_suburbs=None, surrounding_radius_in_meters=None, defines_postcode_only=None):  # noqa: E501
        """DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._region = None
        self._area = None
        self._suburb = None
        self._post_code = None
        self._include_surrounding_suburbs = None
        self._surrounding_radius_in_meters = None
        self._defines_postcode_only = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if region is not None:
            self.region = region
        if area is not None:
            self.area = area
        if suburb is not None:
            self.suburb = suburb
        if post_code is not None:
            self.post_code = post_code
        if include_surrounding_suburbs is not None:
            self.include_surrounding_suburbs = include_surrounding_suburbs
        if surrounding_radius_in_meters is not None:
            self.surrounding_radius_in_meters = surrounding_radius_in_meters
        if defines_postcode_only is not None:
            self.defines_postcode_only = defines_postcode_only

    @property
    def state(self):
        """Gets the state of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501


        :return: The state of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.


        :param state: The state of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACT", "NSW", "QLD", "VIC", "SA", "WA", "NT", "TAS"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def region(self):
        """Gets the region of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501


        :return: The region of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.


        :param region: The region of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def area(self):
        """Gets the area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501


        :return: The area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.


        :param area: The area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def suburb(self):
        """Gets the suburb of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501


        :return: The suburb of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.


        :param suburb: The suburb of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def post_code(self):
        """Gets the post_code of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501


        :return: The post_code of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.


        :param post_code: The post_code of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :type: str
        """

        self._post_code = post_code

    @property
    def include_surrounding_suburbs(self):
        """Gets the include_surrounding_suburbs of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501


        :return: The include_surrounding_suburbs of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :rtype: bool
        """
        return self._include_surrounding_suburbs

    @include_surrounding_suburbs.setter
    def include_surrounding_suburbs(self, include_surrounding_suburbs):
        """Sets the include_surrounding_suburbs of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.


        :param include_surrounding_suburbs: The include_surrounding_suburbs of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :type: bool
        """

        self._include_surrounding_suburbs = include_surrounding_suburbs

    @property
    def surrounding_radius_in_meters(self):
        """Gets the surrounding_radius_in_meters of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501


        :return: The surrounding_radius_in_meters of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :rtype: int
        """
        return self._surrounding_radius_in_meters

    @surrounding_radius_in_meters.setter
    def surrounding_radius_in_meters(self, surrounding_radius_in_meters):
        """Sets the surrounding_radius_in_meters of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.


        :param surrounding_radius_in_meters: The surrounding_radius_in_meters of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :type: int
        """

        self._surrounding_radius_in_meters = surrounding_radius_in_meters

    @property
    def defines_postcode_only(self):
        """Gets the defines_postcode_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501


        :return: The defines_postcode_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :rtype: bool
        """
        return self._defines_postcode_only

    @defines_postcode_only.setter
    def defines_postcode_only(self, defines_postcode_only):
        """Sets the defines_postcode_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.


        :param defines_postcode_only: The defines_postcode_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation.  # noqa: E501
        :type: bool
        """

        self._defines_postcode_only = defines_postcode_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
