# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agency_id': 'int',
        'agent_first_name': 'str',
        'agent_last_name': 'str',
        'agent_email': 'str',
        'suburb': 'str',
        'postcode': 'str',
        'state': 'str',
        'property_type': 'str',
        'is_new_development': 'bool',
        'listing_type': 'str',
        'price': 'float',
        'channel': 'str'
    }

    attribute_map = {
        'agency_id': 'agencyId',
        'agent_first_name': 'agentFirstName',
        'agent_last_name': 'agentLastName',
        'agent_email': 'agentEmail',
        'suburb': 'suburb',
        'postcode': 'postcode',
        'state': 'state',
        'property_type': 'propertyType',
        'is_new_development': 'isNewDevelopment',
        'listing_type': 'listingType',
        'price': 'price',
        'channel': 'channel'
    }

    def __init__(self, agency_id=None, agent_first_name=None, agent_last_name=None, agent_email=None, suburb=None, postcode=None, state=None, property_type=None, is_new_development=None, listing_type=None, price=None, channel=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel - a model defined in Swagger"""  # noqa: E501

        self._agency_id = None
        self._agent_first_name = None
        self._agent_last_name = None
        self._agent_email = None
        self._suburb = None
        self._postcode = None
        self._state = None
        self._property_type = None
        self._is_new_development = None
        self._listing_type = None
        self._price = None
        self._channel = None
        self.discriminator = None

        self.agency_id = agency_id
        self.agent_first_name = agent_first_name
        self.agent_last_name = agent_last_name
        self.agent_email = agent_email
        self.suburb = suburb
        self.postcode = postcode
        self.state = state
        self.property_type = property_type
        self.is_new_development = is_new_development
        self.listing_type = listing_type
        self.price = price
        self.channel = channel

    @property
    def agency_id(self):
        """Gets the agency_id of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        Id of the agency for whom rates are to be calculated.  # noqa: E501

        :return: The agency_id of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        Id of the agency for whom rates are to be calculated.  # noqa: E501

        :param agency_id: The agency_id of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: int
        """
        if agency_id is None:
            raise ValueError("Invalid value for `agency_id`, must not be `None`")  # noqa: E501

        self._agency_id = agency_id

    @property
    def agent_first_name(self):
        """Gets the agent_first_name of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        The first name of the primary agent associated with the listing.  # noqa: E501

        :return: The agent_first_name of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._agent_first_name

    @agent_first_name.setter
    def agent_first_name(self, agent_first_name):
        """Sets the agent_first_name of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        The first name of the primary agent associated with the listing.  # noqa: E501

        :param agent_first_name: The agent_first_name of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: str
        """
        if agent_first_name is None:
            raise ValueError("Invalid value for `agent_first_name`, must not be `None`")  # noqa: E501

        self._agent_first_name = agent_first_name

    @property
    def agent_last_name(self):
        """Gets the agent_last_name of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        The last name of the primary agent associated with the listing  # noqa: E501

        :return: The agent_last_name of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._agent_last_name

    @agent_last_name.setter
    def agent_last_name(self, agent_last_name):
        """Sets the agent_last_name of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        The last name of the primary agent associated with the listing  # noqa: E501

        :param agent_last_name: The agent_last_name of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: str
        """
        if agent_last_name is None:
            raise ValueError("Invalid value for `agent_last_name`, must not be `None`")  # noqa: E501

        self._agent_last_name = agent_last_name

    @property
    def agent_email(self):
        """Gets the agent_email of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        The email of the primary agent associated with the listing.  # noqa: E501

        :return: The agent_email of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._agent_email

    @agent_email.setter
    def agent_email(self, agent_email):
        """Sets the agent_email of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        The email of the primary agent associated with the listing.  # noqa: E501

        :param agent_email: The agent_email of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: str
        """
        if agent_email is None:
            raise ValueError("Invalid value for `agent_email`, must not be `None`")  # noqa: E501

        self._agent_email = agent_email

    @property
    def suburb(self):
        """Gets the suburb of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        Suburb for which rates are to be calculated.  # noqa: E501

        :return: The suburb of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        Suburb for which rates are to be calculated.  # noqa: E501

        :param suburb: The suburb of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: str
        """
        if suburb is None:
            raise ValueError("Invalid value for `suburb`, must not be `None`")  # noqa: E501

        self._suburb = suburb

    @property
    def postcode(self):
        """Gets the postcode of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        Postcode for which rates are to be calculated.  # noqa: E501

        :return: The postcode of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        Postcode for which rates are to be calculated.  # noqa: E501

        :param postcode: The postcode of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: str
        """
        if postcode is None:
            raise ValueError("Invalid value for `postcode`, must not be `None`")  # noqa: E501

        self._postcode = postcode

    @property
    def state(self):
        """Gets the state of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        State for which rates are to be calculated  # noqa: E501

        :return: The state of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        State for which rates are to be calculated  # noqa: E501

        :param state: The state of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def property_type(self):
        """Gets the property_type of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        The property type of the listing e.g. House  # noqa: E501

        :return: The property_type of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._property_type

    @property_type.setter
    def property_type(self, property_type):
        """Sets the property_type of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        The property type of the listing e.g. House  # noqa: E501

        :param property_type: The property_type of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: str
        """
        if property_type is None:
            raise ValueError("Invalid value for `property_type`, must not be `None`")  # noqa: E501
        allowed_values = ["unknown", "accessoriesParts", "accommodationTourism", "accounting", "acreageSemiRural", "adult", "advertisingMarketing", "aerial", "aeronautical", "agedCare", "agricultural", "air", "aircraft", "alarms", "alcoholLiquor", "amusements", "animalRelated", "apartmentUnitFlat", "aquaculture", "aquaticMarineMarinaBerth", "artsCrafts", "autoElectrical", "automotive", "backpackerHostel", "bakery", "barsNightclubs", "beautyHealth", "beautyProducts", "beautySalon", "bikeAndMotorcycle", "blockOfUnits", "boardingKennels", "boatsMarineMarinaBerth", "bookkeeping", "brokerage", "builder", "buildingAndConstruction", "bus", "butcher", "cafeCoffeeShop", "car", "carBusTruck", "carDealership", "carRental", "carspace", "carWash", "caravanPark", "carpenter", "catering", "childCare", "civil", "cleaning", "cleaningAndMaintenance", "clinicalPractice", "clothingAccessories", "clothingFootwear", "communication", "communications", "computerIT", "computerAndInternet", "construction", "convenienceStore", "copyLaminate", "courier", "cropHarvesting", "customs", "dairyFarming", "deli", "dental", "detailing", "developmentLand", "developmentSite", "distributors", "drivingSchools", "duplex", "educationTraining", "educational", "electrical", "employmentRecruitment", "entertainment", "entertainmentTechnology", "export", "farm", "farming", "fertiliser", "finance", "financialServices", "fishingForestry", "floristNursery", "foodBeverage", "foodBeverageHospitality", "franchiseBusinessOpportunities", "freight", "fruitVegFreshProduce", "fruitPicking", "functionCentre", "furnitureTimber", "gambling", "gardenHousehold", "gardenNurseries", "gardening", "glassCeramic", "guestHouseBB", "hairdresser", "healthBeauty", "healthSpa", "hire", "homeGarden", "homeBased", "newHomeDesigns", "homewareHardware", "hospital", "hotel", "hotelLeisure", "house", "newHouseLand", "huntingTrap", "import", "importExportWholesale", "industrialManufacturing", "industrialWarehouse", "insemination", "insurance", "internet", "irrigationServices", "juiceBar", "landClearing", "newLand", "landscaping", "laundryDryCleaning", "legal", "leisureEntertainment", "limousineTaxi", "livestock", "international", "machinery", "machineryMetal", "managementRights", "manufacturers", "manufacturingEngineering", "marine", "massage", "mechanicalRepair", "media", "medical", "medicalConsulting", "medicalPractice", "miningEarthMoving", "mobileServices", "motel", "motorcycle", "musicRelated", "mustering", "nails", "naturalTherapies", "newApartments", "newsagency", "nursery", "nursingHome", "offices", "officeSupplies", "oilGas", "panelBeating", "paperPrinting", "parkingCarSpace", "penthouse", "pestRelated", "pharmacies", "plastic", "plumbing", "poolWater", "postOffices", "printPhoto", "professional", "propertyRealEstate", "rail", "recreationSport", "recruitment", "repair", "resort", "restaurant", "retail", "retailer", "retirement", "retirementVillage", "road", "rural", "ruralCommercialFarming", "scientific", "sea", "security", "semiDetached", "serviceStation", "services", "shearing", "showroomsBulkyGoods", "specialistFarm", "sportsComplexGym", "studio", "supermarket", "takeawayFood", "taxi", "terrace", "themePark", "tours", "townhouse", "training", "transportDistribution", "travel", "truck", "vacantLand", "vending", "villa", "water", "welding", "wholesale", "wholesalers", "woolClassing", "wreckers", "servicedOffices", "other", "alcoholGrocery", "cafeRestaurants", "discountStore", "ecoFriendly", "green", "grocery", "specialityRetail", "storage", "travelAgency", "varietyStore", "chickenShop", "seafoodShop", "deliCafe", "cropping", "viticulture", "mixedFarming", "grazing", "horticulture", "equine", "farmlet", "orchard", "ruralLifestyle", "onlineBusiness"]  # noqa: E501
        if property_type not in allowed_values:
            raise ValueError(
                "Invalid value for `property_type` ({0}), must be one of {1}"  # noqa: E501
                .format(property_type, allowed_values)
            )

        self._property_type = property_type

    @property
    def is_new_development(self):
        """Gets the is_new_development of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        Whether to return the normal or new development rates  # noqa: E501

        :return: The is_new_development of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_new_development

    @is_new_development.setter
    def is_new_development(self, is_new_development):
        """Sets the is_new_development of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        Whether to return the normal or new development rates  # noqa: E501

        :param is_new_development: The is_new_development of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: bool
        """
        if is_new_development is None:
            raise ValueError("Invalid value for `is_new_development`, must not be `None`")  # noqa: E501

        self._is_new_development = is_new_development

    @property
    def listing_type(self):
        """Gets the listing_type of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        Type of the listing whether sale or rent  # noqa: E501

        :return: The listing_type of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._listing_type

    @listing_type.setter
    def listing_type(self, listing_type):
        """Sets the listing_type of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        Type of the listing whether sale or rent  # noqa: E501

        :param listing_type: The listing_type of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: str
        """
        if listing_type is None:
            raise ValueError("Invalid value for `listing_type`, must not be `None`")  # noqa: E501
        allowed_values = ["sale", "rent"]  # noqa: E501
        if listing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `listing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(listing_type, allowed_values)
            )

        self._listing_type = listing_type

    @property
    def price(self):
        """Gets the price of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        The value of the listing  # noqa: E501

        :return: The price of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        The value of the listing  # noqa: E501

        :param price: The price of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def channel(self):
        """Gets the channel of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501

        The intended channel of the listing.  # noqa: E501

        :return: The channel of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.

        The intended channel of the listing.  # noqa: E501

        :param channel: The channel of this DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel.  # noqa: E501
        :type: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501
        allowed_values = ["residential", "commercial", "business"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"  # noqa: E501
                .format(channel, allowed_values)
            )

        self._channel = channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1ProductsRateForNewListingRequestModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
