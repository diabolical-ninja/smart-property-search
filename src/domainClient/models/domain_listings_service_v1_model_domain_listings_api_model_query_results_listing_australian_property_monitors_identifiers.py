# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_id': 'int',
        'street_id': 'int',
        'suburb_id': 'int',
        'cadastre_id': 'int',
        'postcode_id': 'int',
        'state_id': 'int',
        'state': 'str',
        'property_type_id': 'int',
        'property_type_category_id': 'int',
        'flat_number': 'str',
        'street_number': 'str'
    }

    attribute_map = {
        'address_id': 'addressId',
        'street_id': 'streetId',
        'suburb_id': 'suburbId',
        'cadastre_id': 'cadastreId',
        'postcode_id': 'postcodeId',
        'state_id': 'stateId',
        'state': 'state',
        'property_type_id': 'propertyTypeId',
        'property_type_category_id': 'propertyTypeCategoryId',
        'flat_number': 'flatNumber',
        'street_number': 'streetNumber'
    }

    def __init__(self, address_id=None, street_id=None, suburb_id=None, cadastre_id=None, postcode_id=None, state_id=None, state=None, property_type_id=None, property_type_category_id=None, flat_number=None, street_number=None):  # noqa: E501
        """DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers - a model defined in Swagger"""  # noqa: E501

        self._address_id = None
        self._street_id = None
        self._suburb_id = None
        self._cadastre_id = None
        self._postcode_id = None
        self._state_id = None
        self._state = None
        self._property_type_id = None
        self._property_type_category_id = None
        self._flat_number = None
        self._street_number = None
        self.discriminator = None

        if address_id is not None:
            self.address_id = address_id
        if street_id is not None:
            self.street_id = street_id
        if suburb_id is not None:
            self.suburb_id = suburb_id
        if cadastre_id is not None:
            self.cadastre_id = cadastre_id
        if postcode_id is not None:
            self.postcode_id = postcode_id
        if state_id is not None:
            self.state_id = state_id
        if state is not None:
            self.state = state
        if property_type_id is not None:
            self.property_type_id = property_type_id
        if property_type_category_id is not None:
            self.property_type_category_id = property_type_category_id
        if flat_number is not None:
            self.flat_number = flat_number
        if street_number is not None:
            self.street_number = street_number

    @property
    def address_id(self):
        """Gets the address_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The address_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: int
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param address_id: The address_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: int
        """

        self._address_id = address_id

    @property
    def street_id(self):
        """Gets the street_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The street_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: int
        """
        return self._street_id

    @street_id.setter
    def street_id(self, street_id):
        """Sets the street_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param street_id: The street_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: int
        """

        self._street_id = street_id

    @property
    def suburb_id(self):
        """Gets the suburb_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The suburb_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: int
        """
        return self._suburb_id

    @suburb_id.setter
    def suburb_id(self, suburb_id):
        """Sets the suburb_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param suburb_id: The suburb_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: int
        """

        self._suburb_id = suburb_id

    @property
    def cadastre_id(self):
        """Gets the cadastre_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The cadastre_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: int
        """
        return self._cadastre_id

    @cadastre_id.setter
    def cadastre_id(self, cadastre_id):
        """Sets the cadastre_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param cadastre_id: The cadastre_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: int
        """

        self._cadastre_id = cadastre_id

    @property
    def postcode_id(self):
        """Gets the postcode_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The postcode_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: int
        """
        return self._postcode_id

    @postcode_id.setter
    def postcode_id(self, postcode_id):
        """Sets the postcode_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param postcode_id: The postcode_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: int
        """

        self._postcode_id = postcode_id

    @property
    def state_id(self):
        """Gets the state_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The state_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: int
        """
        return self._state_id

    @state_id.setter
    def state_id(self, state_id):
        """Sets the state_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param state_id: The state_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: int
        """

        self._state_id = state_id

    @property
    def state(self):
        """Gets the state of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The state of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param state: The state of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def property_type_id(self):
        """Gets the property_type_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The property_type_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: int
        """
        return self._property_type_id

    @property_type_id.setter
    def property_type_id(self, property_type_id):
        """Sets the property_type_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param property_type_id: The property_type_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: int
        """

        self._property_type_id = property_type_id

    @property
    def property_type_category_id(self):
        """Gets the property_type_category_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The property_type_category_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: int
        """
        return self._property_type_category_id

    @property_type_category_id.setter
    def property_type_category_id(self, property_type_category_id):
        """Sets the property_type_category_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param property_type_category_id: The property_type_category_id of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: int
        """

        self._property_type_category_id = property_type_category_id

    @property
    def flat_number(self):
        """Gets the flat_number of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The flat_number of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._flat_number

    @flat_number.setter
    def flat_number(self, flat_number):
        """Sets the flat_number of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param flat_number: The flat_number of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: str
        """

        self._flat_number = flat_number

    @property
    def street_number(self):
        """Gets the street_number of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501


        :return: The street_number of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.


        :param street_number: The street_number of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
