# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'int',
        'name': 'str',
        'logo_url': 'str',
        'preferred_colour_hex': 'str',
        'banner_url': 'str',
        'contacts': 'list[DomainSearchServiceV2ModelDomainSearchContractsV2Contact]'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'logo_url': 'logoUrl',
        'preferred_colour_hex': 'preferredColourHex',
        'banner_url': 'bannerUrl',
        'contacts': 'contacts'
    }

    def __init__(self, type=None, id=None, name=None, logo_url=None, preferred_colour_hex=None, banner_url=None, contacts=None):  # noqa: E501
        """DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._id = None
        self._name = None
        self._logo_url = None
        self._preferred_colour_hex = None
        self._banner_url = None
        self._contacts = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if logo_url is not None:
            self.logo_url = logo_url
        if preferred_colour_hex is not None:
            self.preferred_colour_hex = preferred_colour_hex
        if banner_url is not None:
            self.banner_url = banner_url
        if contacts is not None:
            self.contacts = contacts

    @property
    def type(self):
        """Gets the type of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501


        :return: The type of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.


        :param type: The type of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :type: str
        """
        allowed_values = ["Agency", "Private"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501


        :return: The id of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.


        :param id: The id of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501


        :return: The name of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.


        :param name: The name of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def logo_url(self):
        """Gets the logo_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501


        :return: The logo_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.


        :param logo_url: The logo_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def preferred_colour_hex(self):
        """Gets the preferred_colour_hex of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501


        :return: The preferred_colour_hex of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :rtype: str
        """
        return self._preferred_colour_hex

    @preferred_colour_hex.setter
    def preferred_colour_hex(self, preferred_colour_hex):
        """Sets the preferred_colour_hex of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.


        :param preferred_colour_hex: The preferred_colour_hex of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :type: str
        """

        self._preferred_colour_hex = preferred_colour_hex

    @property
    def banner_url(self):
        """Gets the banner_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501


        :return: The banner_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :rtype: str
        """
        return self._banner_url

    @banner_url.setter
    def banner_url(self, banner_url):
        """Sets the banner_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.


        :param banner_url: The banner_url of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :type: str
        """

        self._banner_url = banner_url

    @property
    def contacts(self):
        """Gets the contacts of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501


        :return: The contacts of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :rtype: list[DomainSearchServiceV2ModelDomainSearchContractsV2Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.


        :param contacts: The contacts of this DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser.  # noqa: E501
        :type: list[DomainSearchServiceV2ModelDomainSearchContractsV2Contact]
        """

        self._contacts = contacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainSearchServiceV2ModelDomainSearchContractsV2Advertiser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
