# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'int',
        'price_from': 'int',
        'price_to': 'int',
        'display_price': 'str'
    }

    attribute_map = {
        'price': 'price',
        'price_from': 'priceFrom',
        'price_to': 'priceTo',
        'display_price': 'displayPrice'
    }

    def __init__(self, price=None, price_from=None, price_to=None, display_price=None):  # noqa: E501
        """DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails - a model defined in Swagger"""  # noqa: E501

        self._price = None
        self._price_from = None
        self._price_to = None
        self._display_price = None
        self.discriminator = None

        if price is not None:
            self.price = price
        if price_from is not None:
            self.price_from = price_from
        if price_to is not None:
            self.price_to = price_to
        if display_price is not None:
            self.display_price = display_price

    @property
    def price(self):
        """Gets the price of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501


        :return: The price of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.


        :param price: The price of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def price_from(self):
        """Gets the price_from of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501


        :return: The price_from of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501
        :rtype: int
        """
        return self._price_from

    @price_from.setter
    def price_from(self, price_from):
        """Sets the price_from of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.


        :param price_from: The price_from of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501
        :type: int
        """

        self._price_from = price_from

    @property
    def price_to(self):
        """Gets the price_to of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501


        :return: The price_to of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501
        :rtype: int
        """
        return self._price_to

    @price_to.setter
    def price_to(self, price_to):
        """Sets the price_to of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.


        :param price_to: The price_to of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501
        :type: int
        """

        self._price_to = price_to

    @property
    def display_price(self):
        """Gets the display_price of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501


        :return: The display_price of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501
        :rtype: str
        """
        return self._display_price

    @display_price.setter
    def display_price(self, display_price):
        """Sets the display_price of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.


        :param display_price: The display_price of this DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails.  # noqa: E501
        :type: str
        """

        self._display_price = display_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainSearchServiceV2ModelDomainSearchContractsV2PriceDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
