# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sale_method': 'str',
        'sold_details': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails',
        'auction_details': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails',
        'tender_details': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails',
        'tenant_details': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails',
        'annual_return': 'int',
        'sale_terms': 'str'
    }

    attribute_map = {
        'sale_method': 'saleMethod',
        'sold_details': 'soldDetails',
        'auction_details': 'auctionDetails',
        'tender_details': 'tenderDetails',
        'tenant_details': 'tenantDetails',
        'annual_return': 'annualReturn',
        'sale_terms': 'saleTerms'
    }

    def __init__(self, sale_method=None, sold_details=None, auction_details=None, tender_details=None, tenant_details=None, annual_return=None, sale_terms=None):  # noqa: E501
        """DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails - a model defined in Swagger"""  # noqa: E501

        self._sale_method = None
        self._sold_details = None
        self._auction_details = None
        self._tender_details = None
        self._tenant_details = None
        self._annual_return = None
        self._sale_terms = None
        self.discriminator = None

        if sale_method is not None:
            self.sale_method = sale_method
        if sold_details is not None:
            self.sold_details = sold_details
        if auction_details is not None:
            self.auction_details = auction_details
        if tender_details is not None:
            self.tender_details = tender_details
        if tenant_details is not None:
            self.tenant_details = tenant_details
        if annual_return is not None:
            self.annual_return = annual_return
        if sale_terms is not None:
            self.sale_terms = sale_terms

    @property
    def sale_method(self):
        """Gets the sale_method of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501


        :return: The sale_method of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :rtype: str
        """
        return self._sale_method

    @sale_method.setter
    def sale_method(self, sale_method):
        """Sets the sale_method of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.


        :param sale_method: The sale_method of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["notStated", "auction", "privateTreaty", "tender", "expressionOfInterest"]  # noqa: E501
        if sale_method not in allowed_values:
            raise ValueError(
                "Invalid value for `sale_method` ({0}), must be one of {1}"  # noqa: E501
                .format(sale_method, allowed_values)
            )

        self._sale_method = sale_method

    @property
    def sold_details(self):
        """Gets the sold_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501


        :return: The sold_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails
        """
        return self._sold_details

    @sold_details.setter
    def sold_details(self, sold_details):
        """Sets the sold_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.


        :param sold_details: The sold_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSoldDetails
        """

        self._sold_details = sold_details

    @property
    def auction_details(self):
        """Gets the auction_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501


        :return: The auction_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails
        """
        return self._auction_details

    @auction_details.setter
    def auction_details(self, auction_details):
        """Sets the auction_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.


        :param auction_details: The auction_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAuctionDetails
        """

        self._auction_details = auction_details

    @property
    def tender_details(self):
        """Gets the tender_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501


        :return: The tender_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails
        """
        return self._tender_details

    @tender_details.setter
    def tender_details(self, tender_details):
        """Sets the tender_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.


        :param tender_details: The tender_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenderDetails
        """

        self._tender_details = tender_details

    @property
    def tenant_details(self):
        """Gets the tenant_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501


        :return: The tenant_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
        """
        return self._tenant_details

    @tenant_details.setter
    def tenant_details(self, tenant_details):
        """Sets the tenant_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.


        :param tenant_details: The tenant_details of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingTenantDetails
        """

        self._tenant_details = tenant_details

    @property
    def annual_return(self):
        """Gets the annual_return of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501


        :return: The annual_return of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :rtype: int
        """
        return self._annual_return

    @annual_return.setter
    def annual_return(self, annual_return):
        """Sets the annual_return of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.


        :param annual_return: The annual_return of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :type: int
        """

        self._annual_return = annual_return

    @property
    def sale_terms(self):
        """Gets the sale_terms of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501


        :return: The sale_terms of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :rtype: str
        """
        return self._sale_terms

    @sale_terms.setter
    def sale_terms(self, sale_terms):
        """Sets the sale_terms of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.


        :param sale_terms: The sale_terms of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails.  # noqa: E501
        :type: str
        """

        self._sale_terms = sale_terms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
