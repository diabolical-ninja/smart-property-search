# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'types': 'list[str]',
        'address_components': 'list[DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV2AddressComponentModel]',
        'ids': 'list[DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3ApmIdModel]'
    }

    attribute_map = {
        'types': 'types',
        'address_components': 'addressComponents',
        'ids': 'ids'
    }

    def __init__(self, types=None, address_components=None, ids=None):  # noqa: E501
        """DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel - a model defined in Swagger"""  # noqa: E501

        self._types = None
        self._address_components = None
        self._ids = None
        self.discriminator = None

        if types is not None:
            self.types = types
        if address_components is not None:
            self.address_components = address_components
        if ids is not None:
            self.ids = ids

    @property
    def types(self):
        """Gets the types of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.  # noqa: E501


        :return: The types of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.


        :param types: The types of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Address", "Street", "Suburb", "Postcode", "State"]  # noqa: E501
        if not set(types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._types = types

    @property
    def address_components(self):
        """Gets the address_components of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.  # noqa: E501


        :return: The address_components of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.  # noqa: E501
        :rtype: list[DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV2AddressComponentModel]
        """
        return self._address_components

    @address_components.setter
    def address_components(self, address_components):
        """Sets the address_components of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.


        :param address_components: The address_components of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.  # noqa: E501
        :type: list[DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV2AddressComponentModel]
        """

        self._address_components = address_components

    @property
    def ids(self):
        """Gets the ids of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.  # noqa: E501


        :return: The ids of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.  # noqa: E501
        :rtype: list[DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3ApmIdModel]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.


        :param ids: The ids of this DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel.  # noqa: E501
        :type: list[DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3ApmIdModel]
        """

        self._ids = ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainAPMServiceV3ModelAPMAPIModelsTokenisedSearchV3AddressDataModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
