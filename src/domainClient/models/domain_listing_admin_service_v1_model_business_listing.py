# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelBusinessListing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'listing_action': 'str',
        'contact_preference': 'str',
        'under_offer_or_contract': 'bool',
        'nabers': 'float',
        'property_details': 'DomainListingAdminServiceV1ModelBusinessProperty',
        'lease_hold_details': 'DomainListingAdminServiceV1ModelLeaseHoldDetail',
        'sale_info': 'DomainListingAdminServiceV1ModelSaleInfo',
        'freehold_commercial_ad_id': 'int',
        'price': 'DomainListingAdminServiceV1ModelPrice',
        'domain_ad_id': 'int',
        'domain_agency_id': 'int',
        'provider_ad_id': 'str',
        'features': 'str',
        'description': 'str',
        'summary': 'str',
        'inspection_details': 'DomainListingAdminServiceV1ModelInspectionDetails',
        'media': 'list[DomainListingAdminServiceV1ModelPropertyMedia]',
        'contacts': 'list[DomainListingAdminServiceV1ModelContact]',
        'other_enquiry_email': 'str',
        'receive_emails_to_default_address': 'bool',
        'is_rural': 'bool',
        'supplementary': 'list[DomainListingAdminServiceV1ModelListingSupplementary]'
    }

    attribute_map = {
        'listing_action': 'listingAction',
        'contact_preference': 'contactPreference',
        'under_offer_or_contract': 'underOfferOrContract',
        'nabers': 'nabers',
        'property_details': 'propertyDetails',
        'lease_hold_details': 'leaseHoldDetails',
        'sale_info': 'saleInfo',
        'freehold_commercial_ad_id': 'freeholdCommercialAdId',
        'price': 'price',
        'domain_ad_id': 'domainAdId',
        'domain_agency_id': 'domainAgencyID',
        'provider_ad_id': 'providerAdId',
        'features': 'features',
        'description': 'description',
        'summary': 'summary',
        'inspection_details': 'inspectionDetails',
        'media': 'media',
        'contacts': 'contacts',
        'other_enquiry_email': 'otherEnquiryEmail',
        'receive_emails_to_default_address': 'receiveEmailsToDefaultAddress',
        'is_rural': 'isRural',
        'supplementary': 'supplementary'
    }

    def __init__(self, listing_action=None, contact_preference=None, under_offer_or_contract=None, nabers=None, property_details=None, lease_hold_details=None, sale_info=None, freehold_commercial_ad_id=None, price=None, domain_ad_id=None, domain_agency_id=None, provider_ad_id=None, features=None, description=None, summary=None, inspection_details=None, media=None, contacts=None, other_enquiry_email=None, receive_emails_to_default_address=None, is_rural=None, supplementary=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelBusinessListing - a model defined in Swagger"""  # noqa: E501

        self._listing_action = None
        self._contact_preference = None
        self._under_offer_or_contract = None
        self._nabers = None
        self._property_details = None
        self._lease_hold_details = None
        self._sale_info = None
        self._freehold_commercial_ad_id = None
        self._price = None
        self._domain_ad_id = None
        self._domain_agency_id = None
        self._provider_ad_id = None
        self._features = None
        self._description = None
        self._summary = None
        self._inspection_details = None
        self._media = None
        self._contacts = None
        self._other_enquiry_email = None
        self._receive_emails_to_default_address = None
        self._is_rural = None
        self._supplementary = None
        self.discriminator = None

        if listing_action is not None:
            self.listing_action = listing_action
        if contact_preference is not None:
            self.contact_preference = contact_preference
        if under_offer_or_contract is not None:
            self.under_offer_or_contract = under_offer_or_contract
        if nabers is not None:
            self.nabers = nabers
        if property_details is not None:
            self.property_details = property_details
        if lease_hold_details is not None:
            self.lease_hold_details = lease_hold_details
        if sale_info is not None:
            self.sale_info = sale_info
        if freehold_commercial_ad_id is not None:
            self.freehold_commercial_ad_id = freehold_commercial_ad_id
        if price is not None:
            self.price = price
        if domain_ad_id is not None:
            self.domain_ad_id = domain_ad_id
        if domain_agency_id is not None:
            self.domain_agency_id = domain_agency_id
        if provider_ad_id is not None:
            self.provider_ad_id = provider_ad_id
        if features is not None:
            self.features = features
        if description is not None:
            self.description = description
        if summary is not None:
            self.summary = summary
        if inspection_details is not None:
            self.inspection_details = inspection_details
        if media is not None:
            self.media = media
        if contacts is not None:
            self.contacts = contacts
        if other_enquiry_email is not None:
            self.other_enquiry_email = other_enquiry_email
        if receive_emails_to_default_address is not None:
            self.receive_emails_to_default_address = receive_emails_to_default_address
        if is_rural is not None:
            self.is_rural = is_rural
        if supplementary is not None:
            self.supplementary = supplementary

    @property
    def listing_action(self):
        """Gets the listing_action of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Sale or Rent  # noqa: E501

        :return: The listing_action of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: str
        """
        return self._listing_action

    @listing_action.setter
    def listing_action(self, listing_action):
        """Sets the listing_action of this DomainListingAdminServiceV1ModelBusinessListing.

        Sale or Rent  # noqa: E501

        :param listing_action: The listing_action of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: str
        """
        allowed_values = ["sale", "rent", "share", "saleAndLease"]  # noqa: E501
        if listing_action not in allowed_values:
            raise ValueError(
                "Invalid value for `listing_action` ({0}), must be one of {1}"  # noqa: E501
                .format(listing_action, allowed_values)
            )

        self._listing_action = listing_action

    @property
    def contact_preference(self):
        """Gets the contact_preference of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Indicates the listing preferred contact method. Default by both phone and email if not provided.  # noqa: E501

        :return: The contact_preference of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: str
        """
        return self._contact_preference

    @contact_preference.setter
    def contact_preference(self, contact_preference):
        """Sets the contact_preference of this DomainListingAdminServiceV1ModelBusinessListing.

        Indicates the listing preferred contact method. Default by both phone and email if not provided.  # noqa: E501

        :param contact_preference: The contact_preference of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: str
        """
        allowed_values = ["byPhone"]  # noqa: E501
        if contact_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(contact_preference, allowed_values)
            )

        self._contact_preference = contact_preference

    @property
    def under_offer_or_contract(self):
        """Gets the under_offer_or_contract of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Set for Sale listings only  # noqa: E501

        :return: The under_offer_or_contract of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: bool
        """
        return self._under_offer_or_contract

    @under_offer_or_contract.setter
    def under_offer_or_contract(self, under_offer_or_contract):
        """Sets the under_offer_or_contract of this DomainListingAdminServiceV1ModelBusinessListing.

        Set for Sale listings only  # noqa: E501

        :param under_offer_or_contract: The under_offer_or_contract of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: bool
        """

        self._under_offer_or_contract = under_offer_or_contract

    @property
    def nabers(self):
        """Gets the nabers of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        The NABERS Rating is the energy efficiency rating that the property has been measured to have.               This rating is measured in increments of .5 and can range from 0 to 6.               The NABERS rating is required for spaces within office buildings of 1000 square metres or more.              For more information on the NABERS rating system please visit http://www.nabers.gov.au  # noqa: E501

        :return: The nabers of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: float
        """
        return self._nabers

    @nabers.setter
    def nabers(self, nabers):
        """Sets the nabers of this DomainListingAdminServiceV1ModelBusinessListing.

        The NABERS Rating is the energy efficiency rating that the property has been measured to have.               This rating is measured in increments of .5 and can range from 0 to 6.               The NABERS rating is required for spaces within office buildings of 1000 square metres or more.              For more information on the NABERS rating system please visit http://www.nabers.gov.au  # noqa: E501

        :param nabers: The nabers of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: float
        """

        self._nabers = nabers

    @property
    def property_details(self):
        """Gets the property_details of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Property Details  # noqa: E501

        :return: The property_details of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelBusinessProperty
        """
        return self._property_details

    @property_details.setter
    def property_details(self, property_details):
        """Sets the property_details of this DomainListingAdminServiceV1ModelBusinessListing.

        Property Details  # noqa: E501

        :param property_details: The property_details of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelBusinessProperty
        """

        self._property_details = property_details

    @property
    def lease_hold_details(self):
        """Gets the lease_hold_details of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        The leasehold details of the commercial property that the business belongs to.               Leasehold and freehold are mutually exclusive properties, only specify one  # noqa: E501

        :return: The lease_hold_details of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelLeaseHoldDetail
        """
        return self._lease_hold_details

    @lease_hold_details.setter
    def lease_hold_details(self, lease_hold_details):
        """Sets the lease_hold_details of this DomainListingAdminServiceV1ModelBusinessListing.

        The leasehold details of the commercial property that the business belongs to.               Leasehold and freehold are mutually exclusive properties, only specify one  # noqa: E501

        :param lease_hold_details: The lease_hold_details of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelLeaseHoldDetail
        """

        self._lease_hold_details = lease_hold_details

    @property
    def sale_info(self):
        """Gets the sale_info of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        The sale info of the business  # noqa: E501

        :return: The sale_info of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelSaleInfo
        """
        return self._sale_info

    @sale_info.setter
    def sale_info(self, sale_info):
        """Sets the sale_info of this DomainListingAdminServiceV1ModelBusinessListing.

        The sale info of the business  # noqa: E501

        :param sale_info: The sale_info of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelSaleInfo
        """

        self._sale_info = sale_info

    @property
    def freehold_commercial_ad_id(self):
        """Gets the freehold_commercial_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        The ad id of the commercial property with a freehold that the business belongs to.               Leasehold and freehold are mutually exclusive properties, only specify one  # noqa: E501

        :return: The freehold_commercial_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: int
        """
        return self._freehold_commercial_ad_id

    @freehold_commercial_ad_id.setter
    def freehold_commercial_ad_id(self, freehold_commercial_ad_id):
        """Sets the freehold_commercial_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.

        The ad id of the commercial property with a freehold that the business belongs to.               Leasehold and freehold are mutually exclusive properties, only specify one  # noqa: E501

        :param freehold_commercial_ad_id: The freehold_commercial_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: int
        """

        self._freehold_commercial_ad_id = freehold_commercial_ad_id

    @property
    def price(self):
        """Gets the price of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Fixed price or price range to be used for search, and free text display price  # noqa: E501

        :return: The price of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DomainListingAdminServiceV1ModelBusinessListing.

        Fixed price or price range to be used for search, and free text display price  # noqa: E501

        :param price: The price of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelPrice
        """

        self._price = price

    @property
    def domain_ad_id(self):
        """Gets the domain_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Domain Ad ID, not applicable for creating new ads.              Mandatory when updating a listing that belongs to an agency that              is in the process of being migrated between listing providers.  # noqa: E501

        :return: The domain_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: int
        """
        return self._domain_ad_id

    @domain_ad_id.setter
    def domain_ad_id(self, domain_ad_id):
        """Sets the domain_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.

        Domain Ad ID, not applicable for creating new ads.              Mandatory when updating a listing that belongs to an agency that              is in the process of being migrated between listing providers.  # noqa: E501

        :param domain_ad_id: The domain_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: int
        """

        self._domain_ad_id = domain_ad_id

    @property
    def domain_agency_id(self):
        """Gets the domain_agency_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        The Domain agency ID number  # noqa: E501

        :return: The domain_agency_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: int
        """
        return self._domain_agency_id

    @domain_agency_id.setter
    def domain_agency_id(self, domain_agency_id):
        """Sets the domain_agency_id of this DomainListingAdminServiceV1ModelBusinessListing.

        The Domain agency ID number  # noqa: E501

        :param domain_agency_id: The domain_agency_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: int
        """

        self._domain_agency_id = domain_agency_id

    @property
    def provider_ad_id(self):
        """Gets the provider_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        External ad ID up to 30 characters will be stored. This value is used to identify an ad for updates and should be unique for listing provider  # noqa: E501

        :return: The provider_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: str
        """
        return self._provider_ad_id

    @provider_ad_id.setter
    def provider_ad_id(self, provider_ad_id):
        """Sets the provider_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.

        External ad ID up to 30 characters will be stored. This value is used to identify an ad for updates and should be unique for listing provider  # noqa: E501

        :param provider_ad_id: The provider_ad_id of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: str
        """

        self._provider_ad_id = provider_ad_id

    @property
    def features(self):
        """Gets the features of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.              INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.              OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.              LOCATION: Ground floor, Water Views, North Facing, City Views.              ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels  # noqa: E501

        :return: The features of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DomainListingAdminServiceV1ModelBusinessListing.

        Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.              INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.              OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.              LOCATION: Ground floor, Water Views, North Facing, City Views.              ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels  # noqa: E501

        :param features: The features of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: str
        """

        self._features = features

    @property
    def description(self):
        """Gets the description of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Description of the property.              6000 characters in length. The following HTML elements are permitted: &amp;lt;br /&amp;gt;, &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;, &amp;amp;nbsp;. HTML must be well-formed.              Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade  # noqa: E501

        :return: The description of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DomainListingAdminServiceV1ModelBusinessListing.

        Description of the property.              6000 characters in length. The following HTML elements are permitted: &amp;lt;br /&amp;gt;, &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;, &amp;amp;nbsp;. HTML must be well-formed.              Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade  # noqa: E501

        :param description: The description of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def summary(self):
        """Gets the summary of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        'Headline' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.  # noqa: E501

        :return: The summary of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DomainListingAdminServiceV1ModelBusinessListing.

        'Headline' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.  # noqa: E501

        :param summary: The summary of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def inspection_details(self):
        """Gets the inspection_details of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        The inspection details of the listing  # noqa: E501

        :return: The inspection_details of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelInspectionDetails
        """
        return self._inspection_details

    @inspection_details.setter
    def inspection_details(self, inspection_details):
        """Sets the inspection_details of this DomainListingAdminServiceV1ModelBusinessListing.

        The inspection details of the listing  # noqa: E501

        :param inspection_details: The inspection_details of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelInspectionDetails
        """

        self._inspection_details = inspection_details

    @property
    def media(self):
        """Gets the media of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.  # noqa: E501

        :return: The media of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: list[DomainListingAdminServiceV1ModelPropertyMedia]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this DomainListingAdminServiceV1ModelBusinessListing.

        Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.  # noqa: E501

        :param media: The media of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: list[DomainListingAdminServiceV1ModelPropertyMedia]
        """

        self._media = media

    @property
    def contacts(self):
        """Gets the contacts of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Minimum required attributes: First name, last name and E-mail.              If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.              Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.  # noqa: E501

        :return: The contacts of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: list[DomainListingAdminServiceV1ModelContact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this DomainListingAdminServiceV1ModelBusinessListing.

        Minimum required attributes: First name, last name and E-mail.              If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.              Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.  # noqa: E501

        :param contacts: The contacts of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: list[DomainListingAdminServiceV1ModelContact]
        """

        self._contacts = contacts

    @property
    def other_enquiry_email(self):
        """Gets the other_enquiry_email of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Sets an additional Email Address to which enquiries on the Listing will be sent  # noqa: E501

        :return: The other_enquiry_email of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: str
        """
        return self._other_enquiry_email

    @other_enquiry_email.setter
    def other_enquiry_email(self, other_enquiry_email):
        """Sets the other_enquiry_email of this DomainListingAdminServiceV1ModelBusinessListing.

        Sets an additional Email Address to which enquiries on the Listing will be sent  # noqa: E501

        :param other_enquiry_email: The other_enquiry_email of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: str
        """

        self._other_enquiry_email = other_enquiry_email

    @property
    def receive_emails_to_default_address(self):
        """Gets the receive_emails_to_default_address of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Send email enquiries to the default address for this listing type  # noqa: E501

        :return: The receive_emails_to_default_address of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: bool
        """
        return self._receive_emails_to_default_address

    @receive_emails_to_default_address.setter
    def receive_emails_to_default_address(self, receive_emails_to_default_address):
        """Sets the receive_emails_to_default_address of this DomainListingAdminServiceV1ModelBusinessListing.

        Send email enquiries to the default address for this listing type  # noqa: E501

        :param receive_emails_to_default_address: The receive_emails_to_default_address of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: bool
        """

        self._receive_emails_to_default_address = receive_emails_to_default_address

    @property
    def is_rural(self):
        """Gets the is_rural of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        True if the property is rural  # noqa: E501

        :return: The is_rural of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: bool
        """
        return self._is_rural

    @is_rural.setter
    def is_rural(self, is_rural):
        """Sets the is_rural of this DomainListingAdminServiceV1ModelBusinessListing.

        True if the property is rural  # noqa: E501

        :param is_rural: The is_rural of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: bool
        """

        self._is_rural = is_rural

    @property
    def supplementary(self):
        """Gets the supplementary of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501

        Rural attributes                            *Improvements* (optional)                            Available `types` (fixed list, optional):              * Machinery Shed              * Shearing Shed              * Workshop              * Shearers Quarters              * Silos              * Other Housing              * Managers Accommodation                            *Fencing* (optional)                            `description` (string, optional): free text fencing description, maximum 250 characters.                            *Yards* (optional)                            Available `types` (fixed list, optional):              * Sheep              * Cattle                            *Homestead* (optional)                            `description` (string, optional): description of the homestead and construction, maximum 250 characters.                            `metadata` (optional)              * `area` (decimal, optional): homestead area in square metres.                            Available `types` (fixed list, optional):              * Office              * Ensuite              * Tennis Court              * Mains Gas              * Floorboards              * Internal Laundry                            *Water* (optional)                            `description` (string, optional): water comments, maximum 250 characters.                            Available `types` (fixed list, optional):              * Tank              * Well              * Reticulated              * Bores              * Springs              * Creeks              * Dams              * River                            *Crops* (optional)                            `description` (string, optional): description of the crops, maximum 250 characters.                            `metadata` (optional)              * `croppedAnnually` (decimal, optional): average annual area cropped in hectares.              * `fallowAnnually` (decimal, optional): average annual fallow area in hectares.              * `pastures` (string, optional): description of pastures available, maximum 250 characters.                            *Livestock* (optional)                            `description` (string, optional): additional comments, maximum 250 characters.                            `metadata` (optional)              * `capacity` (decimal, optional): property carrying capacity in DSE (unit of carry capacity).                            Available `types` (fixed list, optional):              * Sheep              * Pigs              * Cattle              * Poultry              * Horses              * Exotic              * Goats              * Stud                            *Inclusions* (optional)                            `description` (string, optional): description of plant and machinery included in sale, maximum 250 characters.                            `metadata` (optional)              * `livestock` (string, optional): description of livestock included in sale, maximum 250 characters.              * `crop` (string, optional): description of crops included in sale, maximum 250 characters.                            *Irrigation* (optional)                            `description` (string, optional): irrigation comments, maximum 250 characters                            `metadata` (optional)              * `rainfall` (decimal, optional): annual rainfall in millimeters.  # noqa: E501

        :return: The supplementary of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :rtype: list[DomainListingAdminServiceV1ModelListingSupplementary]
        """
        return self._supplementary

    @supplementary.setter
    def supplementary(self, supplementary):
        """Sets the supplementary of this DomainListingAdminServiceV1ModelBusinessListing.

        Rural attributes                            *Improvements* (optional)                            Available `types` (fixed list, optional):              * Machinery Shed              * Shearing Shed              * Workshop              * Shearers Quarters              * Silos              * Other Housing              * Managers Accommodation                            *Fencing* (optional)                            `description` (string, optional): free text fencing description, maximum 250 characters.                            *Yards* (optional)                            Available `types` (fixed list, optional):              * Sheep              * Cattle                            *Homestead* (optional)                            `description` (string, optional): description of the homestead and construction, maximum 250 characters.                            `metadata` (optional)              * `area` (decimal, optional): homestead area in square metres.                            Available `types` (fixed list, optional):              * Office              * Ensuite              * Tennis Court              * Mains Gas              * Floorboards              * Internal Laundry                            *Water* (optional)                            `description` (string, optional): water comments, maximum 250 characters.                            Available `types` (fixed list, optional):              * Tank              * Well              * Reticulated              * Bores              * Springs              * Creeks              * Dams              * River                            *Crops* (optional)                            `description` (string, optional): description of the crops, maximum 250 characters.                            `metadata` (optional)              * `croppedAnnually` (decimal, optional): average annual area cropped in hectares.              * `fallowAnnually` (decimal, optional): average annual fallow area in hectares.              * `pastures` (string, optional): description of pastures available, maximum 250 characters.                            *Livestock* (optional)                            `description` (string, optional): additional comments, maximum 250 characters.                            `metadata` (optional)              * `capacity` (decimal, optional): property carrying capacity in DSE (unit of carry capacity).                            Available `types` (fixed list, optional):              * Sheep              * Pigs              * Cattle              * Poultry              * Horses              * Exotic              * Goats              * Stud                            *Inclusions* (optional)                            `description` (string, optional): description of plant and machinery included in sale, maximum 250 characters.                            `metadata` (optional)              * `livestock` (string, optional): description of livestock included in sale, maximum 250 characters.              * `crop` (string, optional): description of crops included in sale, maximum 250 characters.                            *Irrigation* (optional)                            `description` (string, optional): irrigation comments, maximum 250 characters                            `metadata` (optional)              * `rainfall` (decimal, optional): annual rainfall in millimeters.  # noqa: E501

        :param supplementary: The supplementary of this DomainListingAdminServiceV1ModelBusinessListing.  # noqa: E501
        :type: list[DomainListingAdminServiceV1ModelListingSupplementary]
        """

        self._supplementary = supplementary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelBusinessListing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelBusinessListing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
