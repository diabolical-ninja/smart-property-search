# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'listing_type': 'str',
        'property_types': 'list[str]',
        'property_features': 'list[str]',
        'listing_attributes': 'list[str]',
        'property_established_type': 'str',
        'min_bedrooms': 'float',
        'max_bedrooms': 'float',
        'min_bathrooms': 'float',
        'max_bathrooms': 'float',
        'min_carspaces': 'int',
        'max_carspaces': 'int',
        'min_price': 'int',
        'max_price': 'int',
        'min_land_area': 'int',
        'max_land_area': 'int',
        'advertiser_ids': 'list[int]',
        'ad_ids': 'list[int]',
        'exclude_ad_ids': 'list[int]',
        'locations': 'list[DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation]',
        'school_catchments': 'list[DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment]',
        'location_terms': 'str',
        'keywords': 'list[str]',
        'new_dev_only': 'bool',
        'inspection_from': 'datetime',
        'inspection_to': 'datetime',
        'auction_from': 'datetime',
        'auction_to': 'datetime',
        'date_available_from': 'datetime',
        'date_available_to': 'datetime',
        'rural_only': 'bool',
        'exclude_price_withheld': 'bool',
        'exclude_deposit_taken': 'bool',
        'topspot_keywords': 'list[str]',
        'custom_sort': 'DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort',
        'sort': 'DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy',
        'page_size': 'int',
        'geo_window': 'DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow',
        'updated_since': 'datetime',
        'listed_since': 'datetime',
        'include_inspection_aggregations': 'bool',
        'tags': 'list[DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery]',
        'page_number': 'int'
    }

    attribute_map = {
        'listing_type': 'listingType',
        'property_types': 'propertyTypes',
        'property_features': 'propertyFeatures',
        'listing_attributes': 'listingAttributes',
        'property_established_type': 'propertyEstablishedType',
        'min_bedrooms': 'minBedrooms',
        'max_bedrooms': 'maxBedrooms',
        'min_bathrooms': 'minBathrooms',
        'max_bathrooms': 'maxBathrooms',
        'min_carspaces': 'minCarspaces',
        'max_carspaces': 'maxCarspaces',
        'min_price': 'minPrice',
        'max_price': 'maxPrice',
        'min_land_area': 'minLandArea',
        'max_land_area': 'maxLandArea',
        'advertiser_ids': 'advertiserIds',
        'ad_ids': 'adIds',
        'exclude_ad_ids': 'excludeAdIds',
        'locations': 'locations',
        'school_catchments': 'schoolCatchments',
        'location_terms': 'locationTerms',
        'keywords': 'keywords',
        'new_dev_only': 'newDevOnly',
        'inspection_from': 'inspectionFrom',
        'inspection_to': 'inspectionTo',
        'auction_from': 'auctionFrom',
        'auction_to': 'auctionTo',
        'date_available_from': 'dateAvailableFrom',
        'date_available_to': 'dateAvailableTo',
        'rural_only': 'ruralOnly',
        'exclude_price_withheld': 'excludePriceWithheld',
        'exclude_deposit_taken': 'excludeDepositTaken',
        'topspot_keywords': 'topspotKeywords',
        'custom_sort': 'customSort',
        'sort': 'sort',
        'page_size': 'pageSize',
        'geo_window': 'geoWindow',
        'updated_since': 'updatedSince',
        'listed_since': 'listedSince',
        'include_inspection_aggregations': 'includeInspectionAggregations',
        'tags': 'tags',
        'page_number': 'pageNumber'
    }

    def __init__(self, listing_type=None, property_types=None, property_features=None, listing_attributes=None, property_established_type=None, min_bedrooms=None, max_bedrooms=None, min_bathrooms=None, max_bathrooms=None, min_carspaces=None, max_carspaces=None, min_price=None, max_price=None, min_land_area=None, max_land_area=None, advertiser_ids=None, ad_ids=None, exclude_ad_ids=None, locations=None, school_catchments=None, location_terms=None, keywords=None, new_dev_only=None, inspection_from=None, inspection_to=None, auction_from=None, auction_to=None, date_available_from=None, date_available_to=None, rural_only=None, exclude_price_withheld=None, exclude_deposit_taken=None, topspot_keywords=None, custom_sort=None, sort=None, page_size=None, geo_window=None, updated_since=None, listed_since=None, include_inspection_aggregations=None, tags=None, page_number=None):  # noqa: E501
        """DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters - a model defined in Swagger"""  # noqa: E501

        self._listing_type = None
        self._property_types = None
        self._property_features = None
        self._listing_attributes = None
        self._property_established_type = None
        self._min_bedrooms = None
        self._max_bedrooms = None
        self._min_bathrooms = None
        self._max_bathrooms = None
        self._min_carspaces = None
        self._max_carspaces = None
        self._min_price = None
        self._max_price = None
        self._min_land_area = None
        self._max_land_area = None
        self._advertiser_ids = None
        self._ad_ids = None
        self._exclude_ad_ids = None
        self._locations = None
        self._school_catchments = None
        self._location_terms = None
        self._keywords = None
        self._new_dev_only = None
        self._inspection_from = None
        self._inspection_to = None
        self._auction_from = None
        self._auction_to = None
        self._date_available_from = None
        self._date_available_to = None
        self._rural_only = None
        self._exclude_price_withheld = None
        self._exclude_deposit_taken = None
        self._topspot_keywords = None
        self._custom_sort = None
        self._sort = None
        self._page_size = None
        self._geo_window = None
        self._updated_since = None
        self._listed_since = None
        self._include_inspection_aggregations = None
        self._tags = None
        self._page_number = None
        self.discriminator = None

        if listing_type is not None:
            self.listing_type = listing_type
        if property_types is not None:
            self.property_types = property_types
        if property_features is not None:
            self.property_features = property_features
        if listing_attributes is not None:
            self.listing_attributes = listing_attributes
        if property_established_type is not None:
            self.property_established_type = property_established_type
        if min_bedrooms is not None:
            self.min_bedrooms = min_bedrooms
        if max_bedrooms is not None:
            self.max_bedrooms = max_bedrooms
        if min_bathrooms is not None:
            self.min_bathrooms = min_bathrooms
        if max_bathrooms is not None:
            self.max_bathrooms = max_bathrooms
        if min_carspaces is not None:
            self.min_carspaces = min_carspaces
        if max_carspaces is not None:
            self.max_carspaces = max_carspaces
        if min_price is not None:
            self.min_price = min_price
        if max_price is not None:
            self.max_price = max_price
        if min_land_area is not None:
            self.min_land_area = min_land_area
        if max_land_area is not None:
            self.max_land_area = max_land_area
        if advertiser_ids is not None:
            self.advertiser_ids = advertiser_ids
        if ad_ids is not None:
            self.ad_ids = ad_ids
        if exclude_ad_ids is not None:
            self.exclude_ad_ids = exclude_ad_ids
        if locations is not None:
            self.locations = locations
        if school_catchments is not None:
            self.school_catchments = school_catchments
        if location_terms is not None:
            self.location_terms = location_terms
        if keywords is not None:
            self.keywords = keywords
        if new_dev_only is not None:
            self.new_dev_only = new_dev_only
        if inspection_from is not None:
            self.inspection_from = inspection_from
        if inspection_to is not None:
            self.inspection_to = inspection_to
        if auction_from is not None:
            self.auction_from = auction_from
        if auction_to is not None:
            self.auction_to = auction_to
        if date_available_from is not None:
            self.date_available_from = date_available_from
        if date_available_to is not None:
            self.date_available_to = date_available_to
        if rural_only is not None:
            self.rural_only = rural_only
        if exclude_price_withheld is not None:
            self.exclude_price_withheld = exclude_price_withheld
        if exclude_deposit_taken is not None:
            self.exclude_deposit_taken = exclude_deposit_taken
        if topspot_keywords is not None:
            self.topspot_keywords = topspot_keywords
        if custom_sort is not None:
            self.custom_sort = custom_sort
        if sort is not None:
            self.sort = sort
        if page_size is not None:
            self.page_size = page_size
        if geo_window is not None:
            self.geo_window = geo_window
        if updated_since is not None:
            self.updated_since = updated_since
        if listed_since is not None:
            self.listed_since = listed_since
        if include_inspection_aggregations is not None:
            self.include_inspection_aggregations = include_inspection_aggregations
        if tags is not None:
            self.tags = tags
        if page_number is not None:
            self.page_number = page_number

    @property
    def listing_type(self):
        """Gets the listing_type of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The listing_type of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: str
        """
        return self._listing_type

    @listing_type.setter
    def listing_type(self, listing_type):
        """Sets the listing_type of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param listing_type: The listing_type of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sale", "Rent", "Share", "Sold", "NewHomes"]  # noqa: E501
        if listing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `listing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(listing_type, allowed_values)
            )

        self._listing_type = listing_type

    @property
    def property_types(self):
        """Gets the property_types of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The property_types of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._property_types

    @property_types.setter
    def property_types(self, property_types):
        """Sets the property_types of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param property_types: The property_types of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["AcreageSemiRural", "ApartmentUnitFlat", "Aquaculture", "BlockOfUnits", "CarSpace", "DairyFarming", "DevelopmentSite", "Duplex", "Farm", "FishingForestry", "NewHomeDesigns", "House", "NewHouseLand", "IrrigationServices", "NewLand", "Livestock", "NewApartments", "Penthouse", "RetirementVillage", "Rural", "SemiDetached", "SpecialistFarm", "Studio", "Terrace", "Townhouse", "VacantLand", "Villa", "Cropping", "Viticulture", "MixedFarming", "Grazing", "Horticulture", "Equine", "Farmlet", "Orchard", "RuralLifestyle"]  # noqa: E501
        if not set(property_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `property_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(property_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._property_types = property_types

    @property
    def property_features(self):
        """Gets the property_features of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The property_features of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._property_features

    @property_features.setter
    def property_features(self, property_features):
        """Sets the property_features of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param property_features: The property_features of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["AirConditioning", "BuiltInWardrobes", "CableOrSatellite", "Ensuite", "Floorboards", "Gas", "InternalLaundry", "PetsAllowed", "SecureParking", "SwimmingPool", "Furnished", "GroundFloor", "WaterViews", "NorthFacing", "CityViews", "IndoorSpa", "Gym", "AlarmSystem", "Intercom", "BroadbandInternetAccess", "Bath", "Fireplace", "SeparateDiningRoom", "Heating", "Dishwasher", "Study", "TennisCourt", "Shed", "FullyFenced", "BalconyDeck", "GardenCourtyard", "OutdoorSpa", "DoubleGlazedWindows", "EnergyEfficientAppliances", "WaterEfficientAppliances", "WallCeilingInsulation", "RainwaterStorageTank", "GreywaterSystem", "WaterEfficientFixtures", "SolarHotWater", "SolarPanels"]  # noqa: E501
        if not set(property_features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `property_features` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(property_features) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._property_features = property_features

    @property
    def listing_attributes(self):
        """Gets the listing_attributes of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The listing_attributes of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._listing_attributes

    @listing_attributes.setter
    def listing_attributes(self, listing_attributes):
        """Sets the listing_attributes of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param listing_attributes: The listing_attributes of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["HasPhotos", "HasPrice", "NotUpForAuction", "NotUnderContract", "MarkedAsNew"]  # noqa: E501
        if not set(listing_attributes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `listing_attributes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(listing_attributes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._listing_attributes = listing_attributes

    @property
    def property_established_type(self):
        """Gets the property_established_type of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The property_established_type of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: str
        """
        return self._property_established_type

    @property_established_type.setter
    def property_established_type(self, property_established_type):
        """Sets the property_established_type of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param property_established_type: The property_established_type of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: str
        """
        allowed_values = ["Any", "New", "Established"]  # noqa: E501
        if property_established_type not in allowed_values:
            raise ValueError(
                "Invalid value for `property_established_type` ({0}), must be one of {1}"  # noqa: E501
                .format(property_established_type, allowed_values)
            )

        self._property_established_type = property_established_type

    @property
    def min_bedrooms(self):
        """Gets the min_bedrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The min_bedrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: float
        """
        return self._min_bedrooms

    @min_bedrooms.setter
    def min_bedrooms(self, min_bedrooms):
        """Sets the min_bedrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param min_bedrooms: The min_bedrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: float
        """

        self._min_bedrooms = min_bedrooms

    @property
    def max_bedrooms(self):
        """Gets the max_bedrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The max_bedrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: float
        """
        return self._max_bedrooms

    @max_bedrooms.setter
    def max_bedrooms(self, max_bedrooms):
        """Sets the max_bedrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param max_bedrooms: The max_bedrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: float
        """

        self._max_bedrooms = max_bedrooms

    @property
    def min_bathrooms(self):
        """Gets the min_bathrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The min_bathrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: float
        """
        return self._min_bathrooms

    @min_bathrooms.setter
    def min_bathrooms(self, min_bathrooms):
        """Sets the min_bathrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param min_bathrooms: The min_bathrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: float
        """

        self._min_bathrooms = min_bathrooms

    @property
    def max_bathrooms(self):
        """Gets the max_bathrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The max_bathrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: float
        """
        return self._max_bathrooms

    @max_bathrooms.setter
    def max_bathrooms(self, max_bathrooms):
        """Sets the max_bathrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param max_bathrooms: The max_bathrooms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: float
        """

        self._max_bathrooms = max_bathrooms

    @property
    def min_carspaces(self):
        """Gets the min_carspaces of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The min_carspaces of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: int
        """
        return self._min_carspaces

    @min_carspaces.setter
    def min_carspaces(self, min_carspaces):
        """Sets the min_carspaces of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param min_carspaces: The min_carspaces of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: int
        """

        self._min_carspaces = min_carspaces

    @property
    def max_carspaces(self):
        """Gets the max_carspaces of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The max_carspaces of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: int
        """
        return self._max_carspaces

    @max_carspaces.setter
    def max_carspaces(self, max_carspaces):
        """Sets the max_carspaces of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param max_carspaces: The max_carspaces of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: int
        """

        self._max_carspaces = max_carspaces

    @property
    def min_price(self):
        """Gets the min_price of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The min_price of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: int
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param min_price: The min_price of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: int
        """

        self._min_price = min_price

    @property
    def max_price(self):
        """Gets the max_price of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The max_price of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: int
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """Sets the max_price of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param max_price: The max_price of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: int
        """

        self._max_price = max_price

    @property
    def min_land_area(self):
        """Gets the min_land_area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The min_land_area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: int
        """
        return self._min_land_area

    @min_land_area.setter
    def min_land_area(self, min_land_area):
        """Sets the min_land_area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param min_land_area: The min_land_area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: int
        """

        self._min_land_area = min_land_area

    @property
    def max_land_area(self):
        """Gets the max_land_area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The max_land_area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: int
        """
        return self._max_land_area

    @max_land_area.setter
    def max_land_area(self, max_land_area):
        """Sets the max_land_area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param max_land_area: The max_land_area of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: int
        """

        self._max_land_area = max_land_area

    @property
    def advertiser_ids(self):
        """Gets the advertiser_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The advertiser_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[int]
        """
        return self._advertiser_ids

    @advertiser_ids.setter
    def advertiser_ids(self, advertiser_ids):
        """Sets the advertiser_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param advertiser_ids: The advertiser_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[int]
        """

        self._advertiser_ids = advertiser_ids

    @property
    def ad_ids(self):
        """Gets the ad_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The ad_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[int]
        """
        return self._ad_ids

    @ad_ids.setter
    def ad_ids(self, ad_ids):
        """Sets the ad_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param ad_ids: The ad_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[int]
        """

        self._ad_ids = ad_ids

    @property
    def exclude_ad_ids(self):
        """Gets the exclude_ad_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The exclude_ad_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[int]
        """
        return self._exclude_ad_ids

    @exclude_ad_ids.setter
    def exclude_ad_ids(self, exclude_ad_ids):
        """Sets the exclude_ad_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param exclude_ad_ids: The exclude_ad_ids of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[int]
        """

        self._exclude_ad_ids = exclude_ad_ids

    @property
    def locations(self):
        """Gets the locations of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The locations of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param locations: The locations of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchLocation]
        """

        self._locations = locations

    @property
    def school_catchments(self):
        """Gets the school_catchments of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The school_catchments of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment]
        """
        return self._school_catchments

    @school_catchments.setter
    def school_catchments(self, school_catchments):
        """Sets the school_catchments of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param school_catchments: The school_catchments of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSchoolCatchment]
        """

        self._school_catchments = school_catchments

    @property
    def location_terms(self):
        """Gets the location_terms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The location_terms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: str
        """
        return self._location_terms

    @location_terms.setter
    def location_terms(self, location_terms):
        """Sets the location_terms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param location_terms: The location_terms of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: str
        """

        self._location_terms = location_terms

    @property
    def keywords(self):
        """Gets the keywords of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The keywords of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param keywords: The keywords of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def new_dev_only(self):
        """Gets the new_dev_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The new_dev_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: bool
        """
        return self._new_dev_only

    @new_dev_only.setter
    def new_dev_only(self, new_dev_only):
        """Sets the new_dev_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param new_dev_only: The new_dev_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: bool
        """

        self._new_dev_only = new_dev_only

    @property
    def inspection_from(self):
        """Gets the inspection_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The inspection_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._inspection_from

    @inspection_from.setter
    def inspection_from(self, inspection_from):
        """Sets the inspection_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param inspection_from: The inspection_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: datetime
        """

        self._inspection_from = inspection_from

    @property
    def inspection_to(self):
        """Gets the inspection_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The inspection_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._inspection_to

    @inspection_to.setter
    def inspection_to(self, inspection_to):
        """Sets the inspection_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param inspection_to: The inspection_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: datetime
        """

        self._inspection_to = inspection_to

    @property
    def auction_from(self):
        """Gets the auction_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The auction_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._auction_from

    @auction_from.setter
    def auction_from(self, auction_from):
        """Sets the auction_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param auction_from: The auction_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: datetime
        """

        self._auction_from = auction_from

    @property
    def auction_to(self):
        """Gets the auction_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The auction_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._auction_to

    @auction_to.setter
    def auction_to(self, auction_to):
        """Sets the auction_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param auction_to: The auction_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: datetime
        """

        self._auction_to = auction_to

    @property
    def date_available_from(self):
        """Gets the date_available_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The date_available_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._date_available_from

    @date_available_from.setter
    def date_available_from(self, date_available_from):
        """Sets the date_available_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param date_available_from: The date_available_from of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: datetime
        """

        self._date_available_from = date_available_from

    @property
    def date_available_to(self):
        """Gets the date_available_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The date_available_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._date_available_to

    @date_available_to.setter
    def date_available_to(self, date_available_to):
        """Sets the date_available_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param date_available_to: The date_available_to of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: datetime
        """

        self._date_available_to = date_available_to

    @property
    def rural_only(self):
        """Gets the rural_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The rural_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: bool
        """
        return self._rural_only

    @rural_only.setter
    def rural_only(self, rural_only):
        """Sets the rural_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param rural_only: The rural_only of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: bool
        """

        self._rural_only = rural_only

    @property
    def exclude_price_withheld(self):
        """Gets the exclude_price_withheld of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The exclude_price_withheld of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_price_withheld

    @exclude_price_withheld.setter
    def exclude_price_withheld(self, exclude_price_withheld):
        """Sets the exclude_price_withheld of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param exclude_price_withheld: The exclude_price_withheld of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: bool
        """

        self._exclude_price_withheld = exclude_price_withheld

    @property
    def exclude_deposit_taken(self):
        """Gets the exclude_deposit_taken of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The exclude_deposit_taken of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_deposit_taken

    @exclude_deposit_taken.setter
    def exclude_deposit_taken(self, exclude_deposit_taken):
        """Sets the exclude_deposit_taken of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param exclude_deposit_taken: The exclude_deposit_taken of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: bool
        """

        self._exclude_deposit_taken = exclude_deposit_taken

    @property
    def topspot_keywords(self):
        """Gets the topspot_keywords of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The topspot_keywords of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._topspot_keywords

    @topspot_keywords.setter
    def topspot_keywords(self, topspot_keywords):
        """Sets the topspot_keywords of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param topspot_keywords: The topspot_keywords of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[str]
        """

        self._topspot_keywords = topspot_keywords

    @property
    def custom_sort(self):
        """Gets the custom_sort of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The custom_sort of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort
        """
        return self._custom_sort

    @custom_sort.setter
    def custom_sort(self, custom_sort):
        """Sets the custom_sort of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param custom_sort: The custom_sort of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsCustomSort
        """

        self._custom_sort = custom_sort

    @property
    def sort(self):
        """Gets the sort of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The sort of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param sort: The sort of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: DomainSearchServiceV2ModelSystemNullableDomainSearchWebApiV2ModelsSortBy
        """

        self._sort = sort

    @property
    def page_size(self):
        """Gets the page_size of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The page_size of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param page_size: The page_size of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def geo_window(self):
        """Gets the geo_window of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The geo_window of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow
        """
        return self._geo_window

    @geo_window.setter
    def geo_window(self, geo_window):
        """Sets the geo_window of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param geo_window: The geo_window of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsGeoWindow
        """

        self._geo_window = geo_window

    @property
    def updated_since(self):
        """Gets the updated_since of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The updated_since of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_since

    @updated_since.setter
    def updated_since(self, updated_since):
        """Sets the updated_since of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param updated_since: The updated_since of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: datetime
        """

        self._updated_since = updated_since

    @property
    def listed_since(self):
        """Gets the listed_since of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The listed_since of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._listed_since

    @listed_since.setter
    def listed_since(self, listed_since):
        """Sets the listed_since of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param listed_since: The listed_since of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: datetime
        """

        self._listed_since = listed_since

    @property
    def include_inspection_aggregations(self):
        """Gets the include_inspection_aggregations of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The include_inspection_aggregations of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: bool
        """
        return self._include_inspection_aggregations

    @include_inspection_aggregations.setter
    def include_inspection_aggregations(self, include_inspection_aggregations):
        """Sets the include_inspection_aggregations of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param include_inspection_aggregations: The include_inspection_aggregations of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: bool
        """

        self._include_inspection_aggregations = include_inspection_aggregations

    @property
    def tags(self):
        """Gets the tags of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The tags of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: list[DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param tags: The tags of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: list[DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsTagQuery]
        """

        self._tags = tags

    @property
    def page_number(self):
        """Gets the page_number of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501


        :return: The page_number of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.


        :param page_number: The page_number of this DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
