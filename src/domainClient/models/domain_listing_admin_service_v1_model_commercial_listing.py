# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelCommercialListing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'occupancy_type': 'str',
        'listing_action': 'str',
        'contact_preference': 'str',
        'price': 'DomainListingAdminServiceV1ModelCommercialPrice',
        'lease': 'DomainListingAdminServiceV1ModelLease',
        'eoi': 'DomainListingAdminServiceV1ModelEOI',
        'tenant': 'DomainListingAdminServiceV1ModelTenant',
        'tender': 'DomainListingAdminServiceV1ModelTender',
        'annual_return': 'int',
        'units_offered': 'int',
        'unit_details': 'list[DomainListingAdminServiceV1ModelSpecificUnitDetail]',
        'nabers': 'float',
        'sale_terms': 'str',
        'auction': 'DomainListingAdminServiceV1ModelCommercialAuction',
        'property_details': 'DomainListingAdminServiceV1ModelCommercialProperty',
        'conjunction_agents': 'list[DomainListingAdminServiceV1ModelAgentContact]',
        'highlights': 'list[str]',
        'under_offer_or_contract': 'bool',
        'domain_ad_id': 'int',
        'domain_agency_id': 'int',
        'provider_ad_id': 'str',
        'features': 'str',
        'description': 'str',
        'summary': 'str',
        'inspection_details': 'DomainListingAdminServiceV1ModelInspectionDetails',
        'media': 'list[DomainListingAdminServiceV1ModelPropertyMedia]',
        'contacts': 'list[DomainListingAdminServiceV1ModelContact]',
        'other_enquiry_email': 'str',
        'receive_emails_to_default_address': 'bool',
        'is_rural': 'bool',
        'supplementary': 'list[DomainListingAdminServiceV1ModelListingSupplementary]'
    }

    attribute_map = {
        'occupancy_type': 'occupancyType',
        'listing_action': 'listingAction',
        'contact_preference': 'contactPreference',
        'price': 'price',
        'lease': 'lease',
        'eoi': 'eoi',
        'tenant': 'tenant',
        'tender': 'tender',
        'annual_return': 'annualReturn',
        'units_offered': 'unitsOffered',
        'unit_details': 'unitDetails',
        'nabers': 'nabers',
        'sale_terms': 'saleTerms',
        'auction': 'auction',
        'property_details': 'propertyDetails',
        'conjunction_agents': 'conjunctionAgents',
        'highlights': 'highlights',
        'under_offer_or_contract': 'underOfferOrContract',
        'domain_ad_id': 'domainAdId',
        'domain_agency_id': 'domainAgencyID',
        'provider_ad_id': 'providerAdId',
        'features': 'features',
        'description': 'description',
        'summary': 'summary',
        'inspection_details': 'inspectionDetails',
        'media': 'media',
        'contacts': 'contacts',
        'other_enquiry_email': 'otherEnquiryEmail',
        'receive_emails_to_default_address': 'receiveEmailsToDefaultAddress',
        'is_rural': 'isRural',
        'supplementary': 'supplementary'
    }

    def __init__(self, occupancy_type=None, listing_action=None, contact_preference=None, price=None, lease=None, eoi=None, tenant=None, tender=None, annual_return=None, units_offered=None, unit_details=None, nabers=None, sale_terms=None, auction=None, property_details=None, conjunction_agents=None, highlights=None, under_offer_or_contract=None, domain_ad_id=None, domain_agency_id=None, provider_ad_id=None, features=None, description=None, summary=None, inspection_details=None, media=None, contacts=None, other_enquiry_email=None, receive_emails_to_default_address=None, is_rural=None, supplementary=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelCommercialListing - a model defined in Swagger"""  # noqa: E501

        self._occupancy_type = None
        self._listing_action = None
        self._contact_preference = None
        self._price = None
        self._lease = None
        self._eoi = None
        self._tenant = None
        self._tender = None
        self._annual_return = None
        self._units_offered = None
        self._unit_details = None
        self._nabers = None
        self._sale_terms = None
        self._auction = None
        self._property_details = None
        self._conjunction_agents = None
        self._highlights = None
        self._under_offer_or_contract = None
        self._domain_ad_id = None
        self._domain_agency_id = None
        self._provider_ad_id = None
        self._features = None
        self._description = None
        self._summary = None
        self._inspection_details = None
        self._media = None
        self._contacts = None
        self._other_enquiry_email = None
        self._receive_emails_to_default_address = None
        self._is_rural = None
        self._supplementary = None
        self.discriminator = None

        if occupancy_type is not None:
            self.occupancy_type = occupancy_type
        if listing_action is not None:
            self.listing_action = listing_action
        if contact_preference is not None:
            self.contact_preference = contact_preference
        if price is not None:
            self.price = price
        if lease is not None:
            self.lease = lease
        if eoi is not None:
            self.eoi = eoi
        if tenant is not None:
            self.tenant = tenant
        if tender is not None:
            self.tender = tender
        if annual_return is not None:
            self.annual_return = annual_return
        if units_offered is not None:
            self.units_offered = units_offered
        if unit_details is not None:
            self.unit_details = unit_details
        if nabers is not None:
            self.nabers = nabers
        if sale_terms is not None:
            self.sale_terms = sale_terms
        if auction is not None:
            self.auction = auction
        if property_details is not None:
            self.property_details = property_details
        if conjunction_agents is not None:
            self.conjunction_agents = conjunction_agents
        if highlights is not None:
            self.highlights = highlights
        if under_offer_or_contract is not None:
            self.under_offer_or_contract = under_offer_or_contract
        if domain_ad_id is not None:
            self.domain_ad_id = domain_ad_id
        if domain_agency_id is not None:
            self.domain_agency_id = domain_agency_id
        if provider_ad_id is not None:
            self.provider_ad_id = provider_ad_id
        if features is not None:
            self.features = features
        if description is not None:
            self.description = description
        if summary is not None:
            self.summary = summary
        if inspection_details is not None:
            self.inspection_details = inspection_details
        if media is not None:
            self.media = media
        if contacts is not None:
            self.contacts = contacts
        if other_enquiry_email is not None:
            self.other_enquiry_email = other_enquiry_email
        if receive_emails_to_default_address is not None:
            self.receive_emails_to_default_address = receive_emails_to_default_address
        if is_rural is not None:
            self.is_rural = is_rural
        if supplementary is not None:
            self.supplementary = supplementary

    @property
    def occupancy_type(self):
        """Gets the occupancy_type of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Occupancy. Can be 'Tenanted', 'Vacant'  # noqa: E501

        :return: The occupancy_type of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: str
        """
        return self._occupancy_type

    @occupancy_type.setter
    def occupancy_type(self, occupancy_type):
        """Sets the occupancy_type of this DomainListingAdminServiceV1ModelCommercialListing.

        Occupancy. Can be 'Tenanted', 'Vacant'  # noqa: E501

        :param occupancy_type: The occupancy_type of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: str
        """
        allowed_values = ["tenanted", "vacant"]  # noqa: E501
        if occupancy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `occupancy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(occupancy_type, allowed_values)
            )

        self._occupancy_type = occupancy_type

    @property
    def listing_action(self):
        """Gets the listing_action of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Sale or Rent  # noqa: E501

        :return: The listing_action of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: str
        """
        return self._listing_action

    @listing_action.setter
    def listing_action(self, listing_action):
        """Sets the listing_action of this DomainListingAdminServiceV1ModelCommercialListing.

        Sale or Rent  # noqa: E501

        :param listing_action: The listing_action of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: str
        """
        allowed_values = ["sale", "rent", "share", "saleAndLease"]  # noqa: E501
        if listing_action not in allowed_values:
            raise ValueError(
                "Invalid value for `listing_action` ({0}), must be one of {1}"  # noqa: E501
                .format(listing_action, allowed_values)
            )

        self._listing_action = listing_action

    @property
    def contact_preference(self):
        """Gets the contact_preference of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Indicates the listing preferred contact method. Default by both phone and email if not provided.  # noqa: E501

        :return: The contact_preference of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: str
        """
        return self._contact_preference

    @contact_preference.setter
    def contact_preference(self, contact_preference):
        """Sets the contact_preference of this DomainListingAdminServiceV1ModelCommercialListing.

        Indicates the listing preferred contact method. Default by both phone and email if not provided.  # noqa: E501

        :param contact_preference: The contact_preference of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: str
        """
        allowed_values = ["byPhone"]  # noqa: E501
        if contact_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(contact_preference, allowed_values)
            )

        self._contact_preference = contact_preference

    @property
    def price(self):
        """Gets the price of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Listing Price Information  # noqa: E501

        :return: The price of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelCommercialPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DomainListingAdminServiceV1ModelCommercialListing.

        Listing Price Information  # noqa: E501

        :param price: The price of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelCommercialPrice
        """

        self._price = price

    @property
    def lease(self):
        """Gets the lease of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Lease Information  # noqa: E501

        :return: The lease of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelLease
        """
        return self._lease

    @lease.setter
    def lease(self, lease):
        """Sets the lease of this DomainListingAdminServiceV1ModelCommercialListing.

        Lease Information  # noqa: E501

        :param lease: The lease of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelLease
        """

        self._lease = lease

    @property
    def eoi(self):
        """Gets the eoi of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Expression of Interest  # noqa: E501

        :return: The eoi of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelEOI
        """
        return self._eoi

    @eoi.setter
    def eoi(self, eoi):
        """Sets the eoi of this DomainListingAdminServiceV1ModelCommercialListing.

        Expression of Interest  # noqa: E501

        :param eoi: The eoi of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelEOI
        """

        self._eoi = eoi

    @property
    def tenant(self):
        """Gets the tenant of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Information about current Tenant  # noqa: E501

        :return: The tenant of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelTenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this DomainListingAdminServiceV1ModelCommercialListing.

        Information about current Tenant  # noqa: E501

        :param tenant: The tenant of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelTenant
        """

        self._tenant = tenant

    @property
    def tender(self):
        """Gets the tender of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Tender Information  # noqa: E501

        :return: The tender of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelTender
        """
        return self._tender

    @tender.setter
    def tender(self, tender):
        """Sets the tender of this DomainListingAdminServiceV1ModelCommercialListing.

        Tender Information  # noqa: E501

        :param tender: The tender of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelTender
        """

        self._tender = tender

    @property
    def annual_return(self):
        """Gets the annual_return of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Integer value of percentage return on this property or business.  # noqa: E501

        :return: The annual_return of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: int
        """
        return self._annual_return

    @annual_return.setter
    def annual_return(self, annual_return):
        """Sets the annual_return of this DomainListingAdminServiceV1ModelCommercialListing.

        Integer value of percentage return on this property or business.  # noqa: E501

        :param annual_return: The annual_return of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: int
        """

        self._annual_return = annual_return

    @property
    def units_offered(self):
        """Gets the units_offered of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Integer value of units offered for sale or lease  # noqa: E501

        :return: The units_offered of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: int
        """
        return self._units_offered

    @units_offered.setter
    def units_offered(self, units_offered):
        """Sets the units_offered of this DomainListingAdminServiceV1ModelCommercialListing.

        Integer value of units offered for sale or lease  # noqa: E501

        :param units_offered: The units_offered of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: int
        """

        self._units_offered = units_offered

    @property
    def unit_details(self):
        """Gets the unit_details of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Units details  # noqa: E501

        :return: The unit_details of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: list[DomainListingAdminServiceV1ModelSpecificUnitDetail]
        """
        return self._unit_details

    @unit_details.setter
    def unit_details(self, unit_details):
        """Sets the unit_details of this DomainListingAdminServiceV1ModelCommercialListing.

        Units details  # noqa: E501

        :param unit_details: The unit_details of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: list[DomainListingAdminServiceV1ModelSpecificUnitDetail]
        """

        self._unit_details = unit_details

    @property
    def nabers(self):
        """Gets the nabers of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        The NABERS Rating is the energy efficiency rating that the property has been measured to have.               This rating is measured in increments of .5 and can range from 0 to 6.               The NABERS rating is required for spaces within office buildings of 1000 square metres or more.              For more information on the NABERS rating system please visit http://www.nabers.gov.au  # noqa: E501

        :return: The nabers of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: float
        """
        return self._nabers

    @nabers.setter
    def nabers(self, nabers):
        """Sets the nabers of this DomainListingAdminServiceV1ModelCommercialListing.

        The NABERS Rating is the energy efficiency rating that the property has been measured to have.               This rating is measured in increments of .5 and can range from 0 to 6.               The NABERS rating is required for spaces within office buildings of 1000 square metres or more.              For more information on the NABERS rating system please visit http://www.nabers.gov.au  # noqa: E501

        :param nabers: The nabers of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: float
        """

        self._nabers = nabers

    @property
    def sale_terms(self):
        """Gets the sale_terms of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Information relating to aspects of the sale, such as required deposit, settlement time. Up to 50 characters, optional. Ignored for lease listings  # noqa: E501

        :return: The sale_terms of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: str
        """
        return self._sale_terms

    @sale_terms.setter
    def sale_terms(self, sale_terms):
        """Sets the sale_terms of this DomainListingAdminServiceV1ModelCommercialListing.

        Information relating to aspects of the sale, such as required deposit, settlement time. Up to 50 characters, optional. Ignored for lease listings  # noqa: E501

        :param sale_terms: The sale_terms of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: str
        """

        self._sale_terms = sale_terms

    @property
    def auction(self):
        """Gets the auction of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Auction Information  # noqa: E501

        :return: The auction of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelCommercialAuction
        """
        return self._auction

    @auction.setter
    def auction(self, auction):
        """Sets the auction of this DomainListingAdminServiceV1ModelCommercialListing.

        Auction Information  # noqa: E501

        :param auction: The auction of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelCommercialAuction
        """

        self._auction = auction

    @property
    def property_details(self):
        """Gets the property_details of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Property Details. Either Area or LandArea must be supplied.  # noqa: E501

        :return: The property_details of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelCommercialProperty
        """
        return self._property_details

    @property_details.setter
    def property_details(self, property_details):
        """Sets the property_details of this DomainListingAdminServiceV1ModelCommercialListing.

        Property Details. Either Area or LandArea must be supplied.  # noqa: E501

        :param property_details: The property_details of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelCommercialProperty
        """

        self._property_details = property_details

    @property
    def conjunction_agents(self):
        """Gets the conjunction_agents of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        List of conjunction agents  # noqa: E501

        :return: The conjunction_agents of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: list[DomainListingAdminServiceV1ModelAgentContact]
        """
        return self._conjunction_agents

    @conjunction_agents.setter
    def conjunction_agents(self, conjunction_agents):
        """Sets the conjunction_agents of this DomainListingAdminServiceV1ModelCommercialListing.

        List of conjunction agents  # noqa: E501

        :param conjunction_agents: The conjunction_agents of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: list[DomainListingAdminServiceV1ModelAgentContact]
        """

        self._conjunction_agents = conjunction_agents

    @property
    def highlights(self):
        """Gets the highlights of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Highlight Items  # noqa: E501

        :return: The highlights of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: list[str]
        """
        return self._highlights

    @highlights.setter
    def highlights(self, highlights):
        """Sets the highlights of this DomainListingAdminServiceV1ModelCommercialListing.

        Highlight Items  # noqa: E501

        :param highlights: The highlights of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: list[str]
        """

        self._highlights = highlights

    @property
    def under_offer_or_contract(self):
        """Gets the under_offer_or_contract of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Set for Sale listings only  # noqa: E501

        :return: The under_offer_or_contract of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: bool
        """
        return self._under_offer_or_contract

    @under_offer_or_contract.setter
    def under_offer_or_contract(self, under_offer_or_contract):
        """Sets the under_offer_or_contract of this DomainListingAdminServiceV1ModelCommercialListing.

        Set for Sale listings only  # noqa: E501

        :param under_offer_or_contract: The under_offer_or_contract of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: bool
        """

        self._under_offer_or_contract = under_offer_or_contract

    @property
    def domain_ad_id(self):
        """Gets the domain_ad_id of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Domain Ad ID, not applicable for creating new ads.              Mandatory when updating a listing that belongs to an agency that              is in the process of being migrated between listing providers.  # noqa: E501

        :return: The domain_ad_id of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: int
        """
        return self._domain_ad_id

    @domain_ad_id.setter
    def domain_ad_id(self, domain_ad_id):
        """Sets the domain_ad_id of this DomainListingAdminServiceV1ModelCommercialListing.

        Domain Ad ID, not applicable for creating new ads.              Mandatory when updating a listing that belongs to an agency that              is in the process of being migrated between listing providers.  # noqa: E501

        :param domain_ad_id: The domain_ad_id of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: int
        """

        self._domain_ad_id = domain_ad_id

    @property
    def domain_agency_id(self):
        """Gets the domain_agency_id of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        The Domain agency ID number  # noqa: E501

        :return: The domain_agency_id of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: int
        """
        return self._domain_agency_id

    @domain_agency_id.setter
    def domain_agency_id(self, domain_agency_id):
        """Sets the domain_agency_id of this DomainListingAdminServiceV1ModelCommercialListing.

        The Domain agency ID number  # noqa: E501

        :param domain_agency_id: The domain_agency_id of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: int
        """

        self._domain_agency_id = domain_agency_id

    @property
    def provider_ad_id(self):
        """Gets the provider_ad_id of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        External ad ID up to 30 characters will be stored. This value is used to identify an ad for updates and should be unique for listing provider  # noqa: E501

        :return: The provider_ad_id of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: str
        """
        return self._provider_ad_id

    @provider_ad_id.setter
    def provider_ad_id(self, provider_ad_id):
        """Sets the provider_ad_id of this DomainListingAdminServiceV1ModelCommercialListing.

        External ad ID up to 30 characters will be stored. This value is used to identify an ad for updates and should be unique for listing provider  # noqa: E501

        :param provider_ad_id: The provider_ad_id of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: str
        """

        self._provider_ad_id = provider_ad_id

    @property
    def features(self):
        """Gets the features of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.              INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.              OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.              LOCATION: Ground floor, Water Views, North Facing, City Views.              ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels  # noqa: E501

        :return: The features of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DomainListingAdminServiceV1ModelCommercialListing.

        Comma-separated list of features. 1000 characters in length. Select as appropriate or write your own.              INSIDE: Air conditioning, Ensuite, Floorboards, Indoor Spa, Gym, Alarm System, Intercom, Built in wardrobes, Furnished, Internal Laundry, Pets allowed, Cable or Satellite, Gas, Broadband internet access, Bath, Fireplace(s), Separate Dining Room, Heating, Dishwasher, Study.              OUTSIDE: Tennis Court, Secure Parking, Shed, Fully fenced, Balcony / Deck, Garden / Courtyard, Swimming Pool, Outdoor Spa.              LOCATION: Ground floor, Water Views, North Facing, City Views.              ECO FRIENDLY: Double glazed windows, Energy efficient appliances, Water efficient appliances, Wall / ceiling insulation, Rainwater storage tank, Greywater system, Water efficient fixtures, Solar hot water, Solar panels  # noqa: E501

        :param features: The features of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: str
        """

        self._features = features

    @property
    def description(self):
        """Gets the description of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Description of the property.              6000 characters in length. The following HTML elements are permitted: &amp;lt;br /&amp;gt;, &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;, &amp;amp;nbsp;. HTML must be well-formed.              Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade  # noqa: E501

        :return: The description of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DomainListingAdminServiceV1ModelCommercialListing.

        Description of the property.              6000 characters in length. The following HTML elements are permitted: &amp;lt;br /&amp;gt;, &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;, &amp;amp;nbsp;. HTML must be well-formed.              Carriage Returns are interpreted as line breaks. Foreign characters must be HTML encoded, e.g., façade for façade  # noqa: E501

        :param description: The description of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def summary(self):
        """Gets the summary of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        'Headline' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.  # noqa: E501

        :return: The summary of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DomainListingAdminServiceV1ModelCommercialListing.

        'Headline' Any HTML stripped out.  If the Summary is less than 80 characters long then the description is concatenated to it and the total trimmed to 250 characters.  # noqa: E501

        :param summary: The summary of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def inspection_details(self):
        """Gets the inspection_details of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        The inspection details of the listing  # noqa: E501

        :return: The inspection_details of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelInspectionDetails
        """
        return self._inspection_details

    @inspection_details.setter
    def inspection_details(self, inspection_details):
        """Sets the inspection_details of this DomainListingAdminServiceV1ModelCommercialListing.

        The inspection details of the listing  # noqa: E501

        :param inspection_details: The inspection_details of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelInspectionDetails
        """

        self._inspection_details = inspection_details

    @property
    def media(self):
        """Gets the media of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.  # noqa: E501

        :return: The media of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: list[DomainListingAdminServiceV1ModelPropertyMedia]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this DomainListingAdminServiceV1ModelCommercialListing.

        Links to VideoURL, virtual tour or weblink. Maximum length of media URLs is 255 characters.  # noqa: E501

        :param media: The media of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: list[DomainListingAdminServiceV1ModelPropertyMedia]
        """

        self._media = media

    @property
    def contacts(self):
        """Gets the contacts of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Minimum required attributes: First name, last name and E-mail.              If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.              Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.  # noqa: E501

        :return: The contacts of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: list[DomainListingAdminServiceV1ModelContact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this DomainListingAdminServiceV1ModelCommercialListing.

        Minimum required attributes: First name, last name and E-mail.              If the DomainAgentId is provided, contact information will be based on the existing agent found for that id.              Otherwise first name, last name and email will be used to find the matching contact. A new contact will be created if no contact can be found.  # noqa: E501

        :param contacts: The contacts of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: list[DomainListingAdminServiceV1ModelContact]
        """

        self._contacts = contacts

    @property
    def other_enquiry_email(self):
        """Gets the other_enquiry_email of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Sets an additional Email Address to which enquiries on the Listing will be sent  # noqa: E501

        :return: The other_enquiry_email of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: str
        """
        return self._other_enquiry_email

    @other_enquiry_email.setter
    def other_enquiry_email(self, other_enquiry_email):
        """Sets the other_enquiry_email of this DomainListingAdminServiceV1ModelCommercialListing.

        Sets an additional Email Address to which enquiries on the Listing will be sent  # noqa: E501

        :param other_enquiry_email: The other_enquiry_email of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: str
        """

        self._other_enquiry_email = other_enquiry_email

    @property
    def receive_emails_to_default_address(self):
        """Gets the receive_emails_to_default_address of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Send email enquiries to the default address for this listing type  # noqa: E501

        :return: The receive_emails_to_default_address of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: bool
        """
        return self._receive_emails_to_default_address

    @receive_emails_to_default_address.setter
    def receive_emails_to_default_address(self, receive_emails_to_default_address):
        """Sets the receive_emails_to_default_address of this DomainListingAdminServiceV1ModelCommercialListing.

        Send email enquiries to the default address for this listing type  # noqa: E501

        :param receive_emails_to_default_address: The receive_emails_to_default_address of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: bool
        """

        self._receive_emails_to_default_address = receive_emails_to_default_address

    @property
    def is_rural(self):
        """Gets the is_rural of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        True if the property is rural  # noqa: E501

        :return: The is_rural of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: bool
        """
        return self._is_rural

    @is_rural.setter
    def is_rural(self, is_rural):
        """Sets the is_rural of this DomainListingAdminServiceV1ModelCommercialListing.

        True if the property is rural  # noqa: E501

        :param is_rural: The is_rural of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: bool
        """

        self._is_rural = is_rural

    @property
    def supplementary(self):
        """Gets the supplementary of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501

        Rural attributes                            *Improvements* (optional)                            Available `types` (fixed list, optional):              * Machinery Shed              * Shearing Shed              * Workshop              * Shearers Quarters              * Silos              * Other Housing              * Managers Accommodation                            *Fencing* (optional)                            `description` (string, optional): free text fencing description, maximum 250 characters.                            *Yards* (optional)                            Available `types` (fixed list, optional):              * Sheep              * Cattle                            *Homestead* (optional)                            `description` (string, optional): description of the homestead and construction, maximum 250 characters.                            `metadata` (optional)              * `area` (decimal, optional): homestead area in square metres.                            Available `types` (fixed list, optional):              * Office              * Ensuite              * Tennis Court              * Mains Gas              * Floorboards              * Internal Laundry                            *Water* (optional)                            `description` (string, optional): water comments, maximum 250 characters.                            Available `types` (fixed list, optional):              * Tank              * Well              * Reticulated              * Bores              * Springs              * Creeks              * Dams              * River                            *Crops* (optional)                            `description` (string, optional): description of the crops, maximum 250 characters.                            `metadata` (optional)              * `croppedAnnually` (decimal, optional): average annual area cropped in hectares.              * `fallowAnnually` (decimal, optional): average annual fallow area in hectares.              * `pastures` (string, optional): description of pastures available, maximum 250 characters.                            *Livestock* (optional)                            `description` (string, optional): additional comments, maximum 250 characters.                            `metadata` (optional)              * `capacity` (decimal, optional): property carrying capacity in DSE (unit of carry capacity).                            Available `types` (fixed list, optional):              * Sheep              * Pigs              * Cattle              * Poultry              * Horses              * Exotic              * Goats              * Stud                            *Inclusions* (optional)                            `description` (string, optional): description of plant and machinery included in sale, maximum 250 characters.                            `metadata` (optional)              * `livestock` (string, optional): description of livestock included in sale, maximum 250 characters.              * `crop` (string, optional): description of crops included in sale, maximum 250 characters.                            *Irrigation* (optional)                            `description` (string, optional): irrigation comments, maximum 250 characters                            `metadata` (optional)              * `rainfall` (decimal, optional): annual rainfall in millimeters.  # noqa: E501

        :return: The supplementary of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :rtype: list[DomainListingAdminServiceV1ModelListingSupplementary]
        """
        return self._supplementary

    @supplementary.setter
    def supplementary(self, supplementary):
        """Sets the supplementary of this DomainListingAdminServiceV1ModelCommercialListing.

        Rural attributes                            *Improvements* (optional)                            Available `types` (fixed list, optional):              * Machinery Shed              * Shearing Shed              * Workshop              * Shearers Quarters              * Silos              * Other Housing              * Managers Accommodation                            *Fencing* (optional)                            `description` (string, optional): free text fencing description, maximum 250 characters.                            *Yards* (optional)                            Available `types` (fixed list, optional):              * Sheep              * Cattle                            *Homestead* (optional)                            `description` (string, optional): description of the homestead and construction, maximum 250 characters.                            `metadata` (optional)              * `area` (decimal, optional): homestead area in square metres.                            Available `types` (fixed list, optional):              * Office              * Ensuite              * Tennis Court              * Mains Gas              * Floorboards              * Internal Laundry                            *Water* (optional)                            `description` (string, optional): water comments, maximum 250 characters.                            Available `types` (fixed list, optional):              * Tank              * Well              * Reticulated              * Bores              * Springs              * Creeks              * Dams              * River                            *Crops* (optional)                            `description` (string, optional): description of the crops, maximum 250 characters.                            `metadata` (optional)              * `croppedAnnually` (decimal, optional): average annual area cropped in hectares.              * `fallowAnnually` (decimal, optional): average annual fallow area in hectares.              * `pastures` (string, optional): description of pastures available, maximum 250 characters.                            *Livestock* (optional)                            `description` (string, optional): additional comments, maximum 250 characters.                            `metadata` (optional)              * `capacity` (decimal, optional): property carrying capacity in DSE (unit of carry capacity).                            Available `types` (fixed list, optional):              * Sheep              * Pigs              * Cattle              * Poultry              * Horses              * Exotic              * Goats              * Stud                            *Inclusions* (optional)                            `description` (string, optional): description of plant and machinery included in sale, maximum 250 characters.                            `metadata` (optional)              * `livestock` (string, optional): description of livestock included in sale, maximum 250 characters.              * `crop` (string, optional): description of crops included in sale, maximum 250 characters.                            *Irrigation* (optional)                            `description` (string, optional): irrigation comments, maximum 250 characters                            `metadata` (optional)              * `rainfall` (decimal, optional): annual rainfall in millimeters.  # noqa: E501

        :param supplementary: The supplementary of this DomainListingAdminServiceV1ModelCommercialListing.  # noqa: E501
        :type: list[DomainListingAdminServiceV1ModelListingSupplementary]
        """

        self._supplementary = supplementary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelCommercialListing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelCommercialListing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
