# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelReportVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operations': 'list[str]',
        'version_id': 'str',
        'processed_date': 'str',
        'data_url': 'str',
        'process_count': 'int'
    }

    attribute_map = {
        'operations': 'operations',
        'version_id': 'versionId',
        'processed_date': 'processedDate',
        'data_url': 'dataUrl',
        'process_count': 'processCount'
    }

    def __init__(self, operations=None, version_id=None, processed_date=None, data_url=None, process_count=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelReportVersion - a model defined in Swagger"""  # noqa: E501

        self._operations = None
        self._version_id = None
        self._processed_date = None
        self._data_url = None
        self._process_count = None
        self.discriminator = None

        if operations is not None:
            self.operations = operations
        if version_id is not None:
            self.version_id = version_id
        if processed_date is not None:
            self.processed_date = processed_date
        if data_url is not None:
            self.data_url = data_url
        if process_count is not None:
            self.process_count = process_count

    @property
    def operations(self):
        """Gets the operations of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501

        Operations performed on a completed version ['none', 'dataReceived', 'processStarted', 'priceValidated', 'geoCoded', 'pdfsProcessed', 'primaryImagesProcessed', 'allImagesProcessed', 'listingDataSaved', 'listingDeleted', 'reportEmailSent', 'offMarketProcessed', 'listingIndexed', 'propertyTypesProcessed', 'contactsProcessed', 'messagesPublished', 'listingSentLive', 'listingUpdated', 'listingRestored', 'allImageSizesProcessed', 'patchProcessed', 'externalSaleProcessed', 'soiProcessed', 'duplicateDetection', 'listingMerged', 'supplementaryProcessed', 'listingHeldInMigration', 'linkedProjectsProcessed', 'linkedListingsProcessed', 'allMediaProcessed', 'projectProcessed'].  # noqa: E501

        :return: The operations of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501
        :rtype: list[str]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this DomainListingAdminServiceV1ModelReportVersion.

        Operations performed on a completed version ['none', 'dataReceived', 'processStarted', 'priceValidated', 'geoCoded', 'pdfsProcessed', 'primaryImagesProcessed', 'allImagesProcessed', 'listingDataSaved', 'listingDeleted', 'reportEmailSent', 'offMarketProcessed', 'listingIndexed', 'propertyTypesProcessed', 'contactsProcessed', 'messagesPublished', 'listingSentLive', 'listingUpdated', 'listingRestored', 'allImageSizesProcessed', 'patchProcessed', 'externalSaleProcessed', 'soiProcessed', 'duplicateDetection', 'listingMerged', 'supplementaryProcessed', 'listingHeldInMigration', 'linkedProjectsProcessed', 'linkedListingsProcessed', 'allMediaProcessed', 'projectProcessed'].  # noqa: E501

        :param operations: The operations of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501
        :type: list[str]
        """

        self._operations = operations

    @property
    def version_id(self):
        """Gets the version_id of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501

        Version Id  # noqa: E501

        :return: The version_id of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this DomainListingAdminServiceV1ModelReportVersion.

        Version Id  # noqa: E501

        :param version_id: The version_id of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def processed_date(self):
        """Gets the processed_date of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501

        Date this version of data been processed  # noqa: E501

        :return: The processed_date of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501
        :rtype: str
        """
        return self._processed_date

    @processed_date.setter
    def processed_date(self, processed_date):
        """Sets the processed_date of this DomainListingAdminServiceV1ModelReportVersion.

        Date this version of data been processed  # noqa: E501

        :param processed_date: The processed_date of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501
        :type: str
        """

        self._processed_date = processed_date

    @property
    def data_url(self):
        """Gets the data_url of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501

        Url to access s3 file  # noqa: E501

        :return: The data_url of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501
        :rtype: str
        """
        return self._data_url

    @data_url.setter
    def data_url(self, data_url):
        """Sets the data_url of this DomainListingAdminServiceV1ModelReportVersion.

        Url to access s3 file  # noqa: E501

        :param data_url: The data_url of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501
        :type: str
        """

        self._data_url = data_url

    @property
    def process_count(self):
        """Gets the process_count of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501

        Retry count  # noqa: E501

        :return: The process_count of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501
        :rtype: int
        """
        return self._process_count

    @process_count.setter
    def process_count(self, process_count):
        """Sets the process_count of this DomainListingAdminServiceV1ModelReportVersion.

        Retry count  # noqa: E501

        :param process_count: The process_count of this DomainListingAdminServiceV1ModelReportVersion.  # noqa: E501
        :type: int
        """

        self._process_count = process_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelReportVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelReportVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
