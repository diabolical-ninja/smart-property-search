# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelTenant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lease_start': 'datetime',
        'lease_end': 'datetime',
        'name': 'str',
        'rental_details': 'str',
        'lease_options': 'str',
        'tenant_info_term_of_lease_from': 'int',
        'tenant_info_term_of_lease_to': 'int',
        'lease_date_variable': 'bool'
    }

    attribute_map = {
        'lease_start': 'leaseStart',
        'lease_end': 'leaseEnd',
        'name': 'name',
        'rental_details': 'rentalDetails',
        'lease_options': 'leaseOptions',
        'tenant_info_term_of_lease_from': 'tenantInfoTermOfLeaseFrom',
        'tenant_info_term_of_lease_to': 'tenantInfoTermOfLeaseTo',
        'lease_date_variable': 'leaseDateVariable'
    }

    def __init__(self, lease_start=None, lease_end=None, name=None, rental_details=None, lease_options=None, tenant_info_term_of_lease_from=None, tenant_info_term_of_lease_to=None, lease_date_variable=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelTenant - a model defined in Swagger"""  # noqa: E501

        self._lease_start = None
        self._lease_end = None
        self._name = None
        self._rental_details = None
        self._lease_options = None
        self._tenant_info_term_of_lease_from = None
        self._tenant_info_term_of_lease_to = None
        self._lease_date_variable = None
        self.discriminator = None

        if lease_start is not None:
            self.lease_start = lease_start
        if lease_end is not None:
            self.lease_end = lease_end
        if name is not None:
            self.name = name
        if rental_details is not None:
            self.rental_details = rental_details
        if lease_options is not None:
            self.lease_options = lease_options
        if tenant_info_term_of_lease_from is not None:
            self.tenant_info_term_of_lease_from = tenant_info_term_of_lease_from
        if tenant_info_term_of_lease_to is not None:
            self.tenant_info_term_of_lease_to = tenant_info_term_of_lease_to
        if lease_date_variable is not None:
            self.lease_date_variable = lease_date_variable

    @property
    def lease_start(self):
        """Gets the lease_start of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501

        The date on which the tenants lease began, or is due to begin.  # noqa: E501

        :return: The lease_start of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :rtype: datetime
        """
        return self._lease_start

    @lease_start.setter
    def lease_start(self, lease_start):
        """Sets the lease_start of this DomainListingAdminServiceV1ModelTenant.

        The date on which the tenants lease began, or is due to begin.  # noqa: E501

        :param lease_start: The lease_start of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :type: datetime
        """

        self._lease_start = lease_start

    @property
    def lease_end(self):
        """Gets the lease_end of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501

        The date on which the tenants lease is due to end  # noqa: E501

        :return: The lease_end of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :rtype: datetime
        """
        return self._lease_end

    @lease_end.setter
    def lease_end(self, lease_end):
        """Sets the lease_end of this DomainListingAdminServiceV1ModelTenant.

        The date on which the tenants lease is due to end  # noqa: E501

        :param lease_end: The lease_end of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :type: datetime
        """

        self._lease_end = lease_end

    @property
    def name(self):
        """Gets the name of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501

        Name of the current tenant of the property, up to 100 characters  # noqa: E501

        :return: The name of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DomainListingAdminServiceV1ModelTenant.

        Name of the current tenant of the property, up to 100 characters  # noqa: E501

        :param name: The name of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rental_details(self):
        """Gets the rental_details of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501

        Information regarding current rental, up to 100 characters  # noqa: E501

        :return: The rental_details of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :rtype: str
        """
        return self._rental_details

    @rental_details.setter
    def rental_details(self, rental_details):
        """Sets the rental_details of this DomainListingAdminServiceV1ModelTenant.

        Information regarding current rental, up to 100 characters  # noqa: E501

        :param rental_details: The rental_details of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :type: str
        """

        self._rental_details = rental_details

    @property
    def lease_options(self):
        """Gets the lease_options of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501

        Leasing options available to a prospective tenant, up to 100 characters  # noqa: E501

        :return: The lease_options of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :rtype: str
        """
        return self._lease_options

    @lease_options.setter
    def lease_options(self, lease_options):
        """Sets the lease_options of this DomainListingAdminServiceV1ModelTenant.

        Leasing options available to a prospective tenant, up to 100 characters  # noqa: E501

        :param lease_options: The lease_options of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :type: str
        """

        self._lease_options = lease_options

    @property
    def tenant_info_term_of_lease_from(self):
        """Gets the tenant_info_term_of_lease_from of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501

        The from range of the tenant's current lease  # noqa: E501

        :return: The tenant_info_term_of_lease_from of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :rtype: int
        """
        return self._tenant_info_term_of_lease_from

    @tenant_info_term_of_lease_from.setter
    def tenant_info_term_of_lease_from(self, tenant_info_term_of_lease_from):
        """Sets the tenant_info_term_of_lease_from of this DomainListingAdminServiceV1ModelTenant.

        The from range of the tenant's current lease  # noqa: E501

        :param tenant_info_term_of_lease_from: The tenant_info_term_of_lease_from of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :type: int
        """

        self._tenant_info_term_of_lease_from = tenant_info_term_of_lease_from

    @property
    def tenant_info_term_of_lease_to(self):
        """Gets the tenant_info_term_of_lease_to of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501

        The to range of the tenant's current lease  # noqa: E501

        :return: The tenant_info_term_of_lease_to of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :rtype: int
        """
        return self._tenant_info_term_of_lease_to

    @tenant_info_term_of_lease_to.setter
    def tenant_info_term_of_lease_to(self, tenant_info_term_of_lease_to):
        """Sets the tenant_info_term_of_lease_to of this DomainListingAdminServiceV1ModelTenant.

        The to range of the tenant's current lease  # noqa: E501

        :param tenant_info_term_of_lease_to: The tenant_info_term_of_lease_to of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :type: int
        """

        self._tenant_info_term_of_lease_to = tenant_info_term_of_lease_to

    @property
    def lease_date_variable(self):
        """Gets the lease_date_variable of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501

        Is tenant lease date variable  # noqa: E501

        :return: The lease_date_variable of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :rtype: bool
        """
        return self._lease_date_variable

    @lease_date_variable.setter
    def lease_date_variable(self, lease_date_variable):
        """Sets the lease_date_variable of this DomainListingAdminServiceV1ModelTenant.

        Is tenant lease date variable  # noqa: E501

        :param lease_date_variable: The lease_date_variable of this DomainListingAdminServiceV1ModelTenant.  # noqa: E501
        :type: bool
        """

        self._lease_date_variable = lease_date_variable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelTenant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelTenant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
