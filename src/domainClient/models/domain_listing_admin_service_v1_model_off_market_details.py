# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelOffMarketDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'off_market_action': 'str',
        'action_date': 'datetime',
        'sold_details': 'DomainListingAdminServiceV1ModelSoldDetails',
        'leased_details': 'DomainListingAdminServiceV1ModelLeasedDetails',
        'comment': 'str'
    }

    attribute_map = {
        'off_market_action': 'offMarketAction',
        'action_date': 'actionDate',
        'sold_details': 'soldDetails',
        'leased_details': 'leasedDetails',
        'comment': 'comment'
    }

    def __init__(self, off_market_action=None, action_date=None, sold_details=None, leased_details=None, comment=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelOffMarketDetails - a model defined in Swagger"""  # noqa: E501

        self._off_market_action = None
        self._action_date = None
        self._sold_details = None
        self._leased_details = None
        self._comment = None
        self.discriminator = None

        if off_market_action is not None:
            self.off_market_action = off_market_action
        if action_date is not None:
            self.action_date = action_date
        if sold_details is not None:
            self.sold_details = sold_details
        if leased_details is not None:
            self.leased_details = leased_details
        if comment is not None:
            self.comment = comment

    @property
    def off_market_action(self):
        """Gets the off_market_action of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501

        Off Market Action  # noqa: E501

        :return: The off_market_action of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501
        :rtype: str
        """
        return self._off_market_action

    @off_market_action.setter
    def off_market_action(self, off_market_action):
        """Sets the off_market_action of this DomainListingAdminServiceV1ModelOffMarketDetails.

        Off Market Action  # noqa: E501

        :param off_market_action: The off_market_action of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["withDrawn", "sold", "leased"]  # noqa: E501
        if off_market_action not in allowed_values:
            raise ValueError(
                "Invalid value for `off_market_action` ({0}), must be one of {1}"  # noqa: E501
                .format(off_market_action, allowed_values)
            )

        self._off_market_action = off_market_action

    @property
    def action_date(self):
        """Gets the action_date of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501

        The date property was sold, leased or withdrawn  # noqa: E501

        :return: The action_date of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._action_date

    @action_date.setter
    def action_date(self, action_date):
        """Sets the action_date of this DomainListingAdminServiceV1ModelOffMarketDetails.

        The date property was sold, leased or withdrawn  # noqa: E501

        :param action_date: The action_date of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501
        :type: datetime
        """

        self._action_date = action_date

    @property
    def sold_details(self):
        """Gets the sold_details of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501

        Detail for sold listing  # noqa: E501

        :return: The sold_details of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelSoldDetails
        """
        return self._sold_details

    @sold_details.setter
    def sold_details(self, sold_details):
        """Sets the sold_details of this DomainListingAdminServiceV1ModelOffMarketDetails.

        Detail for sold listing  # noqa: E501

        :param sold_details: The sold_details of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelSoldDetails
        """

        self._sold_details = sold_details

    @property
    def leased_details(self):
        """Gets the leased_details of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501

        Detail for leased listing  # noqa: E501

        :return: The leased_details of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501
        :rtype: DomainListingAdminServiceV1ModelLeasedDetails
        """
        return self._leased_details

    @leased_details.setter
    def leased_details(self, leased_details):
        """Sets the leased_details of this DomainListingAdminServiceV1ModelOffMarketDetails.

        Detail for leased listing  # noqa: E501

        :param leased_details: The leased_details of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501
        :type: DomainListingAdminServiceV1ModelLeasedDetails
        """

        self._leased_details = leased_details

    @property
    def comment(self):
        """Gets the comment of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501

        Extra details for offmarket action  # noqa: E501

        :return: The comment of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DomainListingAdminServiceV1ModelOffMarketDetails.

        Extra details for offmarket action  # noqa: E501

        :param comment: The comment of this DomainListingAdminServiceV1ModelOffMarketDetails.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelOffMarketDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelOffMarketDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
