# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1PropertiesPhoto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_type': 'str',
        'advert_id': 'int',
        '_date': 'datetime',
        'full_url': 'str',
        'rank': 'int'
    }

    attribute_map = {
        'image_type': 'imageType',
        'advert_id': 'advertId',
        '_date': 'date',
        'full_url': 'fullUrl',
        'rank': 'rank'
    }

    def __init__(self, image_type=None, advert_id=None, _date=None, full_url=None, rank=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1PropertiesPhoto - a model defined in Swagger"""  # noqa: E501

        self._image_type = None
        self._advert_id = None
        self.__date = None
        self._full_url = None
        self._rank = None
        self.discriminator = None

        if image_type is not None:
            self.image_type = image_type
        if advert_id is not None:
            self.advert_id = advert_id
        if _date is not None:
            self._date = _date
        if full_url is not None:
            self.full_url = full_url
        if rank is not None:
            self.rank = rank

    @property
    def image_type(self):
        """Gets the image_type of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501

        The type of photo.  # noqa: E501

        :return: The image_type of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.

        The type of photo.  # noqa: E501

        :param image_type: The image_type of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501
        :type: str
        """
        allowed_values = ["Property", "Floorplan", "GoogleStreetView"]  # noqa: E501
        if image_type not in allowed_values:
            raise ValueError(
                "Invalid value for `image_type` ({0}), must be one of {1}"  # noqa: E501
                .format(image_type, allowed_values)
            )

        self._image_type = image_type

    @property
    def advert_id(self):
        """Gets the advert_id of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501

        Gets or sets the advert identifier from which this photo relates  # noqa: E501

        :return: The advert_id of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501
        :rtype: int
        """
        return self._advert_id

    @advert_id.setter
    def advert_id(self, advert_id):
        """Sets the advert_id of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.

        Gets or sets the advert identifier from which this photo relates  # noqa: E501

        :param advert_id: The advert_id of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501
        :type: int
        """

        self._advert_id = advert_id

    @property
    def _date(self):
        """Gets the _date of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501

        Gets or sets the date of the photo  # noqa: E501

        :return: The _date of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.

        Gets or sets the date of the photo  # noqa: E501

        :param _date: The _date of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def full_url(self):
        """Gets the full_url of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501

        The full size photo url.  # noqa: E501

        :return: The full_url of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501
        :rtype: str
        """
        return self._full_url

    @full_url.setter
    def full_url(self, full_url):
        """Sets the full_url of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.

        The full size photo url.  # noqa: E501

        :param full_url: The full_url of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501
        :type: str
        """

        self._full_url = full_url

    @property
    def rank(self):
        """Gets the rank of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501

        The rank of the photo. Lower rank = more preferred photo.  # noqa: E501

        :return: The rank of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.

        The rank of the photo. Lower rank = more preferred photo.  # noqa: E501

        :param rank: The rank of this DomainPublicAdapterWebApiModelsV1PropertiesPhoto.  # noqa: E501
        :type: int
        """

        self._rank = rank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1PropertiesPhoto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1PropertiesPhoto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
