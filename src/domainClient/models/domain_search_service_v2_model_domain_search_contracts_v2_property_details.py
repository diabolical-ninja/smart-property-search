# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'features': 'list[str]',
        'property_type': 'str',
        'all_property_types': 'list[str]',
        'bathrooms': 'float',
        'bedrooms': 'float',
        'carspaces': 'int',
        'unit_number': 'str',
        'street_number': 'str',
        'street': 'str',
        'area': 'str',
        'region': 'str',
        'suburb': 'str',
        'suburb_id': 'int',
        'postcode': 'str',
        'displayable_address': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'map_certainty': 'int',
        'land_area': 'float',
        'building_area': 'float',
        'only_show_properties': 'list[str]',
        'display_address_type': 'str',
        'is_rural': 'bool',
        'top_spot_keywords': 'list[str]',
        'is_new': 'bool',
        'tags': 'list[str]'
    }

    attribute_map = {
        'state': 'state',
        'features': 'features',
        'property_type': 'propertyType',
        'all_property_types': 'allPropertyTypes',
        'bathrooms': 'bathrooms',
        'bedrooms': 'bedrooms',
        'carspaces': 'carspaces',
        'unit_number': 'unitNumber',
        'street_number': 'streetNumber',
        'street': 'street',
        'area': 'area',
        'region': 'region',
        'suburb': 'suburb',
        'suburb_id': 'suburbId',
        'postcode': 'postcode',
        'displayable_address': 'displayableAddress',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'map_certainty': 'mapCertainty',
        'land_area': 'landArea',
        'building_area': 'buildingArea',
        'only_show_properties': 'onlyShowProperties',
        'display_address_type': 'displayAddressType',
        'is_rural': 'isRural',
        'top_spot_keywords': 'topSpotKeywords',
        'is_new': 'isNew',
        'tags': 'tags'
    }

    def __init__(self, state=None, features=None, property_type=None, all_property_types=None, bathrooms=None, bedrooms=None, carspaces=None, unit_number=None, street_number=None, street=None, area=None, region=None, suburb=None, suburb_id=None, postcode=None, displayable_address=None, latitude=None, longitude=None, map_certainty=None, land_area=None, building_area=None, only_show_properties=None, display_address_type=None, is_rural=None, top_spot_keywords=None, is_new=None, tags=None):  # noqa: E501
        """DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._features = None
        self._property_type = None
        self._all_property_types = None
        self._bathrooms = None
        self._bedrooms = None
        self._carspaces = None
        self._unit_number = None
        self._street_number = None
        self._street = None
        self._area = None
        self._region = None
        self._suburb = None
        self._suburb_id = None
        self._postcode = None
        self._displayable_address = None
        self._latitude = None
        self._longitude = None
        self._map_certainty = None
        self._land_area = None
        self._building_area = None
        self._only_show_properties = None
        self._display_address_type = None
        self._is_rural = None
        self._top_spot_keywords = None
        self._is_new = None
        self._tags = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if features is not None:
            self.features = features
        if property_type is not None:
            self.property_type = property_type
        if all_property_types is not None:
            self.all_property_types = all_property_types
        if bathrooms is not None:
            self.bathrooms = bathrooms
        if bedrooms is not None:
            self.bedrooms = bedrooms
        if carspaces is not None:
            self.carspaces = carspaces
        if unit_number is not None:
            self.unit_number = unit_number
        if street_number is not None:
            self.street_number = street_number
        if street is not None:
            self.street = street
        if area is not None:
            self.area = area
        if region is not None:
            self.region = region
        if suburb is not None:
            self.suburb = suburb
        if suburb_id is not None:
            self.suburb_id = suburb_id
        if postcode is not None:
            self.postcode = postcode
        if displayable_address is not None:
            self.displayable_address = displayable_address
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if map_certainty is not None:
            self.map_certainty = map_certainty
        if land_area is not None:
            self.land_area = land_area
        if building_area is not None:
            self.building_area = building_area
        if only_show_properties is not None:
            self.only_show_properties = only_show_properties
        if display_address_type is not None:
            self.display_address_type = display_address_type
        if is_rural is not None:
            self.is_rural = is_rural
        if top_spot_keywords is not None:
            self.top_spot_keywords = top_spot_keywords
        if is_new is not None:
            self.is_new = is_new
        if tags is not None:
            self.tags = tags

    @property
    def state(self):
        """Gets the state of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The state of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param state: The state of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACT", "NSW", "QLD", "VIC", "SA", "WA", "NT", "TAS"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def features(self):
        """Gets the features of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The features of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param features: The features of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Unrecognised", "AirConditioning", "BuiltInWardrobes", "CableOrSatellite", "Ensuite", "Floorboards", "Gas", "InternalLaundry", "PetsAllowed", "SecureParking", "SwimmingPool", "Furnished", "GroundFloor", "WaterViews", "NorthFacing", "CityViews", "IndoorSpa", "Gym", "AlarmSystem", "Intercom", "BroadbandInternetAccess", "Bath", "Fireplace", "SeparateDiningRoom", "Heating", "Dishwasher", "Study", "TennisCourt", "Shed", "FullyFenced", "BalconyDeck", "GardenCourtyard", "OutdoorSpa", "DoubleGlazedWindows", "EnergyEfficientAppliances", "WaterEfficientAppliances", "WallCeilingInsulation", "RainwaterStorageTank", "GreywaterSystem", "WaterEfficientFixtures", "SolarHotWater", "SolarPanels"]  # noqa: E501
        if not set(features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `features` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(features) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._features = features

    @property
    def property_type(self):
        """Gets the property_type of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The property_type of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._property_type

    @property_type.setter
    def property_type(self, property_type):
        """Sets the property_type of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param property_type: The property_type of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "AcreageSemiRural", "ApartmentUnitFlat", "Aquaculture", "BlockOfUnits", "CarSpace", "DairyFarming", "DevelopmentSite", "Duplex", "Farm", "FishingForestry", "NewHomeDesigns", "House", "NewHouseLand", "IrrigationServices", "NewLand", "Livestock", "NewApartments", "Penthouse", "RetirementVillage", "Rural", "SemiDetached", "SpecialistFarm", "Studio", "Terrace", "Townhouse", "VacantLand", "Villa", "Cropping", "Viticulture", "MixedFarming", "Grazing", "Horticulture", "Equine", "Farmlet", "Orchard", "RuralLifestyle"]  # noqa: E501
        if property_type not in allowed_values:
            raise ValueError(
                "Invalid value for `property_type` ({0}), must be one of {1}"  # noqa: E501
                .format(property_type, allowed_values)
            )

        self._property_type = property_type

    @property
    def all_property_types(self):
        """Gets the all_property_types of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The all_property_types of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._all_property_types

    @all_property_types.setter
    def all_property_types(self, all_property_types):
        """Sets the all_property_types of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param all_property_types: The all_property_types of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Unknown", "AcreageSemiRural", "ApartmentUnitFlat", "Aquaculture", "BlockOfUnits", "CarSpace", "DairyFarming", "DevelopmentSite", "Duplex", "Farm", "FishingForestry", "NewHomeDesigns", "House", "NewHouseLand", "IrrigationServices", "NewLand", "Livestock", "NewApartments", "Penthouse", "RetirementVillage", "Rural", "SemiDetached", "SpecialistFarm", "Studio", "Terrace", "Townhouse", "VacantLand", "Villa", "Cropping", "Viticulture", "MixedFarming", "Grazing", "Horticulture", "Equine", "Farmlet", "Orchard", "RuralLifestyle"]  # noqa: E501
        if not set(all_property_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `all_property_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(all_property_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._all_property_types = all_property_types

    @property
    def bathrooms(self):
        """Gets the bathrooms of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The bathrooms of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: float
        """
        return self._bathrooms

    @bathrooms.setter
    def bathrooms(self, bathrooms):
        """Sets the bathrooms of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param bathrooms: The bathrooms of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: float
        """

        self._bathrooms = bathrooms

    @property
    def bedrooms(self):
        """Gets the bedrooms of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The bedrooms of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: float
        """
        return self._bedrooms

    @bedrooms.setter
    def bedrooms(self, bedrooms):
        """Sets the bedrooms of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param bedrooms: The bedrooms of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: float
        """

        self._bedrooms = bedrooms

    @property
    def carspaces(self):
        """Gets the carspaces of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The carspaces of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: int
        """
        return self._carspaces

    @carspaces.setter
    def carspaces(self, carspaces):
        """Sets the carspaces of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param carspaces: The carspaces of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: int
        """

        self._carspaces = carspaces

    @property
    def unit_number(self):
        """Gets the unit_number of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The unit_number of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._unit_number

    @unit_number.setter
    def unit_number(self, unit_number):
        """Sets the unit_number of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param unit_number: The unit_number of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """

        self._unit_number = unit_number

    @property
    def street_number(self):
        """Gets the street_number of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The street_number of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param street_number: The street_number of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    @property
    def street(self):
        """Gets the street of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The street of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param street: The street of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def area(self):
        """Gets the area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param area: The area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def region(self):
        """Gets the region of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The region of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param region: The region of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def suburb(self):
        """Gets the suburb of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The suburb of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param suburb: The suburb of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def suburb_id(self):
        """Gets the suburb_id of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The suburb_id of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: int
        """
        return self._suburb_id

    @suburb_id.setter
    def suburb_id(self, suburb_id):
        """Sets the suburb_id of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param suburb_id: The suburb_id of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: int
        """

        self._suburb_id = suburb_id

    @property
    def postcode(self):
        """Gets the postcode of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The postcode of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param postcode: The postcode of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def displayable_address(self):
        """Gets the displayable_address of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The displayable_address of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._displayable_address

    @displayable_address.setter
    def displayable_address(self, displayable_address):
        """Sets the displayable_address of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param displayable_address: The displayable_address of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """

        self._displayable_address = displayable_address

    @property
    def latitude(self):
        """Gets the latitude of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The latitude of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param latitude: The latitude of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The longitude of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param longitude: The longitude of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def map_certainty(self):
        """Gets the map_certainty of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The map_certainty of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: int
        """
        return self._map_certainty

    @map_certainty.setter
    def map_certainty(self, map_certainty):
        """Sets the map_certainty of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param map_certainty: The map_certainty of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: int
        """

        self._map_certainty = map_certainty

    @property
    def land_area(self):
        """Gets the land_area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The land_area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: float
        """
        return self._land_area

    @land_area.setter
    def land_area(self, land_area):
        """Sets the land_area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param land_area: The land_area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: float
        """

        self._land_area = land_area

    @property
    def building_area(self):
        """Gets the building_area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The building_area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: float
        """
        return self._building_area

    @building_area.setter
    def building_area(self, building_area):
        """Sets the building_area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param building_area: The building_area of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: float
        """

        self._building_area = building_area

    @property
    def only_show_properties(self):
        """Gets the only_show_properties of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The only_show_properties of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._only_show_properties

    @only_show_properties.setter
    def only_show_properties(self, only_show_properties):
        """Sets the only_show_properties of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param only_show_properties: The only_show_properties of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: list[str]
        """

        self._only_show_properties = only_show_properties

    @property
    def display_address_type(self):
        """Gets the display_address_type of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The display_address_type of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: str
        """
        return self._display_address_type

    @display_address_type.setter
    def display_address_type(self, display_address_type):
        """Sets the display_address_type of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param display_address_type: The display_address_type of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: str
        """

        self._display_address_type = display_address_type

    @property
    def is_rural(self):
        """Gets the is_rural of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The is_rural of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_rural

    @is_rural.setter
    def is_rural(self, is_rural):
        """Sets the is_rural of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param is_rural: The is_rural of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: bool
        """

        self._is_rural = is_rural

    @property
    def top_spot_keywords(self):
        """Gets the top_spot_keywords of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The top_spot_keywords of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._top_spot_keywords

    @top_spot_keywords.setter
    def top_spot_keywords(self, top_spot_keywords):
        """Sets the top_spot_keywords of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param top_spot_keywords: The top_spot_keywords of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: list[str]
        """

        self._top_spot_keywords = top_spot_keywords

    @property
    def is_new(self):
        """Gets the is_new of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The is_new of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param is_new: The is_new of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: bool
        """

        self._is_new = is_new

    @property
    def tags(self):
        """Gets the tags of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501


        :return: The tags of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.


        :param tags: The tags of this DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainSearchServiceV2ModelDomainSearchContractsV2PropertyDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
