# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first': 'DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary',
        'id': 'int',
        'last': 'DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary',
        'property_type': 'str'
    }

    attribute_map = {
        'first': 'first',
        'id': 'id',
        'last': 'last',
        'property_type': 'propertyType'
    }

    def __init__(self, first=None, id=None, last=None, property_type=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity - a model defined in Swagger"""  # noqa: E501

        self._first = None
        self._id = None
        self._last = None
        self._property_type = None
        self.discriminator = None

        if first is not None:
            self.first = first
        if id is not None:
            self.id = id
        if last is not None:
            self.last = last
        if property_type is not None:
            self.property_type = property_type

    @property
    def first(self):
        """Gets the first of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501

        The first activity considered to be part of this record.  # noqa: E501

        :return: The first of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501
        :rtype: DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.

        The first activity considered to be part of this record.  # noqa: E501

        :param first: The first of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501
        :type: DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary
        """

        self._first = first

    @property
    def id(self):
        """Gets the id of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501

        The APM National Activity identifier for the record.  # noqa: E501

        :return: The id of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.

        The APM National Activity identifier for the record.  # noqa: E501

        :param id: The id of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last(self):
        """Gets the last of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501

        The last activity considered to be part of this record.  # noqa: E501

        :return: The last of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501
        :rtype: DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.

        The last activity considered to be part of this record.  # noqa: E501

        :param last: The last of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501
        :type: DomainPublicAdapterWebApiModelsV1PropertiesActivityBoundary
        """

        self._last = last

    @property
    def property_type(self):
        """Gets the property_type of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501

        The type of the property.  # noqa: E501

        :return: The property_type of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501
        :rtype: str
        """
        return self._property_type

    @property_type.setter
    def property_type(self, property_type):
        """Sets the property_type of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.

        The type of the property.  # noqa: E501

        :param property_type: The property_type of this DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity.  # noqa: E501
        :type: str
        """

        self._property_type = property_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1PropertiesRentalActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
