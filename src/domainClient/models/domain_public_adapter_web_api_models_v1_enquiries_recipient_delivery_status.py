# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery_status': 'str',
        'recipient': 'DomainPublicAdapterWebApiModelsV1EnquiriesRecipient',
        '_date': 'datetime'
    }

    attribute_map = {
        'delivery_status': 'deliveryStatus',
        'recipient': 'recipient',
        '_date': 'date'
    }

    def __init__(self, delivery_status=None, recipient=None, _date=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus - a model defined in Swagger"""  # noqa: E501

        self._delivery_status = None
        self._recipient = None
        self.__date = None
        self.discriminator = None

        if delivery_status is not None:
            self.delivery_status = delivery_status
        if recipient is not None:
            self.recipient = recipient
        if _date is not None:
            self._date = _date

    @property
    def delivery_status(self):
        """Gets the delivery_status of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.  # noqa: E501

        Delivery status of the enquiry for the recipient  # noqa: E501

        :return: The delivery_status of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.  # noqa: E501
        :rtype: str
        """
        return self._delivery_status

    @delivery_status.setter
    def delivery_status(self, delivery_status):
        """Sets the delivery_status of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.

        Delivery status of the enquiry for the recipient  # noqa: E501

        :param delivery_status: The delivery_status of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["queued", "delivered", "failed"]  # noqa: E501
        if delivery_status not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_status` ({0}), must be one of {1}"  # noqa: E501
                .format(delivery_status, allowed_values)
            )

        self._delivery_status = delivery_status

    @property
    def recipient(self):
        """Gets the recipient of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.  # noqa: E501

        Recipient of the enquiry  # noqa: E501

        :return: The recipient of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.  # noqa: E501
        :rtype: DomainPublicAdapterWebApiModelsV1EnquiriesRecipient
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.

        Recipient of the enquiry  # noqa: E501

        :param recipient: The recipient of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.  # noqa: E501
        :type: DomainPublicAdapterWebApiModelsV1EnquiriesRecipient
        """

        self._recipient = recipient

    @property
    def _date(self):
        """Gets the _date of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.  # noqa: E501

        Date of the Action. Delivery or failure  # noqa: E501

        :return: The _date of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.

        Date of the Action. Delivery or failure  # noqa: E501

        :param _date: The _date of this DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1EnquiriesRecipientDeliveryStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
