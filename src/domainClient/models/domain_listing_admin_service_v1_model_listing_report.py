# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelListingReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'process_status': 'str',
        'agency_id': 'int',
        'provider_id': 'str',
        'provider_ad_id': 'str',
        'ad_id': 'list[int]',
        'quality_score': 'int',
        'events': 'list[DomainListingAdminServiceV1ModelModelEvent]',
        'versions': 'list[DomainListingAdminServiceV1ModelReportVersion]'
    }

    attribute_map = {
        'process_status': 'processStatus',
        'agency_id': 'agencyId',
        'provider_id': 'providerId',
        'provider_ad_id': 'providerAdId',
        'ad_id': 'adId',
        'quality_score': 'qualityScore',
        'events': 'events',
        'versions': 'versions'
    }

    def __init__(self, process_status=None, agency_id=None, provider_id=None, provider_ad_id=None, ad_id=None, quality_score=None, events=None, versions=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelListingReport - a model defined in Swagger"""  # noqa: E501

        self._process_status = None
        self._agency_id = None
        self._provider_id = None
        self._provider_ad_id = None
        self._ad_id = None
        self._quality_score = None
        self._events = None
        self._versions = None
        self.discriminator = None

        if process_status is not None:
            self.process_status = process_status
        if agency_id is not None:
            self.agency_id = agency_id
        if provider_id is not None:
            self.provider_id = provider_id
        if provider_ad_id is not None:
            self.provider_ad_id = provider_ad_id
        if ad_id is not None:
            self.ad_id = ad_id
        if quality_score is not None:
            self.quality_score = quality_score
        if events is not None:
            self.events = events
        if versions is not None:
            self.versions = versions

    @property
    def process_status(self):
        """Gets the process_status of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501

        Status of listing been processed              * Queued - We received request              * Processing - Request been processed              * Processed - Successful processed request              * Searchable - Change available on Domain              * Failed - Processing failed              * Error - Individual errors encountered  # noqa: E501

        :return: The process_status of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :rtype: str
        """
        return self._process_status

    @process_status.setter
    def process_status(self, process_status):
        """Sets the process_status of this DomainListingAdminServiceV1ModelListingReport.

        Status of listing been processed              * Queued - We received request              * Processing - Request been processed              * Processed - Successful processed request              * Searchable - Change available on Domain              * Failed - Processing failed              * Error - Individual errors encountered  # noqa: E501

        :param process_status: The process_status of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["queued", "processing", "processed", "searchable", "failed", "error"]  # noqa: E501
        if process_status not in allowed_values:
            raise ValueError(
                "Invalid value for `process_status` ({0}), must be one of {1}"  # noqa: E501
                .format(process_status, allowed_values)
            )

        self._process_status = process_status

    @property
    def agency_id(self):
        """Gets the agency_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501

        AgencyId from Domain  # noqa: E501

        :return: The agency_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :rtype: int
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this DomainListingAdminServiceV1ModelListingReport.

        AgencyId from Domain  # noqa: E501

        :param agency_id: The agency_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :type: int
        """

        self._agency_id = agency_id

    @property
    def provider_id(self):
        """Gets the provider_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501

        ProviderId for the agency  # noqa: E501

        :return: The provider_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this DomainListingAdminServiceV1ModelListingReport.

        ProviderId for the agency  # noqa: E501

        :param provider_id: The provider_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def provider_ad_id(self):
        """Gets the provider_ad_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501

        Listing identifier provided by CRM  # noqa: E501

        :return: The provider_ad_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :rtype: str
        """
        return self._provider_ad_id

    @provider_ad_id.setter
    def provider_ad_id(self, provider_ad_id):
        """Sets the provider_ad_id of this DomainListingAdminServiceV1ModelListingReport.

        Listing identifier provided by CRM  # noqa: E501

        :param provider_ad_id: The provider_ad_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :type: str
        """

        self._provider_ad_id = provider_ad_id

    @property
    def ad_id(self):
        """Gets the ad_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501

        Advertisement Id from domain  # noqa: E501

        :return: The ad_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :rtype: list[int]
        """
        return self._ad_id

    @ad_id.setter
    def ad_id(self, ad_id):
        """Sets the ad_id of this DomainListingAdminServiceV1ModelListingReport.

        Advertisement Id from domain  # noqa: E501

        :param ad_id: The ad_id of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :type: list[int]
        """

        self._ad_id = ad_id

    @property
    def quality_score(self):
        """Gets the quality_score of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501

        Quality score of the listing, based on data completeness  # noqa: E501

        :return: The quality_score of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :rtype: int
        """
        return self._quality_score

    @quality_score.setter
    def quality_score(self, quality_score):
        """Sets the quality_score of this DomainListingAdminServiceV1ModelListingReport.

        Quality score of the listing, based on data completeness  # noqa: E501

        :param quality_score: The quality_score of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :type: int
        """

        self._quality_score = quality_score

    @property
    def events(self):
        """Gets the events of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501

        All Events associated with this processing request  # noqa: E501

        :return: The events of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :rtype: list[DomainListingAdminServiceV1ModelModelEvent]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this DomainListingAdminServiceV1ModelListingReport.

        All Events associated with this processing request  # noqa: E501

        :param events: The events of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :type: list[DomainListingAdminServiceV1ModelModelEvent]
        """

        self._events = events

    @property
    def versions(self):
        """Gets the versions of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501

        version list  # noqa: E501

        :return: The versions of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :rtype: list[DomainListingAdminServiceV1ModelReportVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this DomainListingAdminServiceV1ModelListingReport.

        version list  # noqa: E501

        :param versions: The versions of this DomainListingAdminServiceV1ModelListingReport.  # noqa: E501
        :type: list[DomainListingAdminServiceV1ModelReportVersion]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelListingReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelListingReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
