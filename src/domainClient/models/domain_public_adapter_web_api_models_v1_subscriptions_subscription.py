# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'created': 'datetime',
        'created_by': 'str',
        'owner_id': 'str',
        'owner_type': 'str',
        'subscriber_id': 'str',
        'id': 'str',
        'updated': 'datetime',
        'updated_by': 'str'
    }

    attribute_map = {
        'resource_type': 'resourceType',
        'created': 'created',
        'created_by': 'createdBy',
        'owner_id': 'ownerId',
        'owner_type': 'ownerType',
        'subscriber_id': 'subscriberId',
        'id': 'id',
        'updated': 'updated',
        'updated_by': 'updatedBy'
    }

    def __init__(self, resource_type=None, created=None, created_by=None, owner_id=None, owner_type=None, subscriber_id=None, id=None, updated=None, updated_by=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription - a model defined in Swagger"""  # noqa: E501

        self._resource_type = None
        self._created = None
        self._created_by = None
        self._owner_id = None
        self._owner_type = None
        self._subscriber_id = None
        self._id = None
        self._updated = None
        self._updated_by = None
        self.discriminator = None

        if resource_type is not None:
            self.resource_type = resource_type
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if owner_id is not None:
            self.owner_id = owner_id
        if owner_type is not None:
            self.owner_type = owner_type
        if subscriber_id is not None:
            self.subscriber_id = subscriber_id
        if id is not None:
            self.id = id
        if updated is not None:
            self.updated = updated
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def resource_type(self):
        """Gets the resource_type of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501

        Gets or Sets ResourceType  # noqa: E501

        :return: The resource_type of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.

        Gets or Sets ResourceType  # noqa: E501

        :param resource_type: The resource_type of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def created(self):
        """Gets the created of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501

        Gets or Sets Created  # noqa: E501

        :return: The created of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.

        Gets or Sets Created  # noqa: E501

        :param created: The created of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501

        Gets or Sets CreatedBy  # noqa: E501

        :return: The created_by of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.

        Gets or Sets CreatedBy  # noqa: E501

        :param created_by: The created_by of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def owner_id(self):
        """Gets the owner_id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501

        Gets or Sets OwnerId  # noqa: E501

        :return: The owner_id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.

        Gets or Sets OwnerId  # noqa: E501

        :param owner_id: The owner_id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def owner_type(self):
        """Gets the owner_type of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501

        Gets or Sets OwnerType  # noqa: E501

        :return: The owner_type of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :rtype: str
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type):
        """Sets the owner_type of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.

        Gets or Sets OwnerType  # noqa: E501

        :param owner_type: The owner_type of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :type: str
        """

        self._owner_type = owner_type

    @property
    def subscriber_id(self):
        """Gets the subscriber_id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501

        Gets or Sets SubscriberId  # noqa: E501

        :return: The subscriber_id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :rtype: str
        """
        return self._subscriber_id

    @subscriber_id.setter
    def subscriber_id(self, subscriber_id):
        """Sets the subscriber_id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.

        Gets or Sets SubscriberId  # noqa: E501

        :param subscriber_id: The subscriber_id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :type: str
        """

        self._subscriber_id = subscriber_id

    @property
    def id(self):
        """Gets the id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501

        Gets or Sets Id  # noqa: E501

        :return: The id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.

        Gets or Sets Id  # noqa: E501

        :param id: The id of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def updated(self):
        """Gets the updated of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501

        Gets or Sets Updated  # noqa: E501

        :return: The updated of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.

        Gets or Sets Updated  # noqa: E501

        :param updated: The updated of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def updated_by(self):
        """Gets the updated_by of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501

        Gets or Sets UpdatedBy  # noqa: E501

        :return: The updated_by of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.

        Gets or Sets UpdatedBy  # noqa: E501

        :param updated_by: The updated_by of this DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1SubscriptionsSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
