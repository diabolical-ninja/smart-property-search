# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agency_banner_image_url': 'str',
        'agency_banner_wide_image_url': 'str',
        'logo_url': 'str'
    }

    attribute_map = {
        'agency_banner_image_url': 'agencyBannerImageUrl',
        'agency_banner_wide_image_url': 'agencyBannerWideImageUrl',
        'logo_url': 'logoUrl'
    }

    def __init__(self, agency_banner_image_url=None, agency_banner_wide_image_url=None, logo_url=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages - a model defined in Swagger"""  # noqa: E501

        self._agency_banner_image_url = None
        self._agency_banner_wide_image_url = None
        self._logo_url = None
        self.discriminator = None

        if agency_banner_image_url is not None:
            self.agency_banner_image_url = agency_banner_image_url
        if agency_banner_wide_image_url is not None:
            self.agency_banner_wide_image_url = agency_banner_wide_image_url
        if logo_url is not None:
            self.logo_url = logo_url

    @property
    def agency_banner_image_url(self):
        """Gets the agency_banner_image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.  # noqa: E501

        Agency branding banner image URL  # noqa: E501

        :return: The agency_banner_image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.  # noqa: E501
        :rtype: str
        """
        return self._agency_banner_image_url

    @agency_banner_image_url.setter
    def agency_banner_image_url(self, agency_banner_image_url):
        """Sets the agency_banner_image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.

        Agency branding banner image URL  # noqa: E501

        :param agency_banner_image_url: The agency_banner_image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.  # noqa: E501
        :type: str
        """

        self._agency_banner_image_url = agency_banner_image_url

    @property
    def agency_banner_wide_image_url(self):
        """Gets the agency_banner_wide_image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.  # noqa: E501

        Not used  # noqa: E501

        :return: The agency_banner_wide_image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.  # noqa: E501
        :rtype: str
        """
        return self._agency_banner_wide_image_url

    @agency_banner_wide_image_url.setter
    def agency_banner_wide_image_url(self, agency_banner_wide_image_url):
        """Sets the agency_banner_wide_image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.

        Not used  # noqa: E501

        :param agency_banner_wide_image_url: The agency_banner_wide_image_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.  # noqa: E501
        :type: str
        """

        self._agency_banner_wide_image_url = agency_banner_wide_image_url

    @property
    def logo_url(self):
        """Gets the logo_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.  # noqa: E501

        Agency logo. Note: CRE has two logo sizes.  # noqa: E501

        :return: The logo_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.

        Agency logo. Note: CRE has two logo sizes.  # noqa: E501

        :param logo_url: The logo_url of this DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1ListingsBusinessAdvertiserImages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
