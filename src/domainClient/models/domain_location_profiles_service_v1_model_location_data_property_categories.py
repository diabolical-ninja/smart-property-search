# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'luxury_level_price': 'float',
        'number_sold': 'int',
        'estimated_repayments': 'float',
        'for_sale': 'int',
        'median_sold_price': 'float',
        'median_rent_price': 'float',
        'days_on_market': 'float',
        'bedrooms': 'int',
        'for_rent': 'int',
        'entry_level_price': 'float',
        'sales_growth_list': 'list[DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList]',
        'auction_clearance_rate': 'float',
        'property_category': 'str',
        'most_recent_sale': 'str'
    }

    attribute_map = {
        'luxury_level_price': 'luxuryLevelPrice',
        'number_sold': 'numberSold',
        'estimated_repayments': 'estimatedRepayments',
        'for_sale': 'forSale',
        'median_sold_price': 'medianSoldPrice',
        'median_rent_price': 'medianRentPrice',
        'days_on_market': 'daysOnMarket',
        'bedrooms': 'bedrooms',
        'for_rent': 'forRent',
        'entry_level_price': 'entryLevelPrice',
        'sales_growth_list': 'salesGrowthList',
        'auction_clearance_rate': 'auctionClearanceRate',
        'property_category': 'propertyCategory',
        'most_recent_sale': 'mostRecentSale'
    }

    def __init__(self, luxury_level_price=None, number_sold=None, estimated_repayments=None, for_sale=None, median_sold_price=None, median_rent_price=None, days_on_market=None, bedrooms=None, for_rent=None, entry_level_price=None, sales_growth_list=None, auction_clearance_rate=None, property_category=None, most_recent_sale=None):  # noqa: E501
        """DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories - a model defined in Swagger"""  # noqa: E501

        self._luxury_level_price = None
        self._number_sold = None
        self._estimated_repayments = None
        self._for_sale = None
        self._median_sold_price = None
        self._median_rent_price = None
        self._days_on_market = None
        self._bedrooms = None
        self._for_rent = None
        self._entry_level_price = None
        self._sales_growth_list = None
        self._auction_clearance_rate = None
        self._property_category = None
        self._most_recent_sale = None
        self.discriminator = None

        if luxury_level_price is not None:
            self.luxury_level_price = luxury_level_price
        if number_sold is not None:
            self.number_sold = number_sold
        if estimated_repayments is not None:
            self.estimated_repayments = estimated_repayments
        if for_sale is not None:
            self.for_sale = for_sale
        if median_sold_price is not None:
            self.median_sold_price = median_sold_price
        if median_rent_price is not None:
            self.median_rent_price = median_rent_price
        if days_on_market is not None:
            self.days_on_market = days_on_market
        if bedrooms is not None:
            self.bedrooms = bedrooms
        if for_rent is not None:
            self.for_rent = for_rent
        if entry_level_price is not None:
            self.entry_level_price = entry_level_price
        if sales_growth_list is not None:
            self.sales_growth_list = sales_growth_list
        if auction_clearance_rate is not None:
            self.auction_clearance_rate = auction_clearance_rate
        if property_category is not None:
            self.property_category = property_category
        if most_recent_sale is not None:
            self.most_recent_sale = most_recent_sale

    @property
    def luxury_level_price(self):
        """Gets the luxury_level_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The luxury_level_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: float
        """
        return self._luxury_level_price

    @luxury_level_price.setter
    def luxury_level_price(self, luxury_level_price):
        """Sets the luxury_level_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param luxury_level_price: The luxury_level_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: float
        """

        self._luxury_level_price = luxury_level_price

    @property
    def number_sold(self):
        """Gets the number_sold of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The number_sold of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: int
        """
        return self._number_sold

    @number_sold.setter
    def number_sold(self, number_sold):
        """Sets the number_sold of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param number_sold: The number_sold of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: int
        """

        self._number_sold = number_sold

    @property
    def estimated_repayments(self):
        """Gets the estimated_repayments of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The estimated_repayments of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: float
        """
        return self._estimated_repayments

    @estimated_repayments.setter
    def estimated_repayments(self, estimated_repayments):
        """Sets the estimated_repayments of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param estimated_repayments: The estimated_repayments of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: float
        """

        self._estimated_repayments = estimated_repayments

    @property
    def for_sale(self):
        """Gets the for_sale of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The for_sale of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: int
        """
        return self._for_sale

    @for_sale.setter
    def for_sale(self, for_sale):
        """Sets the for_sale of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param for_sale: The for_sale of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: int
        """

        self._for_sale = for_sale

    @property
    def median_sold_price(self):
        """Gets the median_sold_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The median_sold_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: float
        """
        return self._median_sold_price

    @median_sold_price.setter
    def median_sold_price(self, median_sold_price):
        """Sets the median_sold_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param median_sold_price: The median_sold_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: float
        """

        self._median_sold_price = median_sold_price

    @property
    def median_rent_price(self):
        """Gets the median_rent_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The median_rent_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: float
        """
        return self._median_rent_price

    @median_rent_price.setter
    def median_rent_price(self, median_rent_price):
        """Sets the median_rent_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param median_rent_price: The median_rent_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: float
        """

        self._median_rent_price = median_rent_price

    @property
    def days_on_market(self):
        """Gets the days_on_market of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The days_on_market of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: float
        """
        return self._days_on_market

    @days_on_market.setter
    def days_on_market(self, days_on_market):
        """Sets the days_on_market of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param days_on_market: The days_on_market of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: float
        """

        self._days_on_market = days_on_market

    @property
    def bedrooms(self):
        """Gets the bedrooms of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The bedrooms of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: int
        """
        return self._bedrooms

    @bedrooms.setter
    def bedrooms(self, bedrooms):
        """Sets the bedrooms of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param bedrooms: The bedrooms of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: int
        """

        self._bedrooms = bedrooms

    @property
    def for_rent(self):
        """Gets the for_rent of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The for_rent of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: int
        """
        return self._for_rent

    @for_rent.setter
    def for_rent(self, for_rent):
        """Sets the for_rent of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param for_rent: The for_rent of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: int
        """

        self._for_rent = for_rent

    @property
    def entry_level_price(self):
        """Gets the entry_level_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The entry_level_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: float
        """
        return self._entry_level_price

    @entry_level_price.setter
    def entry_level_price(self, entry_level_price):
        """Sets the entry_level_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param entry_level_price: The entry_level_price of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: float
        """

        self._entry_level_price = entry_level_price

    @property
    def sales_growth_list(self):
        """Gets the sales_growth_list of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The sales_growth_list of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: list[DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList]
        """
        return self._sales_growth_list

    @sales_growth_list.setter
    def sales_growth_list(self, sales_growth_list):
        """Sets the sales_growth_list of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param sales_growth_list: The sales_growth_list of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: list[DomainLocationProfilesServiceV1ModelLocationDataSalesGrowthList]
        """

        self._sales_growth_list = sales_growth_list

    @property
    def auction_clearance_rate(self):
        """Gets the auction_clearance_rate of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The auction_clearance_rate of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: float
        """
        return self._auction_clearance_rate

    @auction_clearance_rate.setter
    def auction_clearance_rate(self, auction_clearance_rate):
        """Sets the auction_clearance_rate of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param auction_clearance_rate: The auction_clearance_rate of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: float
        """

        self._auction_clearance_rate = auction_clearance_rate

    @property
    def property_category(self):
        """Gets the property_category of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The property_category of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: str
        """
        return self._property_category

    @property_category.setter
    def property_category(self, property_category):
        """Sets the property_category of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param property_category: The property_category of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: str
        """

        self._property_category = property_category

    @property
    def most_recent_sale(self):
        """Gets the most_recent_sale of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501


        :return: The most_recent_sale of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :rtype: str
        """
        return self._most_recent_sale

    @most_recent_sale.setter
    def most_recent_sale(self, most_recent_sale):
        """Sets the most_recent_sale of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.


        :param most_recent_sale: The most_recent_sale of this DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories.  # noqa: E501
        :type: str
        """

        self._most_recent_sale = most_recent_sale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainLocationProfilesServiceV1ModelLocationDataPropertyCategories):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
