# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainLocationProfilesServiceV1ModelLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_location_id': 'int',
        'postcode': 'str',
        'pf_location_id': 'str',
        'surrounding_suburbs': 'list[DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs]',
        'url_slug': 'str',
        'suburb_name': 'str',
        'data': 'DomainLocationProfilesServiceV1ModelLocationData',
        'apm_location_id': 'int',
        'location_id': 'int',
        'area_name': 'str',
        'region_name': 'str',
        'state': 'str'
    }

    attribute_map = {
        'domain_location_id': 'domainLocationId',
        'postcode': 'postcode',
        'pf_location_id': 'pfLocationId',
        'surrounding_suburbs': 'surroundingSuburbs',
        'url_slug': 'urlSlug',
        'suburb_name': 'suburbName',
        'data': 'data',
        'apm_location_id': 'apmLocationId',
        'location_id': 'locationId',
        'area_name': 'areaName',
        'region_name': 'regionName',
        'state': 'state'
    }

    def __init__(self, domain_location_id=None, postcode=None, pf_location_id=None, surrounding_suburbs=None, url_slug=None, suburb_name=None, data=None, apm_location_id=None, location_id=None, area_name=None, region_name=None, state=None):  # noqa: E501
        """DomainLocationProfilesServiceV1ModelLocation - a model defined in Swagger"""  # noqa: E501

        self._domain_location_id = None
        self._postcode = None
        self._pf_location_id = None
        self._surrounding_suburbs = None
        self._url_slug = None
        self._suburb_name = None
        self._data = None
        self._apm_location_id = None
        self._location_id = None
        self._area_name = None
        self._region_name = None
        self._state = None
        self.discriminator = None

        if domain_location_id is not None:
            self.domain_location_id = domain_location_id
        if postcode is not None:
            self.postcode = postcode
        if pf_location_id is not None:
            self.pf_location_id = pf_location_id
        if surrounding_suburbs is not None:
            self.surrounding_suburbs = surrounding_suburbs
        if url_slug is not None:
            self.url_slug = url_slug
        if suburb_name is not None:
            self.suburb_name = suburb_name
        if data is not None:
            self.data = data
        if apm_location_id is not None:
            self.apm_location_id = apm_location_id
        if location_id is not None:
            self.location_id = location_id
        if area_name is not None:
            self.area_name = area_name
        if region_name is not None:
            self.region_name = region_name
        if state is not None:
            self.state = state

    @property
    def domain_location_id(self):
        """Gets the domain_location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The domain_location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: int
        """
        return self._domain_location_id

    @domain_location_id.setter
    def domain_location_id(self, domain_location_id):
        """Sets the domain_location_id of this DomainLocationProfilesServiceV1ModelLocation.


        :param domain_location_id: The domain_location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: int
        """

        self._domain_location_id = domain_location_id

    @property
    def postcode(self):
        """Gets the postcode of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The postcode of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this DomainLocationProfilesServiceV1ModelLocation.


        :param postcode: The postcode of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def pf_location_id(self):
        """Gets the pf_location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The pf_location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: str
        """
        return self._pf_location_id

    @pf_location_id.setter
    def pf_location_id(self, pf_location_id):
        """Sets the pf_location_id of this DomainLocationProfilesServiceV1ModelLocation.


        :param pf_location_id: The pf_location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: str
        """

        self._pf_location_id = pf_location_id

    @property
    def surrounding_suburbs(self):
        """Gets the surrounding_suburbs of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The surrounding_suburbs of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: list[DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs]
        """
        return self._surrounding_suburbs

    @surrounding_suburbs.setter
    def surrounding_suburbs(self, surrounding_suburbs):
        """Sets the surrounding_suburbs of this DomainLocationProfilesServiceV1ModelLocation.


        :param surrounding_suburbs: The surrounding_suburbs of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: list[DomainLocationProfilesServiceV1ModelLocationSurroundingSuburbs]
        """

        self._surrounding_suburbs = surrounding_suburbs

    @property
    def url_slug(self):
        """Gets the url_slug of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The url_slug of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: str
        """
        return self._url_slug

    @url_slug.setter
    def url_slug(self, url_slug):
        """Sets the url_slug of this DomainLocationProfilesServiceV1ModelLocation.


        :param url_slug: The url_slug of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: str
        """

        self._url_slug = url_slug

    @property
    def suburb_name(self):
        """Gets the suburb_name of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The suburb_name of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: str
        """
        return self._suburb_name

    @suburb_name.setter
    def suburb_name(self, suburb_name):
        """Sets the suburb_name of this DomainLocationProfilesServiceV1ModelLocation.


        :param suburb_name: The suburb_name of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: str
        """

        self._suburb_name = suburb_name

    @property
    def data(self):
        """Gets the data of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The data of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: DomainLocationProfilesServiceV1ModelLocationData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DomainLocationProfilesServiceV1ModelLocation.


        :param data: The data of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: DomainLocationProfilesServiceV1ModelLocationData
        """

        self._data = data

    @property
    def apm_location_id(self):
        """Gets the apm_location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The apm_location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: int
        """
        return self._apm_location_id

    @apm_location_id.setter
    def apm_location_id(self, apm_location_id):
        """Sets the apm_location_id of this DomainLocationProfilesServiceV1ModelLocation.


        :param apm_location_id: The apm_location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: int
        """

        self._apm_location_id = apm_location_id

    @property
    def location_id(self):
        """Gets the location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this DomainLocationProfilesServiceV1ModelLocation.


        :param location_id: The location_id of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def area_name(self):
        """Gets the area_name of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The area_name of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: str
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name):
        """Sets the area_name of this DomainLocationProfilesServiceV1ModelLocation.


        :param area_name: The area_name of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: str
        """

        self._area_name = area_name

    @property
    def region_name(self):
        """Gets the region_name of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The region_name of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this DomainLocationProfilesServiceV1ModelLocation.


        :param region_name: The region_name of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def state(self):
        """Gets the state of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501


        :return: The state of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DomainLocationProfilesServiceV1ModelLocation.


        :param state: The state of this DomainLocationProfilesServiceV1ModelLocation.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainLocationProfilesServiceV1ModelLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainLocationProfilesServiceV1ModelLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
