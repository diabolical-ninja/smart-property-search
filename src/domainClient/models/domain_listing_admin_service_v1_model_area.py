# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelArea(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit': 'str',
        'value': 'float',
        '_from': 'float',
        'to': 'float'
    }

    attribute_map = {
        'unit': 'unit',
        'value': 'value',
        '_from': 'from',
        'to': 'to'
    }

    def __init__(self, unit=None, value=None, _from=None, to=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelArea - a model defined in Swagger"""  # noqa: E501

        self._unit = None
        self._value = None
        self.__from = None
        self._to = None
        self.discriminator = None

        if unit is not None:
            self.unit = unit
        if value is not None:
            self.value = value
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to

    @property
    def unit(self):
        """Gets the unit of this DomainListingAdminServiceV1ModelArea.  # noqa: E501

        Unit of measure, defaults to SquareMetres if not provided.  # noqa: E501

        :return: The unit of this DomainListingAdminServiceV1ModelArea.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this DomainListingAdminServiceV1ModelArea.

        Unit of measure, defaults to SquareMetres if not provided.  # noqa: E501

        :param unit: The unit of this DomainListingAdminServiceV1ModelArea.  # noqa: E501
        :type: str
        """
        allowed_values = ["squareMetres", "acres", "hectares", "squareFeet", "squareYards", "squares"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"  # noqa: E501
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this DomainListingAdminServiceV1ModelArea.  # noqa: E501

        Area. Will be rounded to 2 decimals.  # noqa: E501

        :return: The value of this DomainListingAdminServiceV1ModelArea.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DomainListingAdminServiceV1ModelArea.

        Area. Will be rounded to 2 decimals.  # noqa: E501

        :param value: The value of this DomainListingAdminServiceV1ModelArea.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def _from(self):
        """Gets the _from of this DomainListingAdminServiceV1ModelArea.  # noqa: E501

        Minimum area  # noqa: E501

        :return: The _from of this DomainListingAdminServiceV1ModelArea.  # noqa: E501
        :rtype: float
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this DomainListingAdminServiceV1ModelArea.

        Minimum area  # noqa: E501

        :param _from: The _from of this DomainListingAdminServiceV1ModelArea.  # noqa: E501
        :type: float
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this DomainListingAdminServiceV1ModelArea.  # noqa: E501

        Maximum area  # noqa: E501

        :return: The to of this DomainListingAdminServiceV1ModelArea.  # noqa: E501
        :rtype: float
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this DomainListingAdminServiceV1ModelArea.

        Maximum area  # noqa: E501

        :param to: The to of this DomainListingAdminServiceV1ModelArea.  # noqa: E501
        :type: float
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelArea, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelArea):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
