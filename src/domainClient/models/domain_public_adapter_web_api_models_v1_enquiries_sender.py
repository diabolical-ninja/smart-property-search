# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1EnquiriesSender(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'phone_number': 'str',
        'postcode': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'phone_number': 'phoneNumber',
        'postcode': 'postcode'
    }

    def __init__(self, first_name=None, last_name=None, email=None, phone_number=None, postcode=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1EnquiriesSender - a model defined in Swagger"""  # noqa: E501

        self._first_name = None
        self._last_name = None
        self._email = None
        self._phone_number = None
        self._postcode = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if postcode is not None:
            self.postcode = postcode

    @property
    def first_name(self):
        """Gets the first_name of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501

        Sender first name  # noqa: E501

        :return: The first_name of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.

        Sender first name  # noqa: E501

        :param first_name: The first_name of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501

        Sender lastname/surname  # noqa: E501

        :return: The last_name of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.

        Sender lastname/surname  # noqa: E501

        :param last_name: The last_name of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501

        Sender email address  # noqa: E501

        :return: The email of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.

        Sender email address  # noqa: E501

        :param email: The email of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501

        Sender phone number  # noqa: E501

        :return: The phone_number of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.

        Sender phone number  # noqa: E501

        :param phone_number: The phone_number of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def postcode(self):
        """Gets the postcode of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501

        Postcode of sender's location  # noqa: E501

        :return: The postcode of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.

        Postcode of sender's location  # noqa: E501

        :param postcode: The postcode of this DomainPublicAdapterWebApiModelsV1EnquiriesSender.  # noqa: E501
        :type: str
        """
        if postcode is not None and not re.search(r'^\\d*$', postcode):  # noqa: E501
            raise ValueError(r"Invalid value for `postcode`, must be a follow pattern or equal to `/^\\d*$/`")  # noqa: E501

        self._postcode = postcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1EnquiriesSender, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1EnquiriesSender):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
