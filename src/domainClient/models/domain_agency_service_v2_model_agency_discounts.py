# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainAgencyServiceV2ModelAgencyDiscounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elite_discount': 'float',
        'priority_discount': 'float',
        'cre_elite_discount': 'float',
        'cre_platinum_discount': 'float',
        'cre_priority_discount': 'float'
    }

    attribute_map = {
        'elite_discount': 'eliteDiscount',
        'priority_discount': 'priorityDiscount',
        'cre_elite_discount': 'creEliteDiscount',
        'cre_platinum_discount': 'crePlatinumDiscount',
        'cre_priority_discount': 'crePriorityDiscount'
    }

    def __init__(self, elite_discount=None, priority_discount=None, cre_elite_discount=None, cre_platinum_discount=None, cre_priority_discount=None):  # noqa: E501
        """DomainAgencyServiceV2ModelAgencyDiscounts - a model defined in Swagger"""  # noqa: E501

        self._elite_discount = None
        self._priority_discount = None
        self._cre_elite_discount = None
        self._cre_platinum_discount = None
        self._cre_priority_discount = None
        self.discriminator = None

        if elite_discount is not None:
            self.elite_discount = elite_discount
        if priority_discount is not None:
            self.priority_discount = priority_discount
        if cre_elite_discount is not None:
            self.cre_elite_discount = cre_elite_discount
        if cre_platinum_discount is not None:
            self.cre_platinum_discount = cre_platinum_discount
        if cre_priority_discount is not None:
            self.cre_priority_discount = cre_priority_discount

    @property
    def elite_discount(self):
        """Gets the elite_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501


        :return: The elite_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501
        :rtype: float
        """
        return self._elite_discount

    @elite_discount.setter
    def elite_discount(self, elite_discount):
        """Sets the elite_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.


        :param elite_discount: The elite_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501
        :type: float
        """

        self._elite_discount = elite_discount

    @property
    def priority_discount(self):
        """Gets the priority_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501


        :return: The priority_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501
        :rtype: float
        """
        return self._priority_discount

    @priority_discount.setter
    def priority_discount(self, priority_discount):
        """Sets the priority_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.


        :param priority_discount: The priority_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501
        :type: float
        """

        self._priority_discount = priority_discount

    @property
    def cre_elite_discount(self):
        """Gets the cre_elite_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501


        :return: The cre_elite_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501
        :rtype: float
        """
        return self._cre_elite_discount

    @cre_elite_discount.setter
    def cre_elite_discount(self, cre_elite_discount):
        """Sets the cre_elite_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.


        :param cre_elite_discount: The cre_elite_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501
        :type: float
        """

        self._cre_elite_discount = cre_elite_discount

    @property
    def cre_platinum_discount(self):
        """Gets the cre_platinum_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501


        :return: The cre_platinum_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501
        :rtype: float
        """
        return self._cre_platinum_discount

    @cre_platinum_discount.setter
    def cre_platinum_discount(self, cre_platinum_discount):
        """Sets the cre_platinum_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.


        :param cre_platinum_discount: The cre_platinum_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501
        :type: float
        """

        self._cre_platinum_discount = cre_platinum_discount

    @property
    def cre_priority_discount(self):
        """Gets the cre_priority_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501


        :return: The cre_priority_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501
        :rtype: float
        """
        return self._cre_priority_discount

    @cre_priority_discount.setter
    def cre_priority_discount(self, cre_priority_discount):
        """Sets the cre_priority_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.


        :param cre_priority_discount: The cre_priority_discount of this DomainAgencyServiceV2ModelAgencyDiscounts.  # noqa: E501
        :type: float
        """

        self._cre_priority_discount = cre_priority_discount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainAgencyServiceV2ModelAgencyDiscounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainAgencyServiceV2ModelAgencyDiscounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
