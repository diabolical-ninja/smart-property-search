# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'listing': 'DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing',
        'listings': 'list[DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing]',
        'project': 'DomainSearchServiceV2ModelDomainSearchContractsV2Project'
    }

    attribute_map = {
        'type': 'type',
        'listing': 'listing',
        'listings': 'listings',
        'project': 'project'
    }

    def __init__(self, type=None, listing=None, listings=None, project=None):  # noqa: E501
        """DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._listing = None
        self._listings = None
        self._project = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if listing is not None:
            self.listing = listing
        if listings is not None:
            self.listings = listings
        if project is not None:
            self.project = project

    @property
    def type(self):
        """Gets the type of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501


        :return: The type of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.


        :param type: The type of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["PropertyListing", "Project"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def listing(self):
        """Gets the listing of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501


        :return: The listing of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501
        :rtype: DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
        """
        return self._listing

    @listing.setter
    def listing(self, listing):
        """Sets the listing of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.


        :param listing: The listing of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501
        :type: DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing
        """

        self._listing = listing

    @property
    def listings(self):
        """Gets the listings of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501


        :return: The listings of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501
        :rtype: list[DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing]
        """
        return self._listings

    @listings.setter
    def listings(self, listings):
        """Sets the listings of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.


        :param listings: The listings of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501
        :type: list[DomainSearchServiceV2ModelDomainSearchContractsV2PropertyListing]
        """

        self._listings = listings

    @property
    def project(self):
        """Gets the project of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501


        :return: The project of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501
        :rtype: DomainSearchServiceV2ModelDomainSearchContractsV2Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.


        :param project: The project of this DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult.  # noqa: E501
        :type: DomainSearchServiceV2ModelDomainSearchContractsV2Project
        """

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
