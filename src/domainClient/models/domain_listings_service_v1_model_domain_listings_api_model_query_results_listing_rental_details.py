# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rental_method': 'str',
        'source': 'str',
        'leased_date': 'datetime',
        'leased_price': 'int',
        'can_display_price': 'bool',
        'leased_months': 'int',
        'term_of_lease_from': 'int',
        'term_of_lease_to': 'int',
        'lease_outgoings': 'int'
    }

    attribute_map = {
        'rental_method': 'rentalMethod',
        'source': 'source',
        'leased_date': 'leasedDate',
        'leased_price': 'leasedPrice',
        'can_display_price': 'canDisplayPrice',
        'leased_months': 'leasedMonths',
        'term_of_lease_from': 'termOfLeaseFrom',
        'term_of_lease_to': 'termOfLeaseTo',
        'lease_outgoings': 'leaseOutgoings'
    }

    def __init__(self, rental_method=None, source=None, leased_date=None, leased_price=None, can_display_price=None, leased_months=None, term_of_lease_from=None, term_of_lease_to=None, lease_outgoings=None):  # noqa: E501
        """DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails - a model defined in Swagger"""  # noqa: E501

        self._rental_method = None
        self._source = None
        self._leased_date = None
        self._leased_price = None
        self._can_display_price = None
        self._leased_months = None
        self._term_of_lease_from = None
        self._term_of_lease_to = None
        self._lease_outgoings = None
        self.discriminator = None

        if rental_method is not None:
            self.rental_method = rental_method
        if source is not None:
            self.source = source
        if leased_date is not None:
            self.leased_date = leased_date
        if leased_price is not None:
            self.leased_price = leased_price
        if can_display_price is not None:
            self.can_display_price = can_display_price
        if leased_months is not None:
            self.leased_months = leased_months
        if term_of_lease_from is not None:
            self.term_of_lease_from = term_of_lease_from
        if term_of_lease_to is not None:
            self.term_of_lease_to = term_of_lease_to
        if lease_outgoings is not None:
            self.lease_outgoings = lease_outgoings

    @property
    def rental_method(self):
        """Gets the rental_method of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501


        :return: The rental_method of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :rtype: str
        """
        return self._rental_method

    @rental_method.setter
    def rental_method(self, rental_method):
        """Sets the rental_method of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.


        :param rental_method: The rental_method of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["notStated", "rent", "share", "holiday", "lease"]  # noqa: E501
        if rental_method not in allowed_values:
            raise ValueError(
                "Invalid value for `rental_method` ({0}), must be one of {1}"  # noqa: E501
                .format(rental_method, allowed_values)
            )

        self._rental_method = rental_method

    @property
    def source(self):
        """Gets the source of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501


        :return: The source of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.


        :param source: The source of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["internal", "external"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def leased_date(self):
        """Gets the leased_date of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501


        :return: The leased_date of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._leased_date

    @leased_date.setter
    def leased_date(self, leased_date):
        """Sets the leased_date of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.


        :param leased_date: The leased_date of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :type: datetime
        """

        self._leased_date = leased_date

    @property
    def leased_price(self):
        """Gets the leased_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501


        :return: The leased_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :rtype: int
        """
        return self._leased_price

    @leased_price.setter
    def leased_price(self, leased_price):
        """Sets the leased_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.


        :param leased_price: The leased_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :type: int
        """

        self._leased_price = leased_price

    @property
    def can_display_price(self):
        """Gets the can_display_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501


        :return: The can_display_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :rtype: bool
        """
        return self._can_display_price

    @can_display_price.setter
    def can_display_price(self, can_display_price):
        """Sets the can_display_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.


        :param can_display_price: The can_display_price of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :type: bool
        """

        self._can_display_price = can_display_price

    @property
    def leased_months(self):
        """Gets the leased_months of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501


        :return: The leased_months of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :rtype: int
        """
        return self._leased_months

    @leased_months.setter
    def leased_months(self, leased_months):
        """Sets the leased_months of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.


        :param leased_months: The leased_months of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :type: int
        """

        self._leased_months = leased_months

    @property
    def term_of_lease_from(self):
        """Gets the term_of_lease_from of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501


        :return: The term_of_lease_from of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :rtype: int
        """
        return self._term_of_lease_from

    @term_of_lease_from.setter
    def term_of_lease_from(self, term_of_lease_from):
        """Sets the term_of_lease_from of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.


        :param term_of_lease_from: The term_of_lease_from of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :type: int
        """

        self._term_of_lease_from = term_of_lease_from

    @property
    def term_of_lease_to(self):
        """Gets the term_of_lease_to of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501


        :return: The term_of_lease_to of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :rtype: int
        """
        return self._term_of_lease_to

    @term_of_lease_to.setter
    def term_of_lease_to(self, term_of_lease_to):
        """Sets the term_of_lease_to of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.


        :param term_of_lease_to: The term_of_lease_to of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :type: int
        """

        self._term_of_lease_to = term_of_lease_to

    @property
    def lease_outgoings(self):
        """Gets the lease_outgoings of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501


        :return: The lease_outgoings of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :rtype: int
        """
        return self._lease_outgoings

    @lease_outgoings.setter
    def lease_outgoings(self, lease_outgoings):
        """Sets the lease_outgoings of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.


        :param lease_outgoings: The lease_outgoings of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails.  # noqa: E501
        :type: int
        """

        self._lease_outgoings = lease_outgoings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
