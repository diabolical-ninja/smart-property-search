# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recurrence': 'str',
        'closing_date_time': 'datetime',
        'description': 'str',
        'opening_date_time': 'datetime'
    }

    attribute_map = {
        'recurrence': 'recurrence',
        'closing_date_time': 'closingDateTime',
        'description': 'description',
        'opening_date_time': 'openingDateTime'
    }

    def __init__(self, recurrence=None, closing_date_time=None, description=None, opening_date_time=None):  # noqa: E501
        """DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection - a model defined in Swagger"""  # noqa: E501

        self._recurrence = None
        self._closing_date_time = None
        self._description = None
        self._opening_date_time = None
        self.discriminator = None

        if recurrence is not None:
            self.recurrence = recurrence
        if closing_date_time is not None:
            self.closing_date_time = closing_date_time
        if description is not None:
            self.description = description
        if opening_date_time is not None:
            self.opening_date_time = opening_date_time

    @property
    def recurrence(self):
        """Gets the recurrence of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501


        :return: The recurrence of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.


        :param recurrence: The recurrence of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "weekly"]  # noqa: E501
        if recurrence not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrence` ({0}), must be one of {1}"  # noqa: E501
                .format(recurrence, allowed_values)
            )

        self._recurrence = recurrence

    @property
    def closing_date_time(self):
        """Gets the closing_date_time of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501


        :return: The closing_date_time of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501
        :rtype: datetime
        """
        return self._closing_date_time

    @closing_date_time.setter
    def closing_date_time(self, closing_date_time):
        """Sets the closing_date_time of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.


        :param closing_date_time: The closing_date_time of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501
        :type: datetime
        """

        self._closing_date_time = closing_date_time

    @property
    def description(self):
        """Gets the description of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501


        :return: The description of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.


        :param description: The description of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def opening_date_time(self):
        """Gets the opening_date_time of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501


        :return: The opening_date_time of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501
        :rtype: datetime
        """
        return self._opening_date_time

    @opening_date_time.setter
    def opening_date_time(self, opening_date_time):
        """Sets the opening_date_time of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.


        :param opening_date_time: The opening_date_time of this DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection.  # noqa: E501
        :type: datetime
        """

        self._opening_date_time = opening_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingInspection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
