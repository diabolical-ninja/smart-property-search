# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelSpecificUnitDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'occupancy': 'str',
        'price_unit': 'str',
        'name': 'str',
        'size': 'int',
        'price': 'float',
        'notes': 'str',
        'is_sold_or_leased': 'bool',
        'lease_price_for_saleor_lease': 'float'
    }

    attribute_map = {
        'occupancy': 'occupancy',
        'price_unit': 'priceUnit',
        'name': 'name',
        'size': 'size',
        'price': 'price',
        'notes': 'notes',
        'is_sold_or_leased': 'isSoldOrLeased',
        'lease_price_for_saleor_lease': 'leasePriceForSaleorLease'
    }

    def __init__(self, occupancy=None, price_unit=None, name=None, size=None, price=None, notes=None, is_sold_or_leased=None, lease_price_for_saleor_lease=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelSpecificUnitDetail - a model defined in Swagger"""  # noqa: E501

        self._occupancy = None
        self._price_unit = None
        self._name = None
        self._size = None
        self._price = None
        self._notes = None
        self._is_sold_or_leased = None
        self._lease_price_for_saleor_lease = None
        self.discriminator = None

        if occupancy is not None:
            self.occupancy = occupancy
        if price_unit is not None:
            self.price_unit = price_unit
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if price is not None:
            self.price = price
        if notes is not None:
            self.notes = notes
        if is_sold_or_leased is not None:
            self.is_sold_or_leased = is_sold_or_leased
        if lease_price_for_saleor_lease is not None:
            self.lease_price_for_saleor_lease = lease_price_for_saleor_lease

    @property
    def occupancy(self):
        """Gets the occupancy of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501

        Occupancy type  # noqa: E501

        :return: The occupancy of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this DomainListingAdminServiceV1ModelSpecificUnitDetail.

        Occupancy type  # noqa: E501

        :param occupancy: The occupancy of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["tenanted", "vacant"]  # noqa: E501
        if occupancy not in allowed_values:
            raise ValueError(
                "Invalid value for `occupancy` ({0}), must be one of {1}"  # noqa: E501
                .format(occupancy, allowed_values)
            )

        self._occupancy = occupancy

    @property
    def price_unit(self):
        """Gets the price_unit of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501

        Price unit type  # noqa: E501

        :return: The price_unit of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._price_unit

    @price_unit.setter
    def price_unit(self, price_unit):
        """Sets the price_unit of this DomainListingAdminServiceV1ModelSpecificUnitDetail.

        Price unit type  # noqa: E501

        :param price_unit: The price_unit of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["totalAmount", "perSqm"]  # noqa: E501
        if price_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `price_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(price_unit, allowed_values)
            )

        self._price_unit = price_unit

    @property
    def name(self):
        """Gets the name of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501

        Unit number  # noqa: E501

        :return: The name of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DomainListingAdminServiceV1ModelSpecificUnitDetail.

        Unit number  # noqa: E501

        :param name: The name of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501

        Unit size  # noqa: E501

        :return: The size of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DomainListingAdminServiceV1ModelSpecificUnitDetail.

        Unit size  # noqa: E501

        :param size: The size of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def price(self):
        """Gets the price of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501

        Unit price  # noqa: E501

        :return: The price of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DomainListingAdminServiceV1ModelSpecificUnitDetail.

        Unit price  # noqa: E501

        :param price: The price of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def notes(self):
        """Gets the notes of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501

        Additional notes  # noqa: E501

        :return: The notes of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DomainListingAdminServiceV1ModelSpecificUnitDetail.

        Additional notes  # noqa: E501

        :param notes: The notes of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def is_sold_or_leased(self):
        """Gets the is_sold_or_leased of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501

        Is it available?  # noqa: E501

        :return: The is_sold_or_leased of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_sold_or_leased

    @is_sold_or_leased.setter
    def is_sold_or_leased(self, is_sold_or_leased):
        """Sets the is_sold_or_leased of this DomainListingAdminServiceV1ModelSpecificUnitDetail.

        Is it available?  # noqa: E501

        :param is_sold_or_leased: The is_sold_or_leased of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :type: bool
        """

        self._is_sold_or_leased = is_sold_or_leased

    @property
    def lease_price_for_saleor_lease(self):
        """Gets the lease_price_for_saleor_lease of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501

        Lease price for sale or lease  # noqa: E501

        :return: The lease_price_for_saleor_lease of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :rtype: float
        """
        return self._lease_price_for_saleor_lease

    @lease_price_for_saleor_lease.setter
    def lease_price_for_saleor_lease(self, lease_price_for_saleor_lease):
        """Sets the lease_price_for_saleor_lease of this DomainListingAdminServiceV1ModelSpecificUnitDetail.

        Lease price for sale or lease  # noqa: E501

        :param lease_price_for_saleor_lease: The lease_price_for_saleor_lease of this DomainListingAdminServiceV1ModelSpecificUnitDetail.  # noqa: E501
        :type: float
        """

        self._lease_price_for_saleor_lease = lease_price_for_saleor_lease

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelSpecificUnitDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelSpecificUnitDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
