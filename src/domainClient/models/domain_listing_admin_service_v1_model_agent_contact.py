# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelAgentContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agency_id': 'int',
        'domain_agent_id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'fax': 'str',
        'mobile': 'str',
        'email': 'str',
        'receive_emails': 'bool'
    }

    attribute_map = {
        'agency_id': 'agencyId',
        'domain_agent_id': 'domainAgentId',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'phone': 'phone',
        'fax': 'fax',
        'mobile': 'mobile',
        'email': 'email',
        'receive_emails': 'receiveEmails'
    }

    def __init__(self, agency_id=None, domain_agent_id=None, first_name=None, last_name=None, phone=None, fax=None, mobile=None, email=None, receive_emails=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelAgentContact - a model defined in Swagger"""  # noqa: E501

        self._agency_id = None
        self._domain_agent_id = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self._fax = None
        self._mobile = None
        self._email = None
        self._receive_emails = None
        self.discriminator = None

        if agency_id is not None:
            self.agency_id = agency_id
        if domain_agent_id is not None:
            self.domain_agent_id = domain_agent_id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone
        if fax is not None:
            self.fax = fax
        if mobile is not None:
            self.mobile = mobile
        if email is not None:
            self.email = email
        if receive_emails is not None:
            self.receive_emails = receive_emails

    @property
    def agency_id(self):
        """Gets the agency_id of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501

        Conjunction agent's agency  # noqa: E501

        :return: The agency_id of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :rtype: int
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this DomainListingAdminServiceV1ModelAgentContact.

        Conjunction agent's agency  # noqa: E501

        :param agency_id: The agency_id of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :type: int
        """

        self._agency_id = agency_id

    @property
    def domain_agent_id(self):
        """Gets the domain_agent_id of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501

        Domain ID of the contact person at the agency  # noqa: E501

        :return: The domain_agent_id of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :rtype: int
        """
        return self._domain_agent_id

    @domain_agent_id.setter
    def domain_agent_id(self, domain_agent_id):
        """Sets the domain_agent_id of this DomainListingAdminServiceV1ModelAgentContact.

        Domain ID of the contact person at the agency  # noqa: E501

        :param domain_agent_id: The domain_agent_id of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :type: int
        """

        self._domain_agent_id = domain_agent_id

    @property
    def first_name(self):
        """Gets the first_name of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501

        First name. Maximum 50 characters.  # noqa: E501

        :return: The first_name of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DomainListingAdminServiceV1ModelAgentContact.

        First name. Maximum 50 characters.  # noqa: E501

        :param first_name: The first_name of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501

        Last name. Maximum 50 characters.  # noqa: E501

        :return: The last_name of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DomainListingAdminServiceV1ModelAgentContact.

        Last name. Maximum 50 characters.  # noqa: E501

        :param last_name: The last_name of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501

        Phone. Maximum 20 characters.  # noqa: E501

        :return: The phone of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this DomainListingAdminServiceV1ModelAgentContact.

        Phone. Maximum 20 characters.  # noqa: E501

        :param phone: The phone of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def fax(self):
        """Gets the fax of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501

        Fax. Maximum 20 characters.  # noqa: E501

        :return: The fax of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this DomainListingAdminServiceV1ModelAgentContact.

        Fax. Maximum 20 characters.  # noqa: E501

        :param fax: The fax of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def mobile(self):
        """Gets the mobile of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501

        Mobile. Maximum 20 characters.  # noqa: E501

        :return: The mobile of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this DomainListingAdminServiceV1ModelAgentContact.

        Mobile. Maximum 20 characters.  # noqa: E501

        :param mobile: The mobile of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def email(self):
        """Gets the email of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501

        Email. Maximum 100 characters.  # noqa: E501

        :return: The email of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DomainListingAdminServiceV1ModelAgentContact.

        Email. Maximum 100 characters.  # noqa: E501

        :param email: The email of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def receive_emails(self):
        """Gets the receive_emails of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501

        Indicates whether the contact person should receive emails for the listing  # noqa: E501

        :return: The receive_emails of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :rtype: bool
        """
        return self._receive_emails

    @receive_emails.setter
    def receive_emails(self, receive_emails):
        """Sets the receive_emails of this DomainListingAdminServiceV1ModelAgentContact.

        Indicates whether the contact person should receive emails for the listing  # noqa: E501

        :param receive_emails: The receive_emails of this DomainListingAdminServiceV1ModelAgentContact.  # noqa: E501
        :type: bool
        """

        self._receive_emails = receive_emails

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelAgentContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelAgentContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
