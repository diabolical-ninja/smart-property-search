# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1ListingsListing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'objective': 'str',
        'property_types': 'list[str]',
        'status': 'str',
        'sale_mode': 'str',
        'channel': 'str',
        'address_parts': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts',
        'advertiser_identifiers': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers',
        'apm_identifiers': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers',
        'bathrooms': 'float',
        'bedrooms': 'float',
        'building_area': 'str',
        'building_area_sqm': 'float',
        'carspaces': 'float',
        'date_available': 'datetime',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'date_minor_updated': 'datetime',
        'date_listed': 'datetime',
        'date_purged': 'datetime',
        'description': 'str',
        'dev_project_id': 'int',
        'energy_efficiency_rating': 'int',
        'features': 'list[str]',
        'geo_location': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation',
        'headline': 'str',
        'id': 'int',
        'inspection_details': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections',
        'is_new_development': 'bool',
        'land_area': 'str',
        'land_area_sqm': 'float',
        'media': 'list[DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia]',
        'price_details': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails',
        'property_id': 'str',
        'provider_details': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails',
        'rental_details': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails',
        'sale_details': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails',
        'is_withdrawn': 'bool',
        'seo_url': 'str',
        'error_message': 'str',
        'virtual_tour_url': 'str',
        'homepass_enabled': 'bool',
        'statement_of_information': 'DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation',
        'number_of_dwellings': 'int',
        'highlights': 'list[str]'
    }

    attribute_map = {
        'objective': 'objective',
        'property_types': 'propertyTypes',
        'status': 'status',
        'sale_mode': 'saleMode',
        'channel': 'channel',
        'address_parts': 'addressParts',
        'advertiser_identifiers': 'advertiserIdentifiers',
        'apm_identifiers': 'apmIdentifiers',
        'bathrooms': 'bathrooms',
        'bedrooms': 'bedrooms',
        'building_area': 'buildingArea',
        'building_area_sqm': 'buildingAreaSqm',
        'carspaces': 'carspaces',
        'date_available': 'dateAvailable',
        'date_created': 'dateCreated',
        'date_updated': 'dateUpdated',
        'date_minor_updated': 'dateMinorUpdated',
        'date_listed': 'dateListed',
        'date_purged': 'datePurged',
        'description': 'description',
        'dev_project_id': 'devProjectId',
        'energy_efficiency_rating': 'energyEfficiencyRating',
        'features': 'features',
        'geo_location': 'geoLocation',
        'headline': 'headline',
        'id': 'id',
        'inspection_details': 'inspectionDetails',
        'is_new_development': 'isNewDevelopment',
        'land_area': 'landArea',
        'land_area_sqm': 'landAreaSqm',
        'media': 'media',
        'price_details': 'priceDetails',
        'property_id': 'propertyId',
        'provider_details': 'providerDetails',
        'rental_details': 'rentalDetails',
        'sale_details': 'saleDetails',
        'is_withdrawn': 'isWithdrawn',
        'seo_url': 'seoUrl',
        'error_message': 'errorMessage',
        'virtual_tour_url': 'virtualTourUrl',
        'homepass_enabled': 'homepassEnabled',
        'statement_of_information': 'statementOfInformation',
        'number_of_dwellings': 'numberOfDwellings',
        'highlights': 'highlights'
    }

    def __init__(self, objective=None, property_types=None, status=None, sale_mode=None, channel=None, address_parts=None, advertiser_identifiers=None, apm_identifiers=None, bathrooms=None, bedrooms=None, building_area=None, building_area_sqm=None, carspaces=None, date_available=None, date_created=None, date_updated=None, date_minor_updated=None, date_listed=None, date_purged=None, description=None, dev_project_id=None, energy_efficiency_rating=None, features=None, geo_location=None, headline=None, id=None, inspection_details=None, is_new_development=None, land_area=None, land_area_sqm=None, media=None, price_details=None, property_id=None, provider_details=None, rental_details=None, sale_details=None, is_withdrawn=None, seo_url=None, error_message=None, virtual_tour_url=None, homepass_enabled=None, statement_of_information=None, number_of_dwellings=None, highlights=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1ListingsListing - a model defined in Swagger"""  # noqa: E501

        self._objective = None
        self._property_types = None
        self._status = None
        self._sale_mode = None
        self._channel = None
        self._address_parts = None
        self._advertiser_identifiers = None
        self._apm_identifiers = None
        self._bathrooms = None
        self._bedrooms = None
        self._building_area = None
        self._building_area_sqm = None
        self._carspaces = None
        self._date_available = None
        self._date_created = None
        self._date_updated = None
        self._date_minor_updated = None
        self._date_listed = None
        self._date_purged = None
        self._description = None
        self._dev_project_id = None
        self._energy_efficiency_rating = None
        self._features = None
        self._geo_location = None
        self._headline = None
        self._id = None
        self._inspection_details = None
        self._is_new_development = None
        self._land_area = None
        self._land_area_sqm = None
        self._media = None
        self._price_details = None
        self._property_id = None
        self._provider_details = None
        self._rental_details = None
        self._sale_details = None
        self._is_withdrawn = None
        self._seo_url = None
        self._error_message = None
        self._virtual_tour_url = None
        self._homepass_enabled = None
        self._statement_of_information = None
        self._number_of_dwellings = None
        self._highlights = None
        self.discriminator = None

        if objective is not None:
            self.objective = objective
        if property_types is not None:
            self.property_types = property_types
        if status is not None:
            self.status = status
        if sale_mode is not None:
            self.sale_mode = sale_mode
        if channel is not None:
            self.channel = channel
        if address_parts is not None:
            self.address_parts = address_parts
        if advertiser_identifiers is not None:
            self.advertiser_identifiers = advertiser_identifiers
        if apm_identifiers is not None:
            self.apm_identifiers = apm_identifiers
        if bathrooms is not None:
            self.bathrooms = bathrooms
        if bedrooms is not None:
            self.bedrooms = bedrooms
        if building_area is not None:
            self.building_area = building_area
        if building_area_sqm is not None:
            self.building_area_sqm = building_area_sqm
        if carspaces is not None:
            self.carspaces = carspaces
        if date_available is not None:
            self.date_available = date_available
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if date_minor_updated is not None:
            self.date_minor_updated = date_minor_updated
        if date_listed is not None:
            self.date_listed = date_listed
        if date_purged is not None:
            self.date_purged = date_purged
        if description is not None:
            self.description = description
        if dev_project_id is not None:
            self.dev_project_id = dev_project_id
        if energy_efficiency_rating is not None:
            self.energy_efficiency_rating = energy_efficiency_rating
        if features is not None:
            self.features = features
        if geo_location is not None:
            self.geo_location = geo_location
        if headline is not None:
            self.headline = headline
        if id is not None:
            self.id = id
        if inspection_details is not None:
            self.inspection_details = inspection_details
        if is_new_development is not None:
            self.is_new_development = is_new_development
        if land_area is not None:
            self.land_area = land_area
        if land_area_sqm is not None:
            self.land_area_sqm = land_area_sqm
        if media is not None:
            self.media = media
        if price_details is not None:
            self.price_details = price_details
        if property_id is not None:
            self.property_id = property_id
        if provider_details is not None:
            self.provider_details = provider_details
        if rental_details is not None:
            self.rental_details = rental_details
        if sale_details is not None:
            self.sale_details = sale_details
        if is_withdrawn is not None:
            self.is_withdrawn = is_withdrawn
        if seo_url is not None:
            self.seo_url = seo_url
        if error_message is not None:
            self.error_message = error_message
        if virtual_tour_url is not None:
            self.virtual_tour_url = virtual_tour_url
        if homepass_enabled is not None:
            self.homepass_enabled = homepass_enabled
        if statement_of_information is not None:
            self.statement_of_information = statement_of_information
        if number_of_dwellings is not None:
            self.number_of_dwellings = number_of_dwellings
        if highlights is not None:
            self.highlights = highlights

    @property
    def objective(self):
        """Gets the objective of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The type of Advertisement  # noqa: E501

        :return: The objective of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The type of Advertisement  # noqa: E501

        :param objective: The objective of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """
        allowed_values = ["sale", "rent"]  # noqa: E501
        if objective not in allowed_values:
            raise ValueError(
                "Invalid value for `objective` ({0}), must be one of {1}"  # noqa: E501
                .format(objective, allowed_values)
            )

        self._objective = objective

    @property
    def property_types(self):
        """Gets the property_types of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Types of the property e.g. House, Duplex, Apartment/Unit/Flat  # noqa: E501

        :return: The property_types of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: list[str]
        """
        return self._property_types

    @property_types.setter
    def property_types(self, property_types):
        """Sets the property_types of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Types of the property e.g. House, Duplex, Apartment/Unit/Flat  # noqa: E501

        :param property_types: The property_types of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["unknown", "accessoriesParts", "accommodationTourism", "accounting", "acreageSemiRural", "adult", "advertisingMarketing", "aerial", "aeronautical", "agedCare", "agricultural", "air", "aircraft", "alarms", "alcoholLiquor", "amusements", "animalRelated", "apartmentUnitFlat", "aquaculture", "aquaticMarineMarinaBerth", "artsCrafts", "autoElectrical", "automotive", "backpackerHostel", "bakery", "barsNightclubs", "beautyHealth", "beautyProducts", "beautySalon", "bikeAndMotorcycle", "blockOfUnits", "boardingKennels", "boatsMarineMarinaBerth", "bookkeeping", "brokerage", "builder", "buildingAndConstruction", "bus", "butcher", "cafeCoffeeShop", "car", "carBusTruck", "carDealership", "carRental", "carspace", "carWash", "caravanPark", "carpenter", "catering", "childCare", "civil", "cleaning", "cleaningAndMaintenance", "clinicalPractice", "clothingAccessories", "clothingFootwear", "communication", "communications", "computerIT", "computerAndInternet", "construction", "convenienceStore", "copyLaminate", "courier", "cropHarvesting", "customs", "dairyFarming", "deli", "dental", "detailing", "developmentLand", "developmentSite", "distributors", "drivingSchools", "duplex", "educationTraining", "educational", "electrical", "employmentRecruitment", "entertainment", "entertainmentTechnology", "export", "farm", "farming", "fertiliser", "finance", "financialServices", "fishingForestry", "floristNursery", "foodBeverage", "foodBeverageHospitality", "franchiseBusinessOpportunities", "freight", "fruitVegFreshProduce", "fruitPicking", "functionCentre", "furnitureTimber", "gambling", "gardenHousehold", "gardenNurseries", "gardening", "glassCeramic", "guestHouseBB", "hairdresser", "healthBeauty", "healthSpa", "hire", "homeGarden", "homeBased", "newHomeDesigns", "homewareHardware", "hospital", "hotel", "hotelLeisure", "house", "newHouseLand", "huntingTrap", "import", "importExportWholesale", "industrialManufacturing", "industrialWarehouse", "insemination", "insurance", "internet", "irrigationServices", "juiceBar", "landClearing", "newLand", "landscaping", "laundryDryCleaning", "legal", "leisureEntertainment", "limousineTaxi", "livestock", "international", "machinery", "machineryMetal", "managementRights", "manufacturers", "manufacturingEngineering", "marine", "massage", "mechanicalRepair", "media", "medical", "medicalConsulting", "medicalPractice", "miningEarthMoving", "mobileServices", "motel", "motorcycle", "musicRelated", "mustering", "nails", "naturalTherapies", "newApartments", "newsagency", "nursery", "nursingHome", "offices", "officeSupplies", "oilGas", "panelBeating", "paperPrinting", "parkingCarSpace", "penthouse", "pestRelated", "pharmacies", "plastic", "plumbing", "poolWater", "postOffices", "printPhoto", "professional", "propertyRealEstate", "rail", "recreationSport", "recruitment", "repair", "resort", "restaurant", "retail", "retailer", "retirement", "retirementVillage", "road", "rural", "ruralCommercialFarming", "scientific", "sea", "security", "semiDetached", "serviceStation", "services", "shearing", "showroomsBulkyGoods", "specialistFarm", "sportsComplexGym", "studio", "supermarket", "takeawayFood", "taxi", "terrace", "themePark", "tours", "townhouse", "training", "transportDistribution", "travel", "truck", "vacantLand", "vending", "villa", "water", "welding", "wholesale", "wholesalers", "woolClassing", "wreckers", "servicedOffices", "other", "alcoholGrocery", "cafeRestaurants", "discountStore", "ecoFriendly", "green", "grocery", "specialityRetail", "storage", "travelAgency", "varietyStore", "chickenShop", "seafoodShop", "deliCafe", "cropping", "viticulture", "mixedFarming", "grazing", "horticulture", "equine", "farmlet", "orchard", "ruralLifestyle", "onlineBusiness"]  # noqa: E501
        if not set(property_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `property_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(property_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._property_types = property_types

    @property
    def status(self):
        """Gets the status of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The current status of the property  # noqa: E501

        :return: The status of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The current status of the property  # noqa: E501

        :param status: The status of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """
        allowed_values = ["unknown", "archived", "underOffer", "sold", "leased", "newDevelopment", "recentlyUpdated", "new", "live", "pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sale_mode(self):
        """Gets the sale_mode of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Sale method of the property  # noqa: E501

        :return: The sale_mode of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._sale_mode

    @sale_mode.setter
    def sale_mode(self, sale_mode):
        """Sets the sale_mode of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Sale method of the property  # noqa: E501

        :param sale_mode: The sale_mode of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """
        allowed_values = ["buy", "rent", "share", "sold", "leased", "archived"]  # noqa: E501
        if sale_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `sale_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(sale_mode, allowed_values)
            )

        self._sale_mode = sale_mode

    @property
    def channel(self):
        """Gets the channel of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Listing channel  # noqa: E501

        :return: The channel of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Listing channel  # noqa: E501

        :param channel: The channel of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """
        allowed_values = ["residential", "commercial", "business"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"  # noqa: E501
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def address_parts(self):
        """Gets the address_parts of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The address parts of the property e.g. Suburb, Area, State etc.  # noqa: E501

        :return: The address_parts of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
        """
        return self._address_parts

    @address_parts.setter
    def address_parts(self, address_parts):
        """Sets the address_parts of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The address parts of the property e.g. Suburb, Area, State etc.  # noqa: E501

        :param address_parts: The address_parts of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAddressParts
        """

        self._address_parts = address_parts

    @property
    def advertiser_identifiers(self):
        """Gets the advertiser_identifiers of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Advertiser identifiers associated with the listing  # noqa: E501

        :return: The advertiser_identifiers of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers
        """
        return self._advertiser_identifiers

    @advertiser_identifiers.setter
    def advertiser_identifiers(self, advertiser_identifiers):
        """Sets the advertiser_identifiers of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Advertiser identifiers associated with the listing  # noqa: E501

        :param advertiser_identifiers: The advertiser_identifiers of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAdvertiserIdentifiers
        """

        self._advertiser_identifiers = advertiser_identifiers

    @property
    def apm_identifiers(self):
        """Gets the apm_identifiers of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        APM specific identifiers used to query suburb statistics, demographics etc  # noqa: E501

        :return: The apm_identifiers of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
        """
        return self._apm_identifiers

    @apm_identifiers.setter
    def apm_identifiers(self, apm_identifiers):
        """Sets the apm_identifiers of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        APM specific identifiers used to query suburb statistics, demographics etc  # noqa: E501

        :param apm_identifiers: The apm_identifiers of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingAustralianPropertyMonitorsIdentifiers
        """

        self._apm_identifiers = apm_identifiers

    @property
    def bathrooms(self):
        """Gets the bathrooms of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Total number of bathrooms in the property  # noqa: E501

        :return: The bathrooms of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: float
        """
        return self._bathrooms

    @bathrooms.setter
    def bathrooms(self, bathrooms):
        """Sets the bathrooms of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Total number of bathrooms in the property  # noqa: E501

        :param bathrooms: The bathrooms of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: float
        """

        self._bathrooms = bathrooms

    @property
    def bedrooms(self):
        """Gets the bedrooms of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Total number of bedrooms in the property; Studio apartments have a value of \\\"0\\\"  # noqa: E501

        :return: The bedrooms of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: float
        """
        return self._bedrooms

    @bedrooms.setter
    def bedrooms(self, bedrooms):
        """Sets the bedrooms of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Total number of bedrooms in the property; Studio apartments have a value of \\\"0\\\"  # noqa: E501

        :param bedrooms: The bedrooms of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: float
        """

        self._bedrooms = bedrooms

    @property
    def building_area(self):
        """Gets the building_area of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The building area display value of the property e.g. 160 ha  # noqa: E501

        :return: The building_area of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._building_area

    @building_area.setter
    def building_area(self, building_area):
        """Sets the building_area of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The building area display value of the property e.g. 160 ha  # noqa: E501

        :param building_area: The building_area of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """

        self._building_area = building_area

    @property
    def building_area_sqm(self):
        """Gets the building_area_sqm of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The properties building area in square meters  # noqa: E501

        :return: The building_area_sqm of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: float
        """
        return self._building_area_sqm

    @building_area_sqm.setter
    def building_area_sqm(self, building_area_sqm):
        """Sets the building_area_sqm of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The properties building area in square meters  # noqa: E501

        :param building_area_sqm: The building_area_sqm of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: float
        """

        self._building_area_sqm = building_area_sqm

    @property
    def carspaces(self):
        """Gets the carspaces of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Total number of car spaces in the property.  # noqa: E501

        :return: The carspaces of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: float
        """
        return self._carspaces

    @carspaces.setter
    def carspaces(self, carspaces):
        """Sets the carspaces of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Total number of car spaces in the property.  # noqa: E501

        :param carspaces: The carspaces of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: float
        """

        self._carspaces = carspaces

    @property
    def date_available(self):
        """Gets the date_available of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The date the property is available  # noqa: E501

        :return: The date_available of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: datetime
        """
        return self._date_available

    @date_available.setter
    def date_available(self, date_available):
        """Sets the date_available of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The date the property is available  # noqa: E501

        :param date_available: The date_available of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: datetime
        """

        self._date_available = date_available

    @property
    def date_created(self):
        """Gets the date_created of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The date/time the listing was created  # noqa: E501

        :return: The date_created of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The date/time the listing was created  # noqa: E501

        :param date_created: The date_created of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The date/time the listing had major update  # noqa: E501

        :return: The date_updated of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The date/time the listing had major update  # noqa: E501

        :param date_updated: The date_updated of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def date_minor_updated(self):
        """Gets the date_minor_updated of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        When minor update applied to listing  # noqa: E501

        :return: The date_minor_updated of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: datetime
        """
        return self._date_minor_updated

    @date_minor_updated.setter
    def date_minor_updated(self, date_minor_updated):
        """Sets the date_minor_updated of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        When minor update applied to listing  # noqa: E501

        :param date_minor_updated: The date_minor_updated of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: datetime
        """

        self._date_minor_updated = date_minor_updated

    @property
    def date_listed(self):
        """Gets the date_listed of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The date/time the listing was first listed  # noqa: E501

        :return: The date_listed of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: datetime
        """
        return self._date_listed

    @date_listed.setter
    def date_listed(self, date_listed):
        """Sets the date_listed of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The date/time the listing was first listed  # noqa: E501

        :param date_listed: The date_listed of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: datetime
        """

        self._date_listed = date_listed

    @property
    def date_purged(self):
        """Gets the date_purged of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The date/time the listing was purged.  # noqa: E501

        :return: The date_purged of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: datetime
        """
        return self._date_purged

    @date_purged.setter
    def date_purged(self, date_purged):
        """Sets the date_purged of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The date/time the listing was purged.  # noqa: E501

        :param date_purged: The date_purged of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: datetime
        """

        self._date_purged = date_purged

    @property
    def description(self):
        """Gets the description of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The long description of the property provided by the advertiser  # noqa: E501

        :return: The description of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The long description of the property provided by the advertiser  # noqa: E501

        :param description: The description of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dev_project_id(self):
        """Gets the dev_project_id of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The ID of the development project - null if no associated project  # noqa: E501

        :return: The dev_project_id of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: int
        """
        return self._dev_project_id

    @dev_project_id.setter
    def dev_project_id(self, dev_project_id):
        """Sets the dev_project_id of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The ID of the development project - null if no associated project  # noqa: E501

        :param dev_project_id: The dev_project_id of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: int
        """

        self._dev_project_id = dev_project_id

    @property
    def energy_efficiency_rating(self):
        """Gets the energy_efficiency_rating of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Energy Efficiency Rating value for ACT properties  # noqa: E501

        :return: The energy_efficiency_rating of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: int
        """
        return self._energy_efficiency_rating

    @energy_efficiency_rating.setter
    def energy_efficiency_rating(self, energy_efficiency_rating):
        """Sets the energy_efficiency_rating of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Energy Efficiency Rating value for ACT properties  # noqa: E501

        :param energy_efficiency_rating: The energy_efficiency_rating of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: int
        """

        self._energy_efficiency_rating = energy_efficiency_rating

    @property
    def features(self):
        """Gets the features of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The property features specified by the advertiser  # noqa: E501

        :return: The features of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The property features specified by the advertiser  # noqa: E501

        :param features: The features of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def geo_location(self):
        """Gets the geo_location of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The geo location of the property. May not be present if property address is poorly described  # noqa: E501

        :return: The geo_location of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """Sets the geo_location of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The geo location of the property. May not be present if property address is poorly described  # noqa: E501

        :param geo_location: The geo_location of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingGeoLocation
        """

        self._geo_location = geo_location

    @property
    def headline(self):
        """Gets the headline of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The short description of the property provided by the advertiser  # noqa: E501

        :return: The headline of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The short description of the property provided by the advertiser  # noqa: E501

        :param headline: The headline of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def id(self):
        """Gets the id of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The identifier which uniquely identifies the listing  # noqa: E501

        :return: The id of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The identifier which uniquely identifies the listing  # noqa: E501

        :param id: The id of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def inspection_details(self):
        """Gets the inspection_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Inspection details for this property  # noqa: E501

        :return: The inspection_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections
        """
        return self._inspection_details

    @inspection_details.setter
    def inspection_details(self, inspection_details):
        """Sets the inspection_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Inspection details for this property  # noqa: E501

        :param inspection_details: The inspection_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPropertyInspections
        """

        self._inspection_details = inspection_details

    @property
    def is_new_development(self):
        """Gets the is_new_development of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Indicates whether the property is a new development  # noqa: E501

        :return: The is_new_development of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: bool
        """
        return self._is_new_development

    @is_new_development.setter
    def is_new_development(self, is_new_development):
        """Sets the is_new_development of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Indicates whether the property is a new development  # noqa: E501

        :param is_new_development: The is_new_development of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: bool
        """

        self._is_new_development = is_new_development

    @property
    def land_area(self):
        """Gets the land_area of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The land area display string for the property e.g. 160 sqm  # noqa: E501

        :return: The land_area of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._land_area

    @land_area.setter
    def land_area(self, land_area):
        """Sets the land_area of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The land area display string for the property e.g. 160 sqm  # noqa: E501

        :param land_area: The land_area of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """

        self._land_area = land_area

    @property
    def land_area_sqm(self):
        """Gets the land_area_sqm of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The properties land area in square meters  # noqa: E501

        :return: The land_area_sqm of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: float
        """
        return self._land_area_sqm

    @land_area_sqm.setter
    def land_area_sqm(self, land_area_sqm):
        """Sets the land_area_sqm of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The properties land area in square meters  # noqa: E501

        :param land_area_sqm: The land_area_sqm of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: float
        """

        self._land_area_sqm = land_area_sqm

    @property
    def media(self):
        """Gets the media of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The media associated with the property provided by the advertiser  # noqa: E501

        :return: The media of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: list[DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The media associated with the property provided by the advertiser  # noqa: E501

        :param media: The media of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: list[DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingListingMedia]
        """

        self._media = media

    @property
    def price_details(self):
        """Gets the price_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Price details of the property  # noqa: E501

        :return: The price_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
        """
        return self._price_details

    @price_details.setter
    def price_details(self, price_details):
        """Sets the price_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Price details of the property  # noqa: E501

        :param price_details: The price_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingPriceDetails
        """

        self._price_details = price_details

    @property
    def property_id(self):
        """Gets the property_id of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The identifier which uniquely identifies the property being advertised.                   This may be empty if the Address of property is poorly described  # noqa: E501

        :return: The property_id of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._property_id

    @property_id.setter
    def property_id(self, property_id):
        """Sets the property_id of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The identifier which uniquely identifies the property being advertised.                   This may be empty if the Address of property is poorly described  # noqa: E501

        :param property_id: The property_id of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """

        self._property_id = property_id

    @property
    def provider_details(self):
        """Gets the provider_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Information for the listing provider. e.g. bulkuploader information  # noqa: E501

        :return: The provider_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails
        """
        return self._provider_details

    @provider_details.setter
    def provider_details(self, provider_details):
        """Sets the provider_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Information for the listing provider. e.g. bulkuploader information  # noqa: E501

        :param provider_details: The provider_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingProviderDetails
        """

        self._provider_details = provider_details

    @property
    def rental_details(self):
        """Gets the rental_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The rental detail's of the property in case of it being for rent or leased  # noqa: E501

        :return: The rental_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
        """
        return self._rental_details

    @rental_details.setter
    def rental_details(self, rental_details):
        """Sets the rental_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The rental detail's of the property in case of it being for rent or leased  # noqa: E501

        :param rental_details: The rental_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingRentalDetails
        """

        self._rental_details = rental_details

    @property
    def sale_details(self):
        """Gets the sale_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The sale detail's of the property in case of it being for sale or sold  # noqa: E501

        :return: The sale_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
        """
        return self._sale_details

    @sale_details.setter
    def sale_details(self, sale_details):
        """Sets the sale_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The sale detail's of the property in case of it being for sale or sold  # noqa: E501

        :param sale_details: The sale_details of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingSaleDetails
        """

        self._sale_details = sale_details

    @property
    def is_withdrawn(self):
        """Gets the is_withdrawn of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Indicates if the property has been withdrawn               from the market  # noqa: E501

        :return: The is_withdrawn of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: bool
        """
        return self._is_withdrawn

    @is_withdrawn.setter
    def is_withdrawn(self, is_withdrawn):
        """Sets the is_withdrawn of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Indicates if the property has been withdrawn               from the market  # noqa: E501

        :param is_withdrawn: The is_withdrawn of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: bool
        """

        self._is_withdrawn = is_withdrawn

    @property
    def seo_url(self):
        """Gets the seo_url of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        listing SEO Url  # noqa: E501

        :return: The seo_url of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._seo_url

    @seo_url.setter
    def seo_url(self, seo_url):
        """Sets the seo_url of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        listing SEO Url  # noqa: E501

        :param seo_url: The seo_url of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """

        self._seo_url = seo_url

    @property
    def error_message(self):
        """Gets the error_message of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        In case of a mapping error is used to display error details  # noqa: E501

        :return: The error_message of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        In case of a mapping error is used to display error details  # noqa: E501

        :param error_message: The error_message of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def virtual_tour_url(self):
        """Gets the virtual_tour_url of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        The Listing's Surroundpix Url.  # noqa: E501

        :return: The virtual_tour_url of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: str
        """
        return self._virtual_tour_url

    @virtual_tour_url.setter
    def virtual_tour_url(self, virtual_tour_url):
        """Sets the virtual_tour_url of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        The Listing's Surroundpix Url.  # noqa: E501

        :param virtual_tour_url: The virtual_tour_url of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: str
        """

        self._virtual_tour_url = virtual_tour_url

    @property
    def homepass_enabled(self):
        """Gets the homepass_enabled of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        If homepass is enabled for the listing (agency)  # noqa: E501

        :return: The homepass_enabled of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: bool
        """
        return self._homepass_enabled

    @homepass_enabled.setter
    def homepass_enabled(self, homepass_enabled):
        """Sets the homepass_enabled of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        If homepass is enabled for the listing (agency)  # noqa: E501

        :param homepass_enabled: The homepass_enabled of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: bool
        """

        self._homepass_enabled = homepass_enabled

    @property
    def statement_of_information(self):
        """Gets the statement_of_information of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Statement of information that is legally required in VIC for sale Listings  # noqa: E501

        :return: The statement_of_information of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation
        """
        return self._statement_of_information

    @statement_of_information.setter
    def statement_of_information(self, statement_of_information):
        """Sets the statement_of_information of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Statement of information that is legally required in VIC for sale Listings  # noqa: E501

        :param statement_of_information: The statement_of_information of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: DomainListingsServiceV1ModelDomainListingsApiModelQueryResultsListingStatementOfInformation
        """

        self._statement_of_information = statement_of_information

    @property
    def number_of_dwellings(self):
        """Gets the number_of_dwellings of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Number of dwellings for current listing  # noqa: E501

        :return: The number_of_dwellings of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: int
        """
        return self._number_of_dwellings

    @number_of_dwellings.setter
    def number_of_dwellings(self, number_of_dwellings):
        """Sets the number_of_dwellings of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Number of dwellings for current listing  # noqa: E501

        :param number_of_dwellings: The number_of_dwellings of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: int
        """

        self._number_of_dwellings = number_of_dwellings

    @property
    def highlights(self):
        """Gets the highlights of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501

        Highlight items for the listing  # noqa: E501

        :return: The highlights of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :rtype: list[str]
        """
        return self._highlights

    @highlights.setter
    def highlights(self, highlights):
        """Sets the highlights of this DomainPublicAdapterWebApiModelsV1ListingsListing.

        Highlight items for the listing  # noqa: E501

        :param highlights: The highlights of this DomainPublicAdapterWebApiModelsV1ListingsListing.  # noqa: E501
        :type: list[str]
        """

        self._highlights = highlights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1ListingsListing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1ListingsListing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
