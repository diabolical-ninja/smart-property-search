# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_number': 'int',
        'advertiser_id': 'int',
        'property_types': 'list[str]',
        'keywords': 'list[str]',
        'brand_id': 'int',
        'franchise_group_id': 'int',
        'locations': 'list[DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch]',
        'page_size': 'int',
        'price': 'DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch',
        'sort': 'str',
        'search_mode': 'str'
    }

    attribute_map = {
        'page_number': 'pageNumber',
        'advertiser_id': 'advertiserId',
        'property_types': 'propertyTypes',
        'keywords': 'keywords',
        'brand_id': 'brandId',
        'franchise_group_id': 'franchiseGroupId',
        'locations': 'locations',
        'page_size': 'pageSize',
        'price': 'price',
        'sort': 'sort',
        'search_mode': 'searchMode'
    }

    def __init__(self, page_number=None, advertiser_id=None, property_types=None, keywords=None, brand_id=None, franchise_group_id=None, locations=None, page_size=None, price=None, sort=None, search_mode=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest - a model defined in Swagger"""  # noqa: E501

        self._page_number = None
        self._advertiser_id = None
        self._property_types = None
        self._keywords = None
        self._brand_id = None
        self._franchise_group_id = None
        self._locations = None
        self._page_size = None
        self._price = None
        self._sort = None
        self._search_mode = None
        self.discriminator = None

        if page_number is not None:
            self.page_number = page_number
        if advertiser_id is not None:
            self.advertiser_id = advertiser_id
        if property_types is not None:
            self.property_types = property_types
        if keywords is not None:
            self.keywords = keywords
        if brand_id is not None:
            self.brand_id = brand_id
        if franchise_group_id is not None:
            self.franchise_group_id = franchise_group_id
        if locations is not None:
            self.locations = locations
        if page_size is not None:
            self.page_size = page_size
        if price is not None:
            self.price = price
        if sort is not None:
            self.sort = sort
        if search_mode is not None:
            self.search_mode = search_mode

    @property
    def page_number(self):
        """Gets the page_number of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

          # noqa: E501

        :return: The page_number of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

          # noqa: E501

        :param page_number: The page_number of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

        AdvertiserId e.g. An Agency ID  # noqa: E501

        :return: The advertiser_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

        AdvertiserId e.g. An Agency ID  # noqa: E501

        :param advertiser_id: The advertiser_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: int
        """

        self._advertiser_id = advertiser_id

    @property
    def property_types(self):
        """Gets the property_types of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

        Listing property types  # noqa: E501

        :return: The property_types of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._property_types

    @property_types.setter
    def property_types(self, property_types):
        """Sets the property_types of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

        Listing property types  # noqa: E501

        :param property_types: The property_types of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["unknown", "accessoriesParts", "accommodationTourism", "accounting", "acreageSemiRural", "adult", "advertisingMarketing", "aerial", "aeronautical", "agedCare", "agricultural", "air", "aircraft", "alarms", "alcoholLiquor", "amusements", "animalRelated", "apartmentUnitFlat", "aquaculture", "aquaticMarineMarinaBerth", "artsCrafts", "autoElectrical", "automotive", "backpackerHostel", "bakery", "barsNightclubs", "beautyHealth", "beautyProducts", "beautySalon", "bedAndBreakfast", "bikeAndMotorcycle", "blockOfUnits", "boardingKennels", "boatsMarineMarinaBerth", "bookkeeping", "brokerage", "builder", "buildingAndConstruction", "bus", "butcher", "cafeCoffeeShop", "car", "carBusTruck", "carDealership", "carRental", "carSpace", "carWash", "caravanPark", "carpenter", "catering", "childCare", "civil", "cleaning", "cleaningAndMaintenance", "clinicalPractice", "clothingAccessories", "clothingFootwear", "communication", "communications", "computerIT", "computerAndInternet", "construction", "convenienceStore", "copyLaminate", "courier", "cropHarvesting", "customs", "dairyFarming", "deli", "dental", "detailing", "developmentLand", "developmentSite", "distributors", "drivingSchools", "duplex", "educationTraining", "educational", "electrical", "employmentRecruitment", "entertainment", "entertainmentTechnology", "export", "farm", "farming", "fertiliser", "finance", "financialServices", "fishingForestry", "floristNursery", "foodBeverage", "foodBeverageHospitality", "franchiseBusinessOpportunities", "freight", "fruitVegFreshProduce", "fruitPicking", "functionCentre", "furnitureTimber", "gambling", "gardenHousehold", "gardenNurseries", "gardening", "glassCeramic", "guestHouseBB", "guesthouse", "hairdresser", "healthBeauty", "healthSpa", "hire", "homeGarden", "homeBased", "newHomeDesigns", "homewareHardware", "hospital", "hotel", "hotelLeisure", "hotelMotelPub", "house", "newHouseLand", "huntingTrap", "import", "importExportWholesale", "industrialManufacturing", "industrialWarehouse", "insemination", "insurance", "internationalNewDevelopment", "internet", "irrigationServices", "juiceBar", "landClearing", "newLand", "landscaping", "laundryDryCleaning", "legal", "leisureEntertainment", "limousineTaxi", "livestock", "internationalCommercial", "machinery", "machineryMetal", "managementRights", "manufacturers", "manufacturingEngineering", "marine", "massage", "mechanicalRepair", "media", "medical", "medicalConsulting", "medicalPractice", "miningEarthMoving", "mobileServices", "motel", "motorcycle", "musicRelated", "mustering", "nails", "naturalTherapies", "newApartments", "newsagency", "nursery", "nursingHome", "offices", "officeSupplies", "oilGas", "onStreet", "panelBeating", "paperPrinting", "parkingCarSpace", "penthouse", "pestRelated", "pharmacies", "plastic", "plumbing", "poolWater", "postOffices", "printPhoto", "professional", "propertyRealEstate", "rail", "recreationSport", "recruitment", "repair", "resort", "restaurant", "retail", "retailer", "retirementVillage", "road", "rural", "ruralCommercialFarming", "scientific", "sea", "security", "semiDetached", "serviceStation", "serviced", "services", "shearing", "showroomsBulkyGoods", "specialistFarm", "sportsComplexGym", "studio", "supermarket", "takeawayFood", "taxi", "terrace", "themePark", "tours", "townhouse", "training", "transportDistribution", "travel", "truck", "vacantLand", "vending", "villa", "water", "welding", "wholesale", "wholesalers", "withShowroomWarehouse", "withinShoppingComplex", "woolClassing", "wreckers", "tattersalls", "servicedOffices", "other", "alcoholGrocery", "cafeRestaurant", "discountStore", "ecoFriendly", "green", "grocery", "specialityRetail", "storage", "travelAgency", "varietyStore", "franchiseNew", "business"]  # noqa: E501
        if not set(property_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `property_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(property_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._property_types = property_types

    @property
    def keywords(self):
        """Gets the keywords of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

        Search listings by keyword  # noqa: E501

        :return: The keywords of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

        Search listings by keyword  # noqa: E501

        :param keywords: The keywords of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def brand_id(self):
        """Gets the brand_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

        The franchise brand ID  # noqa: E501

        :return: The brand_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

        The franchise brand ID  # noqa: E501

        :param brand_id: The brand_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: int
        """

        self._brand_id = brand_id

    @property
    def franchise_group_id(self):
        """Gets the franchise_group_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

        The franchise group ID. A franchise group owns multiple franchise brands.  # noqa: E501

        :return: The franchise_group_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._franchise_group_id

    @franchise_group_id.setter
    def franchise_group_id(self, franchise_group_id):
        """Sets the franchise_group_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

        The franchise group ID. A franchise group owns multiple franchise brands.  # noqa: E501

        :param franchise_group_id: The franchise_group_id of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: int
        """

        self._franchise_group_id = franchise_group_id

    @property
    def locations(self):
        """Gets the locations of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

        Location search criteria  # noqa: E501

        :return: The locations of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: list[DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

        Location search criteria  # noqa: E501

        :param locations: The locations of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: list[DomainPublicAdapterWebApiModelsV1ListingsBusinessLocationSearch]
        """

        self._locations = locations

    @property
    def page_size(self):
        """Gets the page_size of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

        Search results page size  # noqa: E501

        :return: The page_size of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

        Search results page size  # noqa: E501

        :param page_size: The page_size of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def price(self):
        """Gets the price of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

        Price search criteria  # noqa: E501

        :return: The price of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

        Price search criteria  # noqa: E501

        :param price: The price of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: DomainPublicAdapterWebApiModelsV1ListingsBusinessPriceSearch
        """

        self._price = price

    @property
    def sort(self):
        """Gets the sort of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

        Sorting order  # noqa: E501

        :return: The sort of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

        Sorting order  # noqa: E501

        :param sort: The sort of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["default", "newestFirst", "lowTotalPriceFirst", "hightTotalPriceFirst", "suburbAsc", "suburbDesc"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"  # noqa: E501
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def search_mode(self):
        """Gets the search_mode of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501

        Search mode  # noqa: E501

        :return: The search_mode of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.

        Search mode  # noqa: E501

        :param search_mode: The search_mode of this DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["forSale", "franchiseOpportunity", "franchiseBrand"]  # noqa: E501
        if search_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `search_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(search_mode, allowed_values)
            )

        self._search_mode = search_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
