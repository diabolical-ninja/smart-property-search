# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainPublicAdapterWebApiModelsV1PropertiesAdvert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'on_market_types': 'list[str]',
        'advert_id': 'int',
        'agency': 'str',
        'agency_colour': 'str',
        'agency_id': 'int',
        'agency_logo': 'str',
        'url': 'str'
    }

    attribute_map = {
        'on_market_types': 'onMarketTypes',
        'advert_id': 'advertId',
        'agency': 'agency',
        'agency_colour': 'agencyColour',
        'agency_id': 'agencyId',
        'agency_logo': 'agencyLogo',
        'url': 'url'
    }

    def __init__(self, on_market_types=None, advert_id=None, agency=None, agency_colour=None, agency_id=None, agency_logo=None, url=None):  # noqa: E501
        """DomainPublicAdapterWebApiModelsV1PropertiesAdvert - a model defined in Swagger"""  # noqa: E501

        self._on_market_types = None
        self._advert_id = None
        self._agency = None
        self._agency_colour = None
        self._agency_id = None
        self._agency_logo = None
        self._url = None
        self.discriminator = None

        if on_market_types is not None:
            self.on_market_types = on_market_types
        if advert_id is not None:
            self.advert_id = advert_id
        if agency is not None:
            self.agency = agency
        if agency_colour is not None:
            self.agency_colour = agency_colour
        if agency_id is not None:
            self.agency_id = agency_id
        if agency_logo is not None:
            self.agency_logo = agency_logo
        if url is not None:
            self.url = url

    @property
    def on_market_types(self):
        """Gets the on_market_types of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501

        Gets or sets the on market type.  # noqa: E501

        :return: The on_market_types of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :rtype: list[str]
        """
        return self._on_market_types

    @on_market_types.setter
    def on_market_types(self, on_market_types):
        """Sets the on_market_types of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.

        Gets or sets the on market type.  # noqa: E501

        :param on_market_types: The on_market_types of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Unknown", "Rent", "Sale", "Share"]  # noqa: E501
        if not set(on_market_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `on_market_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(on_market_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._on_market_types = on_market_types

    @property
    def advert_id(self):
        """Gets the advert_id of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501

        Gets or sets the advert identifier.  # noqa: E501

        :return: The advert_id of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :rtype: int
        """
        return self._advert_id

    @advert_id.setter
    def advert_id(self, advert_id):
        """Sets the advert_id of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.

        Gets or sets the advert identifier.  # noqa: E501

        :param advert_id: The advert_id of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :type: int
        """

        self._advert_id = advert_id

    @property
    def agency(self):
        """Gets the agency of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501

        Gets or sets the name of the agency.  # noqa: E501

        :return: The agency of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :rtype: str
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.

        Gets or sets the name of the agency.  # noqa: E501

        :param agency: The agency of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :type: str
        """

        self._agency = agency

    @property
    def agency_colour(self):
        """Gets the agency_colour of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501

        Gets or sets the agency colour.  # noqa: E501

        :return: The agency_colour of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :rtype: str
        """
        return self._agency_colour

    @agency_colour.setter
    def agency_colour(self, agency_colour):
        """Sets the agency_colour of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.

        Gets or sets the agency colour.  # noqa: E501

        :param agency_colour: The agency_colour of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :type: str
        """

        self._agency_colour = agency_colour

    @property
    def agency_id(self):
        """Gets the agency_id of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501

        Gets or sets the Domain Agency identifier.  # noqa: E501

        :return: The agency_id of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :rtype: int
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.

        Gets or sets the Domain Agency identifier.  # noqa: E501

        :param agency_id: The agency_id of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :type: int
        """

        self._agency_id = agency_id

    @property
    def agency_logo(self):
        """Gets the agency_logo of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501

        Gets or sets the agency logo.  # noqa: E501

        :return: The agency_logo of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :rtype: str
        """
        return self._agency_logo

    @agency_logo.setter
    def agency_logo(self, agency_logo):
        """Sets the agency_logo of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.

        Gets or sets the agency logo.  # noqa: E501

        :param agency_logo: The agency_logo of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :type: str
        """

        self._agency_logo = agency_logo

    @property
    def url(self):
        """Gets the url of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501

        Gets or sets the URL.  # noqa: E501

        :return: The url of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.

        Gets or sets the URL.  # noqa: E501

        :param url: The url of this DomainPublicAdapterWebApiModelsV1PropertiesAdvert.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainPublicAdapterWebApiModelsV1PropertiesAdvert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainPublicAdapterWebApiModelsV1PropertiesAdvert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
