# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DomainListingAdminServiceV1ModelListingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'process_status': 'str',
        'id': 'str',
        'agency_id': 'int',
        'provider_id': 'str',
        'provider_ad_id': 'str',
        'version_id': 'str'
    }

    attribute_map = {
        'process_status': 'processStatus',
        'id': 'id',
        'agency_id': 'agencyId',
        'provider_id': 'providerId',
        'provider_ad_id': 'providerAdId',
        'version_id': 'versionId'
    }

    def __init__(self, process_status=None, id=None, agency_id=None, provider_id=None, provider_ad_id=None, version_id=None):  # noqa: E501
        """DomainListingAdminServiceV1ModelListingResponse - a model defined in Swagger"""  # noqa: E501

        self._process_status = None
        self._id = None
        self._agency_id = None
        self._provider_id = None
        self._provider_ad_id = None
        self._version_id = None
        self.discriminator = None

        if process_status is not None:
            self.process_status = process_status
        if id is not None:
            self.id = id
        if agency_id is not None:
            self.agency_id = agency_id
        if provider_id is not None:
            self.provider_id = provider_id
        if provider_ad_id is not None:
            self.provider_ad_id = provider_ad_id
        if version_id is not None:
            self.version_id = version_id

    @property
    def process_status(self):
        """Gets the process_status of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501

        Status of listing been processed  # noqa: E501

        :return: The process_status of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :rtype: str
        """
        return self._process_status

    @process_status.setter
    def process_status(self, process_status):
        """Sets the process_status of this DomainListingAdminServiceV1ModelListingResponse.

        Status of listing been processed  # noqa: E501

        :param process_status: The process_status of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["queued", "processing", "processed", "searchable", "failed", "error"]  # noqa: E501
        if process_status not in allowed_values:
            raise ValueError(
                "Invalid value for `process_status` ({0}), must be one of {1}"  # noqa: E501
                .format(process_status, allowed_values)
            )

        self._process_status = process_status

    @property
    def id(self):
        """Gets the id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501

        The listing job Id.               This job will eventually be processed.  # noqa: E501

        :return: The id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DomainListingAdminServiceV1ModelListingResponse.

        The listing job Id.               This job will eventually be processed.  # noqa: E501

        :param id: The id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def agency_id(self):
        """Gets the agency_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501

        Agency Id from Domain.  # noqa: E501

        :return: The agency_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :rtype: int
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this DomainListingAdminServiceV1ModelListingResponse.

        Agency Id from Domain.  # noqa: E501

        :param agency_id: The agency_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :type: int
        """

        self._agency_id = agency_id

    @property
    def provider_id(self):
        """Gets the provider_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501

        Provider Id for the agency.  # noqa: E501

        :return: The provider_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this DomainListingAdminServiceV1ModelListingResponse.

        Provider Id for the agency.  # noqa: E501

        :param provider_id: The provider_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def provider_ad_id(self):
        """Gets the provider_ad_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501

        Listing identifier provided by CRM.  # noqa: E501

        :return: The provider_ad_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :rtype: str
        """
        return self._provider_ad_id

    @provider_ad_id.setter
    def provider_ad_id(self, provider_ad_id):
        """Sets the provider_ad_id of this DomainListingAdminServiceV1ModelListingResponse.

        Listing identifier provided by CRM.  # noqa: E501

        :param provider_ad_id: The provider_ad_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :type: str
        """

        self._provider_ad_id = provider_ad_id

    @property
    def version_id(self):
        """Gets the version_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501

        Version Id  # noqa: E501

        :return: The version_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this DomainListingAdminServiceV1ModelListingResponse.

        Version Id  # noqa: E501

        :param version_id: The version_id of this DomainListingAdminServiceV1ModelListingResponse.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainListingAdminServiceV1ModelListingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainListingAdminServiceV1ModelListingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
