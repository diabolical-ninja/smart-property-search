# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from domainClient.api_client import ApiClient


class PropertyReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def property_reports_get(self, property_type, street_number, street_name, suburb, state, **kwargs):  # noqa: E501
        """Retrieves a property report based on query parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_reports_get(property_type, street_number, street_name, suburb, state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_type: Type of property `House`, `Unit` (required)
        :param str street_number: Street number (required)
        :param str street_name: Street name (required)
        :param str suburb: Suburb e.g. `Pyrmont` (required)
        :param str state: State e.g. `NSW` (required)
        :param str unit_number: Unit number
        :param str street_type: Street type e.g. `Pl`
        :param str postcode: Postcode e.g. `2009`
        :param int area_size: Area size
        :param int bedrooms: Number of bedrooms
        :param int bathrooms: Number of bathrooms
        :param int parking: Number of parking spots
        :param str prepared_for: \"Prepared for\" information
        :param str product_code: Report product code
        :return: DomainPropertyReportServiceV1ModelPropertyReportGenerationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.property_reports_get_with_http_info(property_type, street_number, street_name, suburb, state, **kwargs)  # noqa: E501
        else:
            (data) = self.property_reports_get_with_http_info(property_type, street_number, street_name, suburb, state, **kwargs)  # noqa: E501
            return data

    def property_reports_get_with_http_info(self, property_type, street_number, street_name, suburb, state, **kwargs):  # noqa: E501
        """Retrieves a property report based on query parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.property_reports_get_with_http_info(property_type, street_number, street_name, suburb, state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str property_type: Type of property `House`, `Unit` (required)
        :param str street_number: Street number (required)
        :param str street_name: Street name (required)
        :param str suburb: Suburb e.g. `Pyrmont` (required)
        :param str state: State e.g. `NSW` (required)
        :param str unit_number: Unit number
        :param str street_type: Street type e.g. `Pl`
        :param str postcode: Postcode e.g. `2009`
        :param int area_size: Area size
        :param int bedrooms: Number of bedrooms
        :param int bathrooms: Number of bathrooms
        :param int parking: Number of parking spots
        :param str prepared_for: \"Prepared for\" information
        :param str product_code: Report product code
        :return: DomainPropertyReportServiceV1ModelPropertyReportGenerationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['property_type', 'street_number', 'street_name', 'suburb', 'state', 'unit_number', 'street_type', 'postcode', 'area_size', 'bedrooms', 'bathrooms', 'parking', 'prepared_for', 'product_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method property_reports_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'property_type' is set
        if ('property_type' not in params or
                params['property_type'] is None):
            raise ValueError("Missing the required parameter `property_type` when calling `property_reports_get`")  # noqa: E501
        # verify the required parameter 'street_number' is set
        if ('street_number' not in params or
                params['street_number'] is None):
            raise ValueError("Missing the required parameter `street_number` when calling `property_reports_get`")  # noqa: E501
        # verify the required parameter 'street_name' is set
        if ('street_name' not in params or
                params['street_name'] is None):
            raise ValueError("Missing the required parameter `street_name` when calling `property_reports_get`")  # noqa: E501
        # verify the required parameter 'suburb' is set
        if ('suburb' not in params or
                params['suburb'] is None):
            raise ValueError("Missing the required parameter `suburb` when calling `property_reports_get`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `property_reports_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'property_type' in params:
            query_params.append(('propertyType', params['property_type']))  # noqa: E501
        if 'street_number' in params:
            query_params.append(('streetNumber', params['street_number']))  # noqa: E501
        if 'street_name' in params:
            query_params.append(('streetName', params['street_name']))  # noqa: E501
        if 'suburb' in params:
            query_params.append(('suburb', params['suburb']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'unit_number' in params:
            query_params.append(('unitNumber', params['unit_number']))  # noqa: E501
        if 'street_type' in params:
            query_params.append(('streetType', params['street_type']))  # noqa: E501
        if 'postcode' in params:
            query_params.append(('postcode', params['postcode']))  # noqa: E501
        if 'area_size' in params:
            query_params.append(('areaSize', params['area_size']))  # noqa: E501
        if 'bedrooms' in params:
            query_params.append(('bedrooms', params['bedrooms']))  # noqa: E501
        if 'bathrooms' in params:
            query_params.append(('bathrooms', params['bathrooms']))  # noqa: E501
        if 'parking' in params:
            query_params.append(('parking', params['parking']))  # noqa: E501
        if 'prepared_for' in params:
            query_params.append(('preparedFor', params['prepared_for']))  # noqa: E501
        if 'product_code' in params:
            query_params.append(('productCode', params['product_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/propertyReports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainPropertyReportServiceV1ModelPropertyReportGenerationResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
