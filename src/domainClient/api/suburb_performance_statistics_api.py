# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from domainClient.api_client import ApiClient


class SuburbPerformanceStatisticsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def suburb_performance_statistics_get(self, state, suburb_id, property_category, chronological_span, t_plus_from, t_plus_to, **kwargs):  # noqa: E501
        """Retrieves suburb performance data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suburb_performance_statistics_get(state, suburb_id, property_category, chronological_span, t_plus_from, t_plus_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: State where the suburb is (required)
        :param int suburb_id: Suburb Identifier.  Use the `addressLocators` resource to determine the suburbId. (required)
        :param str property_category: Property Category. Valid values are: `house`, `unit`, `land` (required)
        :param int chronological_span: The size of each chunk of information we want in months. 3, 6, or 12. (required)
        :param int t_plus_from: Countdown number in chronological spans from the current (current chronological span is 1) (required)
        :param int t_plus_to: Countdown number in chronological spans from the current (current chronological span is 1, 2 chronological spans ago is 3) (required)
        :param str bedrooms: Restrict statistics to properties with this number of bedrooms
        :param str values: Values to be returned for the series.  If the field is not provided, all available values for the SeriesInfo will be returned. You can specify multiple values using comma separated text.  Valid values are: `MedianSoldPrice`, `AuctionNumberAuctioned`, `AuctionNumberSold`, `AuctionNumberWithdrawn`, `NumberSold`, `LowestSoldPrice`, `HighestSoldPrice`, `5thPercentileSoldPrice`, `25thPercentileSoldPrice`, `75thPercentileSoldPrice`, `95thPercentileSoldPrice`, `DaysOnMarket`, `DiscountPercentage`, `MedianRentListingPrice`, `NumberRentListing`, `HighestRentListingPrice`, `LowestRentListingPrice`, `MedianSaleListingPrice`, `NumberSaleListing`, `HighestSaleListingPrice`, `LowestSaleListingPrice`
        :return: DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SuburbPerformanceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suburb_performance_statistics_get_with_http_info(state, suburb_id, property_category, chronological_span, t_plus_from, t_plus_to, **kwargs)  # noqa: E501
        else:
            (data) = self.suburb_performance_statistics_get_with_http_info(state, suburb_id, property_category, chronological_span, t_plus_from, t_plus_to, **kwargs)  # noqa: E501
            return data

    def suburb_performance_statistics_get_with_http_info(self, state, suburb_id, property_category, chronological_span, t_plus_from, t_plus_to, **kwargs):  # noqa: E501
        """Retrieves suburb performance data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suburb_performance_statistics_get_with_http_info(state, suburb_id, property_category, chronological_span, t_plus_from, t_plus_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: State where the suburb is (required)
        :param int suburb_id: Suburb Identifier.  Use the `addressLocators` resource to determine the suburbId. (required)
        :param str property_category: Property Category. Valid values are: `house`, `unit`, `land` (required)
        :param int chronological_span: The size of each chunk of information we want in months. 3, 6, or 12. (required)
        :param int t_plus_from: Countdown number in chronological spans from the current (current chronological span is 1) (required)
        :param int t_plus_to: Countdown number in chronological spans from the current (current chronological span is 1, 2 chronological spans ago is 3) (required)
        :param str bedrooms: Restrict statistics to properties with this number of bedrooms
        :param str values: Values to be returned for the series.  If the field is not provided, all available values for the SeriesInfo will be returned. You can specify multiple values using comma separated text.  Valid values are: `MedianSoldPrice`, `AuctionNumberAuctioned`, `AuctionNumberSold`, `AuctionNumberWithdrawn`, `NumberSold`, `LowestSoldPrice`, `HighestSoldPrice`, `5thPercentileSoldPrice`, `25thPercentileSoldPrice`, `75thPercentileSoldPrice`, `95thPercentileSoldPrice`, `DaysOnMarket`, `DiscountPercentage`, `MedianRentListingPrice`, `NumberRentListing`, `HighestRentListingPrice`, `LowestRentListingPrice`, `MedianSaleListingPrice`, `NumberSaleListing`, `HighestSaleListingPrice`, `LowestSaleListingPrice`
        :return: DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SuburbPerformanceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'suburb_id', 'property_category', 'chronological_span', 't_plus_from', 't_plus_to', 'bedrooms', 'values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suburb_performance_statistics_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `suburb_performance_statistics_get`")  # noqa: E501
        # verify the required parameter 'suburb_id' is set
        if ('suburb_id' not in params or
                params['suburb_id'] is None):
            raise ValueError("Missing the required parameter `suburb_id` when calling `suburb_performance_statistics_get`")  # noqa: E501
        # verify the required parameter 'property_category' is set
        if ('property_category' not in params or
                params['property_category'] is None):
            raise ValueError("Missing the required parameter `property_category` when calling `suburb_performance_statistics_get`")  # noqa: E501
        # verify the required parameter 'chronological_span' is set
        if ('chronological_span' not in params or
                params['chronological_span'] is None):
            raise ValueError("Missing the required parameter `chronological_span` when calling `suburb_performance_statistics_get`")  # noqa: E501
        # verify the required parameter 't_plus_from' is set
        if ('t_plus_from' not in params or
                params['t_plus_from'] is None):
            raise ValueError("Missing the required parameter `t_plus_from` when calling `suburb_performance_statistics_get`")  # noqa: E501
        # verify the required parameter 't_plus_to' is set
        if ('t_plus_to' not in params or
                params['t_plus_to'] is None):
            raise ValueError("Missing the required parameter `t_plus_to` when calling `suburb_performance_statistics_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'suburb_id' in params:
            query_params.append(('suburbId', params['suburb_id']))  # noqa: E501
        if 'property_category' in params:
            query_params.append(('propertyCategory', params['property_category']))  # noqa: E501
        if 'chronological_span' in params:
            query_params.append(('chronologicalSpan', params['chronological_span']))  # noqa: E501
        if 't_plus_from' in params:
            query_params.append(('tPlusFrom', params['t_plus_from']))  # noqa: E501
        if 't_plus_to' in params:
            query_params.append(('tPlusTo', params['t_plus_to']))  # noqa: E501
        if 'bedrooms' in params:
            query_params.append(('bedrooms', params['bedrooms']))  # noqa: E501
        if 'values' in params:
            query_params.append(('values', params['values']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/suburbPerformanceStatistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainAPMServiceV2ModelAPMAPIModelsSuburbV2SuburbPerformanceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
