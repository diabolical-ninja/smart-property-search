# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from domainClient.api_client import ApiClient


class DemographicsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def demographics_get(self, level, id, **kwargs):  # noqa: E501
        """Retrieves demographic information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.demographics_get(level, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str level: Geographic level.  Valid values are: `Postcode`, `Suburb` (required)
        :param int id: Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the `/addressLocators` endpoint. (required)
        :param str types: Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: `AgeGroupOfPopulation`, `CountryOfBirth`, `NatureOfOccupancy`, `GeographicalPopulation`, `DwellingStructure`, `HousingLoanRepayment`, `MaritalStatus`, `Religion`, `Occupation`, `EducationAttendance`, `TransportToWork`
        :param str year: Year of the source data.  Valid values are: `2011`, `2016`
        :return: DomainDemographicsServiceV1ModelDemographicsResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.demographics_get_with_http_info(level, id, **kwargs)  # noqa: E501
        else:
            (data) = self.demographics_get_with_http_info(level, id, **kwargs)  # noqa: E501
            return data

    def demographics_get_with_http_info(self, level, id, **kwargs):  # noqa: E501
        """Retrieves demographic information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.demographics_get_with_http_info(level, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str level: Geographic level.  Valid values are: `Postcode`, `Suburb` (required)
        :param int id: Location identifier. If the geographic level is Suburb this is a Suburb ID value, if the geographic level is postcode this is a Postcode ID value.  See the `/addressLocators` endpoint. (required)
        :param str types: Comma separated list of demographic data requested. If not provided, all data will be returned. Valid values are: `AgeGroupOfPopulation`, `CountryOfBirth`, `NatureOfOccupancy`, `GeographicalPopulation`, `DwellingStructure`, `HousingLoanRepayment`, `MaritalStatus`, `Religion`, `Occupation`, `EducationAttendance`, `TransportToWork`
        :param str year: Year of the source data.  Valid values are: `2011`, `2016`
        :return: DomainDemographicsServiceV1ModelDemographicsResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['level', 'id', 'types', 'year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method demographics_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'level' is set
        if ('level' not in params or
                params['level'] is None):
            raise ValueError("Missing the required parameter `level` when calling `demographics_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `demographics_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'types' in params:
            query_params.append(('types', params['types']))  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/demographics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainDemographicsServiceV1ModelDemographicsResultsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
