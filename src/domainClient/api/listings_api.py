# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from domainClient.api_client import ApiClient


class ListingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def listing_locations_search(self, **kwargs):  # noqa: E501
        """Suggests listing locations  # noqa: E501

        The resulting suggested location can be of type \"suburb\" / \"area\" / \"region\".    The `name` property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [`v1/listings/residential/_search`](/docs/endpoints/listings/listings_detailedresidentialsearch)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listing_locations_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str terms: Suburb / area / region prefix, or postcode
        :return: list[DomainPublicAdapterWebApiModelsV1ListingsListingLocation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listing_locations_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.listing_locations_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def listing_locations_search_with_http_info(self, **kwargs):  # noqa: E501
        """Suggests listing locations  # noqa: E501

        The resulting suggested location can be of type \"suburb\" / \"area\" / \"region\".    The `name` property corresponds to the type of location returned.    The area name / region name can be fed into the corresponding fields search fields.  See [`v1/listings/residential/_search`](/docs/endpoints/listings/listings_detailedresidentialsearch)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listing_locations_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str terms: Suburb / area / region prefix, or postcode
        :return: list[DomainPublicAdapterWebApiModelsV1ListingsListingLocation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['terms']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listing_locations_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'terms' in params:
            query_params.append(('terms', params['terms']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/locations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DomainPublicAdapterWebApiModelsV1ListingsListingLocation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_detailed_business_search(self, parameters, **kwargs):  # noqa: E501
        """Retrieves business listings matching the specified criteria.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_detailed_business_search(parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest parameters: Search parameters (required)
        :return: list[DomainPublicAdapterWebApiModelsV1ListingsBusinessListing]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_detailed_business_search_with_http_info(parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_detailed_business_search_with_http_info(parameters, **kwargs)  # noqa: E501
            return data

    def listings_detailed_business_search_with_http_info(self, parameters, **kwargs):  # noqa: E501
        """Retrieves business listings matching the specified criteria.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_detailed_business_search_with_http_info(parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainPublicAdapterWebApiModelsV1ListingsBusinessSearchRequest parameters: Search parameters (required)
        :return: list[DomainPublicAdapterWebApiModelsV1ListingsBusinessListing]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_detailed_business_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameters' is set
        if ('parameters' not in params or
                params['parameters'] is None):
            raise ValueError("Missing the required parameter `parameters` when calling `listings_detailed_business_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameters' in params:
            body_params = params['parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/business/_search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DomainPublicAdapterWebApiModelsV1ListingsBusinessListing]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_detailed_commercial_search(self, parameters, **kwargs):  # noqa: E501
        """Retrieves commercial listings matching the specified criteria.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_detailed_commercial_search(parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest parameters: Search parameters (required)
        :return: list[DomainPublicAdapterWebApiModelsV1ListingsCommercialListing]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_detailed_commercial_search_with_http_info(parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_detailed_commercial_search_with_http_info(parameters, **kwargs)  # noqa: E501
            return data

    def listings_detailed_commercial_search_with_http_info(self, parameters, **kwargs):  # noqa: E501
        """Retrieves commercial listings matching the specified criteria.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_detailed_commercial_search_with_http_info(parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainPublicAdapterWebApiModelsV1ListingsCommercialSearchRequest parameters: Search parameters (required)
        :return: list[DomainPublicAdapterWebApiModelsV1ListingsCommercialListing]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_detailed_commercial_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameters' is set
        if ('parameters' not in params or
                params['parameters'] is None):
            raise ValueError("Missing the required parameter `parameters` when calling `listings_detailed_commercial_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameters' in params:
            body_params = params['parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/commercial/_search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DomainPublicAdapterWebApiModelsV1ListingsCommercialListing]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_detailed_residential_search(self, parameters, **kwargs):  # noqa: E501
        """Retrieves residential listings matching the specified criteria.  # noqa: E501

        Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_detailed_residential_search(parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters parameters: Search parameters (required)
        :return: list[DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_detailed_residential_search_with_http_info(parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_detailed_residential_search_with_http_info(parameters, **kwargs)  # noqa: E501
            return data

    def listings_detailed_residential_search_with_http_info(self, parameters, **kwargs):  # noqa: E501
        """Retrieves residential listings matching the specified criteria.  # noqa: E501

        Search results are limited to the first 1000 results.    If the number of results is greater, the intention is to refine the search by adding more restrictive parameters, to find a relevant set of results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_detailed_residential_search_with_http_info(parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainSearchServiceV2ModelDomainSearchWebApiV2ModelsSearchParameters parameters: Search parameters (required)
        :return: list[DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_detailed_residential_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameters' is set
        if ('parameters' not in params or
                params['parameters'] is None):
            raise ValueError("Missing the required parameter `parameters` when calling `listings_detailed_residential_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameters' in params:
            body_params = params['parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/residential/_search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DomainSearchServiceV2ModelDomainSearchContractsV2SearchResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_get(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific listing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Listing identifier (required)
        :return: DomainPublicAdapterWebApiModelsV1ListingsListing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def listings_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific listing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Listing identifier (required)
        :return: DomainPublicAdapterWebApiModelsV1ListingsListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listings_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainPublicAdapterWebApiModelsV1ListingsListing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_get_enquiries(self, id, **kwargs):  # noqa: E501
        """Returns enquiries for a given listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_enquiries(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Listing identifier (required)
        :param int page_number: Page number for paginated results (25 per page)
        :return: list[DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_get_enquiries_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_get_enquiries_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def listings_get_enquiries_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns enquiries for a given listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_enquiries_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Listing identifier (required)
        :param int page_number: Page number for paginated results (25 per page)
        :return: list[DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_get_enquiries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listings_get_enquiries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/{id}/enquiries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_get_listing_report(self, id, **kwargs):  # noqa: E501
        """Gets the processing report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_listing_report(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Report id (required)
        :return: DomainListingAdminServiceV1ModelListingReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_get_listing_report_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_get_listing_report_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def listings_get_listing_report_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the processing report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_listing_report_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Report id (required)
        :return: DomainListingAdminServiceV1ModelListingReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_get_listing_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listings_get_listing_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/processingReports/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainListingAdminServiceV1ModelListingReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_get_listing_report_by_reference(self, agency_id, provider_ad_id, **kwargs):  # noqa: E501
        """Searches processing reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_listing_report_by_reference(agency_id, provider_ad_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int agency_id: Domain agency Id (required)
        :param str provider_ad_id: External provider advertisement identifier (required)
        :return: list[DomainListingAdminServiceV1ModelListingReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_get_listing_report_by_reference_with_http_info(agency_id, provider_ad_id, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_get_listing_report_by_reference_with_http_info(agency_id, provider_ad_id, **kwargs)  # noqa: E501
            return data

    def listings_get_listing_report_by_reference_with_http_info(self, agency_id, provider_ad_id, **kwargs):  # noqa: E501
        """Searches processing reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_listing_report_by_reference_with_http_info(agency_id, provider_ad_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int agency_id: Domain agency Id (required)
        :param str provider_ad_id: External provider advertisement identifier (required)
        :return: list[DomainListingAdminServiceV1ModelListingReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['agency_id', 'provider_ad_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_get_listing_report_by_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'agency_id' is set
        if ('agency_id' not in params or
                params['agency_id'] is None):
            raise ValueError("Missing the required parameter `agency_id` when calling `listings_get_listing_report_by_reference`")  # noqa: E501
        # verify the required parameter 'provider_ad_id' is set
        if ('provider_ad_id' not in params or
                params['provider_ad_id'] is None):
            raise ValueError("Missing the required parameter `provider_ad_id` when calling `listings_get_listing_report_by_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'agency_id' in params:
            query_params.append(('agencyId', params['agency_id']))  # noqa: E501
        if 'provider_ad_id' in params:
            query_params.append(('providerAdId', params['provider_ad_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/processingReports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DomainListingAdminServiceV1ModelListingReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_get_listing_statistics(self, id, **kwargs):  # noqa: E501
        """Retrieves listings stats for the specified listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_listing_statistics(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Listing identifier (required)
        :param str time_period: The time period to show statistics for. Valid values are: `last7Days`, `last90Days`, `wholeCampaign`
        :return: DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_get_listing_statistics_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_get_listing_statistics_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def listings_get_listing_statistics_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves listings stats for the specified listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_listing_statistics_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Listing identifier (required)
        :param str time_period: The time period to show statistics for. Valid values are: `last7Days`, `last90Days`, `wholeCampaign`
        :return: DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'time_period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_get_listing_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listings_get_listing_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'time_period' in params:
            query_params.append(('timePeriod', params['time_period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/{id}/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainPublicAdapterWebApiModelsV1ListingsStatisticsReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_get_listing_statistics_by_agent_id(self, agent_id, time_period, status_filter, **kwargs):  # noqa: E501
        """Retrieves stats for the listings of a given agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_listing_statistics_by_agent_id(agent_id, time_period, status_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int agent_id: Agent identifier (required)
        :param str time_period: The time period to show statistics for. Valid values are: `last7Days`, `last90Days`, `wholeCampaign` (required)
        :param str status_filter: Listing filter (required)
        :param int page_number: Page number for paginated results
        :param int page_size: Page size for paginated results
        :return: list[DomainPublicAdapterWebApiModelsV1ListingsStatistics]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_get_listing_statistics_by_agent_id_with_http_info(agent_id, time_period, status_filter, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_get_listing_statistics_by_agent_id_with_http_info(agent_id, time_period, status_filter, **kwargs)  # noqa: E501
            return data

    def listings_get_listing_statistics_by_agent_id_with_http_info(self, agent_id, time_period, status_filter, **kwargs):  # noqa: E501
        """Retrieves stats for the listings of a given agent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_get_listing_statistics_by_agent_id_with_http_info(agent_id, time_period, status_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int agent_id: Agent identifier (required)
        :param str time_period: The time period to show statistics for. Valid values are: `last7Days`, `last90Days`, `wholeCampaign` (required)
        :param str status_filter: Listing filter (required)
        :param int page_number: Page number for paginated results
        :param int page_size: Page size for paginated results
        :return: list[DomainPublicAdapterWebApiModelsV1ListingsStatistics]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['agent_id', 'time_period', 'status_filter', 'page_number', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_get_listing_statistics_by_agent_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'agent_id' is set
        if ('agent_id' not in params or
                params['agent_id'] is None):
            raise ValueError("Missing the required parameter `agent_id` when calling `listings_get_listing_statistics_by_agent_id`")  # noqa: E501
        # verify the required parameter 'time_period' is set
        if ('time_period' not in params or
                params['time_period'] is None):
            raise ValueError("Missing the required parameter `time_period` when calling `listings_get_listing_statistics_by_agent_id`")  # noqa: E501
        # verify the required parameter 'status_filter' is set
        if ('status_filter' not in params or
                params['status_filter'] is None):
            raise ValueError("Missing the required parameter `status_filter` when calling `listings_get_listing_statistics_by_agent_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))  # noqa: E501
        if 'time_period' in params:
            query_params.append(('timePeriod', params['time_period']))  # noqa: E501
        if 'status_filter' in params:
            query_params.append(('statusFilter', params['status_filter']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DomainPublicAdapterWebApiModelsV1ListingsStatistics]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_update_offmarket_details(self, id, off_market_details, **kwargs):  # noqa: E501
        """Takes a listing offmarket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_update_offmarket_details(id, off_market_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Listing identifier (required)
        :param DomainListingAdminServiceV1ModelOffMarketDetails off_market_details:  (required)
        :return: DomainListingAdminServiceV1ModelListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_update_offmarket_details_with_http_info(id, off_market_details, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_update_offmarket_details_with_http_info(id, off_market_details, **kwargs)  # noqa: E501
            return data

    def listings_update_offmarket_details_with_http_info(self, id, off_market_details, **kwargs):  # noqa: E501
        """Takes a listing offmarket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_update_offmarket_details_with_http_info(id, off_market_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Listing identifier (required)
        :param DomainListingAdminServiceV1ModelOffMarketDetails off_market_details:  (required)
        :return: DomainListingAdminServiceV1ModelListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'off_market_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_update_offmarket_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listings_update_offmarket_details`")  # noqa: E501
        # verify the required parameter 'off_market_details' is set
        if ('off_market_details' not in params or
                params['off_market_details'] is None):
            raise ValueError("Missing the required parameter `off_market_details` when calling `listings_update_offmarket_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'off_market_details' in params:
            body_params = params['off_market_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/{id}/offmarket', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainListingAdminServiceV1ModelListingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_upsert_business_listing(self, listing, **kwargs):  # noqa: E501
        """Creates or updates a business listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_upsert_business_listing(listing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainListingAdminServiceV1ModelBusinessListing listing: The business listing (required)
        :return: DomainListingAdminServiceV1ModelListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_upsert_business_listing_with_http_info(listing, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_upsert_business_listing_with_http_info(listing, **kwargs)  # noqa: E501
            return data

    def listings_upsert_business_listing_with_http_info(self, listing, **kwargs):  # noqa: E501
        """Creates or updates a business listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_upsert_business_listing_with_http_info(listing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainListingAdminServiceV1ModelBusinessListing listing: The business listing (required)
        :return: DomainListingAdminServiceV1ModelListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['listing']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_upsert_business_listing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'listing' is set
        if ('listing' not in params or
                params['listing'] is None):
            raise ValueError("Missing the required parameter `listing` when calling `listings_upsert_business_listing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'listing' in params:
            body_params = params['listing']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/business', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainListingAdminServiceV1ModelListingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_upsert_commercial_listing(self, listing, **kwargs):  # noqa: E501
        """Creates or updates a commercial listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_upsert_commercial_listing(listing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainListingAdminServiceV1ModelCommercialListing listing: The commercial listing (required)
        :return: DomainListingAdminServiceV1ModelListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_upsert_commercial_listing_with_http_info(listing, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_upsert_commercial_listing_with_http_info(listing, **kwargs)  # noqa: E501
            return data

    def listings_upsert_commercial_listing_with_http_info(self, listing, **kwargs):  # noqa: E501
        """Creates or updates a commercial listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_upsert_commercial_listing_with_http_info(listing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainListingAdminServiceV1ModelCommercialListing listing: The commercial listing (required)
        :return: DomainListingAdminServiceV1ModelListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['listing']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_upsert_commercial_listing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'listing' is set
        if ('listing' not in params or
                params['listing'] is None):
            raise ValueError("Missing the required parameter `listing` when calling `listings_upsert_commercial_listing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'listing' in params:
            body_params = params['listing']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/commercial', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainListingAdminServiceV1ModelListingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listings_upsert_residential_listing(self, listing, **kwargs):  # noqa: E501
        """Creates or updates a residential listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_upsert_residential_listing(listing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainListingAdminServiceV1ModelResidentialListing listing: The residential listing (required)
        :return: DomainListingAdminServiceV1ModelListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listings_upsert_residential_listing_with_http_info(listing, **kwargs)  # noqa: E501
        else:
            (data) = self.listings_upsert_residential_listing_with_http_info(listing, **kwargs)  # noqa: E501
            return data

    def listings_upsert_residential_listing_with_http_info(self, listing, **kwargs):  # noqa: E501
        """Creates or updates a residential listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listings_upsert_residential_listing_with_http_info(listing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainListingAdminServiceV1ModelResidentialListing listing: The residential listing (required)
        :return: DomainListingAdminServiceV1ModelListingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['listing']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listings_upsert_residential_listing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'listing' is set
        if ('listing' not in params or
                params['listing'] is None):
            raise ValueError("Missing the required parameter `listing` when calling `listings_upsert_residential_listing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'listing' in params:
            body_params = params['listing']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/listings/residential', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainListingAdminServiceV1ModelListingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
