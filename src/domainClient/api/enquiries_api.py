# coding: utf-8

"""
    Domain Group API V1

    Provides public access to Domain's microservices  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from domainClient.api_client import ApiClient


class EnquiriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def enquiries_get(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific enquiry.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enquiries_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Enquiry identifier (required)
        :return: DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enquiries_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.enquiries_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def enquiries_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a specific enquiry.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enquiries_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Enquiry identifier (required)
        :return: DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enquiries_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enquiries_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enquiries/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enquiries_post(self, enquiry, **kwargs):  # noqa: E501
        """Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enquiries_post(enquiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry enquiry: The enquiry object (required)
        :return: DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enquiries_post_with_http_info(enquiry, **kwargs)  # noqa: E501
        else:
            (data) = self.enquiries_post_with_http_info(enquiry, **kwargs)  # noqa: E501
            return data

    def enquiries_post_with_http_info(self, enquiry, **kwargs):  # noqa: E501
        """Sends an enquiry for listing, agency, etc... (based on the enquiry type and referenceid).  Recipients and template will be automatically selected.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enquiries_post_with_http_info(enquiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainPublicAdapterWebApiModelsV1EnquiriesEnquiry enquiry: The enquiry object (required)
        :return: DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enquiry']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enquiries_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enquiry' is set
        if ('enquiry' not in params or
                params['enquiry'] is None):
            raise ValueError("Missing the required parameter `enquiry` when calling `enquiries_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enquiry' in params:
            body_params = params['enquiry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enquiries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainEnquiryServiceV1ModelGroupEnquiryServiceModelsEnquiryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enquiries_search(self, **kwargs):  # noqa: E501
        """Searches enquiries based on agents or agencies.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enquiries_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int agency_id: Agency identifier
        :param int agent_id: Agent identifier
        :param datetime _from: Enquiries received from
        :param datetime to: Enquiries received up to
        :param int page_number: Page number for paginated results (25 per page)
        :return: list[DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enquiries_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.enquiries_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def enquiries_search_with_http_info(self, **kwargs):  # noqa: E501
        """Searches enquiries based on agents or agencies.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enquiries_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int agency_id: Agency identifier
        :param int agent_id: Agent identifier
        :param datetime _from: Enquiries received from
        :param datetime to: Enquiries received up to
        :param int page_number: Page number for paginated results (25 per page)
        :return: list[DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['agency_id', 'agent_id', '_from', 'to', 'page_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enquiries_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'agency_id' in params:
            query_params.append(('agencyId', params['agency_id']))  # noqa: E501
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enquiries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DomainPublicAdapterWebApiModelsV1EnquiriesEnquiryReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
